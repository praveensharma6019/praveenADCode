@using Sitecore.Feature.Accounts
@using Sitecore.Feature.Accounts.Services
@using Sitecore.Foundation.Dictionary.Extensions
@using Sitecore.Foundation.SitecoreExtensions.Extensions
@using Sitecore.Mvc.Configuration

@model Sitecore.Feature.Accounts.Models.LoginInfo




@{
    Sitecore.Data.Items.Item contextItem = Sitecore.Context.Item;



    string loginsession = Session["LoginSession"] != null ? Session["LoginSession"].ToString() : string.Empty;
    if (!string.IsNullOrEmpty(loginsession) && loginsession == "2")
    {
        Session["LoginSession"] = null;
        loginsession = null;
        <script type="text/javascript">
            $(document).ready(function () {
                setTimeout(function () {
                    /* debugger;*/
                    dataLayer.push({
                        'event': 'aeml_login_failure',
                        'eventCategory': 'User Login',
                        'eventAction': 'AEML Login Failure',
                        'eventLabel': 'Invalid credentials',
                        'business_user_id': $('#BusinessUserId').val(),
                        'login_status': $('#login_status').val(),
                        'ca_number': $('#GACANumber').val(),
                        'page_type': $('head title').text()
                    });
                }, 1500);



            });
        </script>
        @*if (!string.IsNullOrEmpty(loginsession) && loginsession == "1")
            {
                Session["LoginSession"] = null;
                loginsession = null;
                <script type="text/javascript">
                    $(document).ready(function () {
                        setTimeout(function () {
                            /* debugger;*/
                            dataLayer.push({
                                'event': 'aeml_login_success',
                                'eventCategory': 'User Login',
                                'eventAction': 'AEML Login Success',
                                'eventLabel': 'NA',
                                'business_user_id': $('#BusinessUserId').val(),
                                'login_status': $('#login_status').val(),
                                'ca_number': $('#CANumber').val(),
                                'page_type': $('head title').text()
                            });
                        }, 1500);



                    });
                </script>



            }*@



    }




}




@*//$(document).ready(function (e) {
    // alert("hello");
    // dataLayer.push({
    // 'event': $(this).attr('aeml_login_failure'),
    // 'eventCategory': $(this).attr('User Login'),
    // 'eventAction': $(this).attr('AEML Login Failure'),
    // 'eventLabel': $(this).attr('Invalid credentials'),
    // 'business_user_id': $('#BusinessUserId').val(),
    // 'login_status': $('#login_status').val(),
    // 'ca_number': $('#CANumber').val(),
    // 'page_type': $('head title').text()
    // });
    //})*@





@if (contextItem != null)
{
    <div class="col l6 s12 offset-l3">
        <div>
            @if (Request.QueryString["afterpayment"] != null && Request.QueryString["afterpayment"] == "1")
            {
                <h1>
                    @Html.Raw(Html.Sitecore().Dictionary("/Accounts/Login/LoginToPayAnotherBill", "Login to Pay another bill"))
                </h1>
            }
            else
            {
                <h1>@Html.Raw(contextItem["Title"])</h1>
            }
            @using (Html.BeginRouteForm(MvcSettings.SitecoreRouteName, FormMethod.Post, new { @class = "form-signin", ReturnUrl = Request.QueryString["ReturnUrl"] }))
            {
                @Html.AddUniqueFormId()
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                if (Model != null && Model.ReturnUrl != null && !Model.ReturnUrl.Contains("http"))
                {
                    @Html.HiddenFor(x => x.ReturnUrl)
                }
                <div class="card-with-form login-wrap section-container" id="LoginFormField">
                    <div class="input-field custom">
                        @Html.TextBoxFor(x => x.LoginName, new { @class = "validate", @autocomplete = "off", id = "LoginUserName", autocapitalize = "none" })
                        <label class="active" for="LoginUserName">@Html.Sitecore().Dictionary("/Accounts/Login/Enter User Name", "Username")</label>
                        @Html.ValidationMessageFor(x => x.LoginName, "", new { @class = "help-block" }, "p")
                    </div>
                    <div class="input-field custom input-has-icon">
                        @Html.PasswordFor(x => x.Password, new { @class = "validate", id = "LoginPassword", @autocomplete = "off" })
                        <label class="active" for="LoginPassword">@Html.Sitecore().Dictionary("/Accounts/Login/Password", "Password")</label>
                        <div class="input-icon">
                            <span class="icon-holder waves-effect waves-light show-pass">
                                <i class="vi-show-password"></i>
                                <i class="vi-hide-password"></i>
                            </span>
                        </div>
                        @Html.ValidationMessageFor(x => x.Password, "", new { @class = "help-block" }, "p")
                    </div>



                    <a class="forgot-pass"
                       data-gaevent="aeml_reset_password_initiate"
                       data-gaeventCategory="User Login"
                       data-gaeventAction="AEML Reset Password Initiate"
                       data-gaeventLabel="NA"
                       href="@Html.Sitecore().Dictionary("/Other Redirect URL/Login/Forgot Password URL", "/forgot-password")">
                        @Html.Sitecore().Dictionary("/Accounts/Login/Forgot Password", "Forgot Username / Password?")
                    </a>
                    <div class="input-field custom">
                        <div class="captcha_box">
                            <div class="form-group pt-md-2 @Html.ValidationErrorFor(x => x.Captcha, "has-error")">
                                <label for="" class="">@Html.Sitecore().Dictionary("/Common/Captcha", "Captcha") <span class="required">*</span></label>
                                <div class="row captcha_box" style="padding-left:10px;">
                                    <div class="col-lg-12" LoginBtnSubmit>
                                        <div class="g-recaptcha" data-callback="recaptchaCallback" data-sitekey="6LdYFWgUAAAAALdZf_sC8BRN2uLPzcsxb2p192rf"></div>
                                        @Html.ValidationMessageFor(x => x.Captcha, "", new { @class = "help-block" }, "p")
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>




                    <div class="h-right btn-group">
                        <button type="submit" class="waves-effect btn btn-continue login-btn full"
                                @*data-gaevent="aeml_login_success"
                                data-gaeventCategory="User Login"
                                data-gaeventAction="AEML Login Success"
                                data-gaeventLabel="Success"*@
                                id="LoginBtnSubmit">
                            @Html.Sitecore().Dictionary("/Accounts/Login/Login", "Login")
                        </button>
                    </div>
                </div>
            }
            <div class="bordered-items section-container">
                <ul>
                    @if (Request.QueryString["afterpayment"] != null && Request.QueryString["afterpayment"] == "1")
                    {
                        <li>
                            @Html.Raw(Html.Sitecore().Dictionary("/Accounts/Login/AfterPaymentMessage", "Log in to access all the services, or continue with <a href='/' class='bold'>Quick Bill Payment</a> without logging in"))
                        </li>
                    }
                    <li>
                        @Html.Sitecore().Dictionary("/Accounts/Login/Not Yet Signed Up", "Not Yet Signed Up?")
                        <a href="@Html.Sitecore().Dictionary("/Other Redirect URL/Login/Registration URL", "/registration-validate-otp")" class="bold">
                            @Html.Sitecore().Dictionary("/Accounts/Login/Button/Register Now", "Register Now")
                        </a>
                    </li>
                    <li>
                        @Html.Sitecore().Dictionary("/Common/Need some help", "Need some help?")
                        <a href="javascript:void(0)" onclick="OpenElektra();"
                           data-gaevent="chat_now_cta_click"
                           data-gaeventCategory="CTA Click"
                           data-gaeventAction="Chat Now CTA Click"
                           data-gaeventLabel="NA"
                           class="bold">@Html.Sitecore().Dictionary("/Common/Chat Now", "Chat Now")</a> @Html.Sitecore().Dictionary("/Common/or call", "or call")
                        <span class="ff-rb">@Html.Sitecore().Dictionary("/Common/PhoneNo", "19122")</span>
                    </li>
                </ul>
            </div>
        </div>
        @Html.Sitecore().Placeholder("divBenefitsContent")
    </div>
    <script src="@Html.Sitecore().Dictionary("/Common/CaptchaURL", "https://www.google.com/recaptcha/api.js")"></script>
}
<script type="text/javascript">
    $(document).keypress(function (event) {
        var keycode = (event.keyCode ? event.keyCode : event.which);
        if (keycode == '13') {
            $('#LoginBtnSubmit').click();
        }
    });




</script>