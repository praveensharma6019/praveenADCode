@using Sitecore.Foundation.Dictionary.Extensions
@using Sitecore.Foundation.SitecoreExtensions.Extensions
@using Sitecore.Mvc.Configuration
@using Sitecore.Feature.Accounts.SessionHelper
@using CaptchaMvc;
@using Sitecore.Feature.Accounts
@using CaptchaMvc.HtmlHelpers;
@model Sitecore.Feature.Accounts.Models.ChangeOfNameApplicationFromModel
@{
    var item2 = Sitecore.Context.Database.GetItem(Templates.LECPortal.LECPortalHomePage);
    var lecPortalHomePage = item2.Url();
}

@if (!string.IsNullOrEmpty(ViewBag.Message))
{
    <div class="form-group row">
        <input id="message" type="hidden" value="@ViewBag.Message" />
    </div>
}
<link href="/styles/Electricity/bootstrap.min.css" rel="stylesheet" />
<link href="/styles/ElectricityNew/adani-electricity.css" rel="stylesheet" />
<link href="/styles/Electricity/adani-electricity-responsive.css" rel="stylesheet" />



<!-- Page Content -->
<div class="pageContent">
    <div class="container">
        @using (Html.BeginForm("LogoutLEC", "AEMLChangeOfName", FormMethod.Post))
        {
            <div class="row">
                <div class="col-sm-6 pb-3 text-left">
                    <p><span><b>Welcome, </b></span><b class="txt-orange">@UserSession.AEMLCONLECUserSessionContext.LECName <span class="fa fa-user ml-2 mr-1"></span></b></p>
                </div>
                <div class="col-sm-6 pb-3">
                    <div class="text-right">
                        <button class="btn btn-primary" type="submit">
                            @Html.Sitecore().Dictionary("Electricity/Tender/Logout", "Logout")
                        </button>
                    </div>
                    <div class="clearfix"></div>
                </div>
            </div>
        }
        @using (Html.BeginRouteForm(MvcSettings.SitecoreRouteName, FormMethod.Post, new { id = "frmCONApplication", @class = "form-signin", enctype = "multipart/form-data" }))
        {
            @Html.AddUniqueFormId()
            <!-- Welcome Message-->
            <div class="row">
                <div class="col-12">
                    <p class="">Please fill in the required information in the application form below to apply for Change of Name on the Bill on behalf of consumer.</p>
                    <div class="clearfix"></div>
                </div>
            </div>
            <!-- /Welcome Message -->
            <div class="py-2"></div>
            <!-- Section -->
            <!-- Main Content Panel -->

            <div class="" id="mainContent">
                <!-- Update Profile Page Content-->
                <div class="panel sectiom-wrapper">
                    @*<form class="changeofname">*@
                    @Html.HiddenFor(m => m.Aklasse)
                    @Html.HiddenFor(m => m.IsLEC)
                    @if (Model.IsLEC)
                    {
                        <h2 class="txt-md txt-orange mb-3"><b>LEC Details:</b></h2>
                        <div class="row mb-3">
                            <div class="col-lg-6 col-md-6">
                                <div class="form-group">
                                    <label for=""><b>Registration Number</b></label>
                                    @Html.TextBoxFor(x => x.LECRegistrationNumber, new { @class = "form-control", @readonly = "readonly" })
                                </div>
                            </div>
                            <div class="col-lg-6 col-md-6">
                                <div class="form-group">
                                    <label for=""><b>Mobile Number</b></label>
                                    @Html.TextBoxFor(x => x.LECMobileNumber, new { @class = "form-control", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                    }
                    <h2 class="txt-md txt-orange mb-3"><b>Existing Account Details:</b></h2>
                    <div class="row mb-3">
                        <div class="col-lg-6 col-md-6">
                            <div class="form-group">
                                <label for=""><b>Account Number</b></label>
                                @Html.TextBoxFor(x => x.AccountNo, new
                                {
                                    @class = "form-control",
                                    @readonly = "readonly"
    })
                            </div>
                        </div>
                        <div class="col-lg-6 col-md-6">
                            <div class="form-group">
                                <label for=""><b>Meter Number</b></label>
                                @*<input type="text" class="form-control" id="" placeholder="7654432" disabled>*@
                                @Html.TextBoxFor(x => x.MeterNumber, new
                                {
                                    @class = "form-control"@*, required = "required"*@,
@readonly = "readonly"
})
                            </div>
                        </div>
                        <div class="col-lg-6 col-md-6">
                            <div class="form-group">
                                <label for=""><b>Connection Type</b></label>
                                @*<input type="text" class="form-control" id="" placeholder="RESI1" disabled>*@
                                @Html.TextBoxFor(x => x.ConnectionType, new
                                {
                                    @class = "form-control"@*, required = "required"*@,
@readonly = "readonly"
})
                            </div>
                        </div>
                        <div class="col-lg-6 col-md-6">
                            <div class="form-group">
                                <label for=""><b>Registered Customer Name</b></label>
                                @*<input type="text" class="form-control" id="" placeholder="Mr. Pravin Prakash Bhosale" disabled>*@
                                @Html.TextBoxFor(x => x.ConsumerName, new
                                {
                                    @class = "form-control"@*, required = "required"*@,
@readonly = "readonly"
})
                            </div>
                        </div>
                        <div class="col-lg-6 col-md-6">
                            <div class="form-group">
                                <label for=""><b>Mobile Number</b></label>
                                @*<input type="text" class="form-control" id="" placeholder="9460826482" disabled>*@
                                @Html.TextBoxFor(x => x.ExistingMobileNumber, new
                                {
                                    @class = "form-control"@*, required = "required"*@,
@readonly = "readonly"
})
                            </div>
                        </div>
                        <div class="col-lg-6 col-md-6">
                            <div class="form-group">
                                <label for=""><b>Email Address</b></label>
                                @*<input type="text" class="form-control" id="" placeholder="9460826482" disabled>*@
                                @Html.TextBoxFor(x => x.ExistingEmailId, new
                                {
                                    @class = "form-control"@*, required = "required"*@,
@readonly = "readonly"
})
                            </div>
                        </div>

                    </div>
                    <h2 class="txt-md txt-orange mb-3"><b>Step 1: Select Premise Type</b></h2>
                    <div class="form-group mb-0">
                        <div class="row">
                            <div class="col-lg-3">
                                <label for=""><b>Select Applicable Premise Type</b></label>
                            </div>
                            <div class="col-lg-4" id="premise-type">
                                @Html.DropDownListFor(m => m.SelectedPremiseType, new SelectList(Model.PremiseTypeSelectList, "Value", "Text", Model.SelectedPremiseType), "Select", new { @class = "form-control", id = "ddlPremiseType", required = "required" })
                            </div>
                            <div class="col-lg-5 text-lg-right text-left mt-3 mt-lg-0">
                                @*<a class="btn btn-primary txt-sm modal-trigger" href="#generalguideline">GENERAL GUIDELINES</a>*@
                                <button type="button" class="btn btn-primary txt-sm" data-toggle="modal" data-target="#generalguideline">GENERAL GUIDELINES</button>
                                <a href="#generalguideline" class="btn btn-primary d-none" target="_blank" style="color: #fff;" data-toggle="modal" data-target="#generalguideline"><b>GENERAL GUIDELINES</b></a>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(m => m.SelectedPremiseType)
                    </div>

                    @if (Model.SelectedPremiseType != null)
                    {
                        <div class="" id="divStep2">
                            <hr class="my-4">
                            <h2 class="txt-md txt-orange mb-3"><b>Step 2: Enter Details of the Changes being requested</b></h2>
                            <div class="changeofname_fieldsblock my-3 d-block">
                                <fieldset class="px-3">
                                    <legend>Applicant Details</legend>
                                    <div class="form-group">
                                        <label class="w-100"><b>Applicant Type :</b></label>
                                        @if (Model.SelectedPremiseType == "009")
                                        {
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.ApplicantType, "1", new { id = "ApplicantTypeIndividual", @class = "form-check-input rbApplicantType", @checked = "checked" })
                                                <label class="form-check-label" for="ApplicantTypeIndividual">Individual</label>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.ApplicantType, "1", new { id = "ApplicantTypeIndividual", @class = "form-check-input rbApplicantType" })
                                                <label class="form-check-label" for="ApplicantTypeIndividual">Individual</label>
                                            </div>
                                        }

                                        @if (Model.SelectedPremiseType != "009")
                                        {
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.ApplicantType, "3", new { id = "ApplicantTypeJointOccupancy", @class = "form-check-input rbApplicantType" })
                                                <label class="form-check-label" for="ApplicantTypeJointOccupancy">Joint Occupancy (Single Applicant)</label>
                                            </div>

                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.ApplicantType, "2", new { id = "ApplicantTypeJoint", @class = "form-check-input rbApplicantType" })
                                                <label class="form-check-label" for="ApplicantTypeJoint">Joint</label>
                                            </div>
                                        }
                                    </div>
                                    @if (Model.SelectedPremiseType != "009" && Model.SelectedPremiseType != "028" && Model.SelectedPremiseType != "034" && Model.SelectedPremiseType != "036")
                                    {
                                        <div class="form-group">
                                            <label class="w-100"><b>Is the registered customer still living?</b></label>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.IsStillLiving, "Yes", new { id = "ApplicantLivingYes", @class = "form-check-input rbIsStillLiving" })
                                                <label class="form-check-label" for="ApplicantLivingYes">Yes</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.IsStillLiving, "No", new { id = "ApplicantLivingNo", @class = "form-check-input rbIsStillLiving" })
                                                <label class="form-check-label" for="ApplicantLivingNo">No</label>
                                            </div>
                                            @Html.ValidationMessageFor(x => x.IsStillLiving, "", new { @class = "help-block" }, "p")
                                        </div>
                                    }
                                    <div class="">
                                        <label class="w-100"><b>Name:</b></label>
                                        <div class="row">
                                            @if (Model.ApplicantType == "2")
                                            {
                                                <div class="col-lg-3 col-md-6 jointName">
                                                    <div class="form-group">
                                                        <label for=""><b>Full Name (Applicant 1)<span class="required">*</span></b></label>
                                                        @Html.TextBoxFor(x => x.Name1Joint, new
                                                   {
                                                       @class = "form-control txt-caps",
                                                       required = "required"
                                                   })
                                                        @Html.ValidationMessageFor(x => x.Name1Joint, "", new { @class = "help-block" }, "p")
                                                    </div>
                                                </div>
                                                <div class="col-lg-3 col-md-6 jointName">
                                                    <div class="form-group">
                                                        <label for=""><b>Full Name (Applicant 2)<span class="required">*</span></b></label>
                                                        @Html.TextBoxFor(x => x.Name2Joint, new
                                                   {
                                                       @class = "form-control txt-caps",
                                                       required = "required"
                                                   })
                                                        @Html.ValidationMessageFor(x => x.Name2Joint, "", new { @class = "help-block" }, "p")
                                                    </div>
                                                </div>
                                            }
                                            else if (Model.SelectedTitle == "0006")
                                            {
                                                <div class="col-lg-3 col-md-6 IndividualName">
                                                    <div class="form-group">
                                                        <label><b>Title <span class="required">*</span></b></label>
                                                        @Html.DropDownListFor(m => m.SelectedTitle, new SelectList(Model.TitleSelectList, "Value", "Text", "0006"), "Select", new { @class = "form-control", id = "ddlTitle", required = "required" })
                                                    </div>
                                                    @Html.ValidationMessageFor(x => x.TitleSelectList)
                                                </div>
                                                <div class="col-lg-3 col-md-6 orgname">
                                                    <div class="form-group">
                                                        <label for=""><b>Name of Orgnization<span class="required">*</span></b></label>
                                                        @Html.TextBoxFor(x => x.OrganizationName, new
                                                   {
                                                       @class = "form-control txt-caps",
                                                       required = "required"
                                                   })
                                                        @Html.ValidationMessageFor(x => x.OrganizationName, "", new { @class = "help-block" }, "p")
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="col-lg-3 col-md-6 IndividualName">
                                                    <div class="form-group">
                                                        <label><b>Title <span class="required">*</span></b></label>
                                                        @Html.DropDownListFor(m => m.SelectedTitle, new SelectList(Model.TitleSelectList, "Value", "Text", Model.SelectedTitle), "Select", new { @class = "form-control", id = "ddlTitle", required = "required" })
                                                    </div>
                                                    @Html.ValidationMessageFor(x => x.TitleSelectList)
                                                </div>
                                                <div class="col-lg-3 col-md-6 IndividualName">
                                                    <div class="form-group">
                                                        <label for=""><b>First Name <span class="required">*</span></b></label>
                                                        @Html.TextBoxFor(x => x.FirstName, new
                                                   {
                                                       @class = "form-control txt-caps",
                                                       required = "required"
                                                   })
                                                        @Html.ValidationMessageFor(x => x.FirstName, "", new { @class = "help-block" }, "p")
                                                    </div>
                                                </div>
                                                <div class="col-lg-3 col-md-6 IndividualName">
                                                    <div class="form-group">
                                                        <label for=""><b>Middle Name</b></label>
                                                        @Html.TextBoxFor(x => x.MiddleName, new
                                                   {
                                                       @class = "form-control txt-caps"
                                                   })
                                                        @Html.ValidationMessageFor(x => x.MiddleName, "", new { @class = "help-block" }, "p")
                                                    </div>
                                                </div>
                                                <div class="col-lg-3 col-md-6 IndividualName">
                                                    <div class="form-group">
                                                        <label for=""><b>Last Name <span class="required">*</span></b></label>
                                                        @Html.TextBoxFor(x => x.LastName, new
                                                   {
                                                       @class = "form-control txt-caps",
                                                       required = "required"
                                                   })
                                                        @Html.ValidationMessageFor(x => x.LastName, "", new { @class = "help-block" }, "p")
                                                    </div>
                                                </div>
                                            }

                                        </div>
                                    </div>
                                </fieldset>
                            </div>
                            @if (Model.SelectedPremiseType == "00026")  //to skip this step added 00
                            {
                                <div class="changeofname_fieldsblock my-3 026">
                                    <fieldset class="px-3">
                                        <legend>Address Details</legend>
                                        <div>
                                            <label class="radio-label mr-3"><b>Address Correction required</b></label>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.IsAddressCorrectionRequired, "No", new
                                           {
                                               id = "IsAddressCorrectionRequiredNo"@*, required = "required"*@,
@class = "form-check-input rbIsAddressCorrectionRequired"
})
                                                <label class="form-check-label" for="IsAddressCorrectionRequiredNo">No</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.IsAddressCorrectionRequired, "Yes", new
                                           {
                                               id = "IsAddressCorrectionRequiredYes"@*, required = "required"*@,
@class = "form-check-input rbIsAddressCorrectionRequired"
})
                                                <label class="form-check-label" for="IsAddressCorrectionRequiredYes">Yes</label>
                                            </div>
                                            @if (Model.IsAddressCorrectionRequired == "Yes")
                                            {
                                                <div class="">
                                                    <p class="txt-orange mb-2 mt-3"><b>Applicant's Present / Correspondence Address :</b></p>
                                                    <div class="row">
                                                        <div class="col-lg-2 col-md-6">
                                                            <div class="form-group">
                                                                <label for=""><b>House Number <span class="required">*</span></b></label>
                                                                @Html.TextBoxFor(x => x.HouseNumber, new
                                                           {
                                                               @class = "form-control txt-caps",
                                                               required = "required",
                                                           })
                                                                @Html.ValidationMessageFor(x => x.HouseNumber, "", new { @class = "help-block" }, "p")
                                                            </div>
                                                        </div>
                                                        <div class="col-lg-5 col-md-6">
                                                            <div class="form-group">
                                                                <label for=""><b>Street <span class="required">*</span></b></label>
                                                                @Html.TextBoxFor(x => x.Street, new
                                                           {
                                                               @class = "form-control txt-caps",
                                                               required = "required"
                                                           })
                                                                @Html.ValidationMessageFor(x => x.Street, "", new { @class = "help-block" }, "p")
                                                            </div>
                                                        </div>
                                                        <div class="col-lg-4 col-md-6">
                                                            <div class="form-group">
                                                                <label for=""><b>Landmark <span class="required">*</span></b></label>
                                                                @Html.TextBoxFor(x => x.Landmark, new
                                                           {
                                                               @class = "form-control txt-caps",
                                                               required = "required"
                                                           })
                                                                @Html.ValidationMessageFor(x => x.Landmark, "", new { @class = "help-block" }, "p")
                                                            </div>
                                                        </div>
                                                        <div class="col-lg-5 col-md-6">
                                                            <div class="form-group">
                                                                <label for=""><b>Area <span class="required">*</span></b></label>
                                                                @Html.TextBoxFor(x => x.Area, new
                                                           {
                                                               @class = "form-control txt-caps",
                                                               required = "required"
                                                           })
                                                                @Html.ValidationMessageFor(x => x.Area, "", new { @class = "help-block" }, "p")
                                                            </div>
                                                        </div>
                                                        <div class="col-lg-5 col-md-6">
                                                            <div class="form-group">
                                                                <label for=""><b>Suburb <span class="required">*</span></b></label>
                                                                @Html.DropDownListFor(m => m.SelectedSuburb, new SelectList(Model.SuburbSelectList, "Value", "Text"), "Select", new
                                                           {
                                                               @class = "form-control",
                                                               required = "required"
                                                           })
                                                                @Html.ValidationMessageFor(x => x.SelectedSuburb, "", new { @class = "help-block", id = "ddlSelectedSuburb" }, "p")
                                                            </div>
                                                        </div>
                                                        <div class="col-lg-4 col-md-6">
                                                            <div class="form-group">
                                                                <label for=""><b>City <span class="required">*</span></b></label>
                                                                @Html.DropDownListFor(m => m.SelectedCity, new SelectList(Model.CitySelectList, "Value", "Text"), "Select", new
                                                           {
                                                               @class = "form-control",
                                                               required = "required"
                                                           })
                                                                @Html.ValidationMessageFor(x => x.SelectedCity, "", new { @class = "help-block", id = "ddlSelectedCity" }, "p")
                                                            </div>
                                                        </div>
                                                        <div class="col-lg-4 col-md-6">
                                                            <div class="form-group">
                                                                <label for=""><b>Pincode <span class="required">*</span></b></label>
                                                                @Html.DropDownListFor(m => m.SelectedPincode, new SelectList(Model.PincodeSelectList, "Value", "Text"), "Select", new
                                                           {
                                                               @class = "form-control",
                                                               required = "required"
                                                           })
                                                                @Html.ValidationMessageFor(x => x.SelectedPincode, "", new { @class = "help-block", id = "ddlSelectedPincode" }, "p")
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>

                                    </fieldset>
                                </div>
                            }
                            <div class="changeofname_fieldsblock my-3 d-block">
                                <fieldset class="px-3">
                                    <legend>Contact Details</legend>
                                    <div class="row">
                                        <div class="col-lg-6 col-md-6 form-group">
                                            <p class="txt-sm">Please enter the "Mobile No" and "E-mail ID" of the customer.</p>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-lg-4 col-md-6">
                                            <div class="form-group">
                                                <label for=""><b>Email</b></label>
                                                @Html.TextBoxFor(x => x.EmailId, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(x => x.EmailId, "", new { @class = "help-block" }, "p")
                                            </div>
                                        </div>
                                        <div class="col-lg-4 col-md-6">
                                            <div class="form-group">
                                                <label for=""><b>Landline Number</b></label>
                                                @Html.TextBoxFor(x => x.Landline, new
                                           {
                                               @class = "form-control"@*, required = "required"*@})
                                                @Html.ValidationMessageFor(x => x.Landline, "", new { @class = "help-block" }, "p")
                                            </div>
                                        </div>
                                        @if (Model.IsLEC)
                                        {
                                            <div class="col-lg-4 col-md-6">
                                                <div class="form-group">
                                                    <label for=""><b>Mobile Number <span class="required">*</span></b></label>
                                                    @Html.TextBoxFor(x => x.MobileNo, new { @class = "form-control", required = "required" })
                                                    @Html.ValidationMessageFor(x => x.MobileNo, "", new { @class = "help-block" }, "p")
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="col-lg-4 col-md-6">
                                                <div class="form-group">
                                                    <label for=""><b>Mobile Number <span class="required">*</span></b></label>
                                                    @Html.TextBoxFor(x => x.MobileNo, new { @class = "form-control", required = "required", @readonly = "readonly" })
                                                    @Html.ValidationMessageFor(x => x.MobileNo, "", new { @class = "help-block" }, "p")
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </fieldset>
                            </div>
                            <div class="changeofname_fieldsblock my-3 d-block">
                                <fieldset class="px-3">
                                    <legend>Billing Details</legend>
                                    <div class="row">
                                        <div class="col-lg-4 col-md-6">
                                            <div class="form-group">
                                                <label><b>Bill Language <span class="required">*</span></b></label>
                                                @Html.DropDownListFor(m => m.SelectedBillLanguage, new SelectList(Model.BillLanguageSelectList, "Value", "Text", Model.SelectedBillLanguage), "Select", new
                                           {
                                               @class = "form-control",
                                               required = "required"
                                           })
                                                @Html.ValidationMessageFor(x => x.SelectedBillLanguage, "", new { @class = "help-block" }, "p")
                                            </div>
                                        </div>
                                        <div class="col-lg-8">
                                            <div class="form-group">
                                                <label class="w-100"><b>Bill Format :</b></label>
                                                <div class="form-check form-check-inline">
                                                    @Html.RadioButtonFor(model => model.IsPaperlessBilling, "No", new
                                               {
                                                   id = "IsPaperlessNo"@*, required = "required"*@,
@class = "form-check-input"
})
                                                    <label class="form-check-label" for="IsPaperlessNo">E-Bill + Hard Copy of Bill</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    @Html.RadioButtonFor(model => model.IsPaperlessBilling, "Yes", new
                                               {
                                                   id = "IsPaperlessYes"@*, required = "required"*@,
@class = "form-check-input"
})
                                                    <label class="form-check-label" for="IsPaperlessYes">Paperless **</label>
                                                </div>
                                                <p class="txt-sm incentiveMsg">** Selection of "Paperless" bill option will attract an incentive of Rs. 10 on a monthly bill </p>

                                            </div>
                                        </div>


                                        @if (Model.SelectedPremiseType == "034")
                                        {
                                            <div class="col-lg-12">
                                                <p class="txt-orange mb-2 mt-3"><b>Landloard Details :</b></p>
                                                <div class="row">
                                                    <div class="col-lg-4 col-md-6">
                                                        <div class="form-group">
                                                            <label for=""><b>Name of Owner <span class="required">*</span></b></label>
                                                            @Html.TextBoxFor(x => x.LandlordName, new
                                                       {
                                                           @class = "form-control",
                                                           required = "required"
                                                       })
                                                            @Html.ValidationMessageFor(x => x.LandlordName, "", new { @class = "help-block" }, "p")
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-4 col-md-6">
                                                        <div class="form-group">
                                                            <label for=""><b>Mobile No <span class="required">*</span></b></label>
                                                            @Html.TextBoxFor(x => x.LandlordMobile, new
                                                       {
                                                           @class = "form-control",
                                                           required = "required"
                                                       })
                                                            @Html.ValidationMessageFor(x => x.LandlordMobile, "", new { @class = "help-block" }, "p")
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-4 col-md-6">
                                                        <div class="form-group">
                                                            <label for=""><b>Landline No </b></label>
                                                            @Html.TextBoxFor(x => x.LandlordLandline, new
                                                       {
                                                           @class = "form-control"
                                                       })
                                                            @Html.ValidationMessageFor(x => x.LandlordLandline, "", new { @class = "help-block" }, "p")
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-4 col-md-6">
                                                        <div class="form-group">
                                                            <label for=""><b>Email </b></label>
                                                            @Html.TextBoxFor(x => x.LandlordEmail, new
                                                       {
                                                           @class = "form-control"
                                                       })
                                                            @Html.ValidationMessageFor(x => x.LandlordEmail, "", new { @class = "help-block" }, "p")
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        <div class="col-lg-12">
                                            <div class="my-3">
                                                <label class="radio-label mr-3"><b>Do you wish to transfer the Security Deposit from the exisiting account?</b></label>
                                                <div class="form-check form-check-inline">
                                                    @Html.RadioButtonFor(model => model.IsContinueWithExistingSD, "No", new
                                               {
                                                   id = "IsContinueWithExistingSDNo"@*, required = "required"*@,
@class = "form-check-input rbIsContinueWithExistingSD"
})
                                                    <label class="form-check-label" for="IsContinueWithExistingSDNo">No</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    @Html.RadioButtonFor(model => model.IsContinueWithExistingSD, "Yes", new
                                               {
                                                   id = "IsContinueWithExistingSDYes"@*, required = "required"*@,
@class = "form-check-input rbIsContinueWithExistingSD"
})
                                                    <label class="form-check-label" for="IsContinueWithExistingSDYes">Yes</label>
                                                </div>
                                            </div>
                                        </div>
                                        @if (Model.IsContinueWithExistingSD == "Yes")
                                        {
                                            <div class="col-lg-12">
                                                <div class="row">
                                                    <div class="col-lg-12 mb-3">

                                                        <input type="hidden" value="@Model.ExistingSecurityDepositeAmount" id="hdnExistingSecurityDepositeAmount" />
                                                        <label class=""><b>Security Deposit Amount in the exisiting account is: Rs. @Model.ExistingSecurityDepositeAmount</b></label>
                                                    </div>
                                                    <div class="col-lg-6">
                                                        <div class="form-group">
                                                            <label><b>Security Deposit Amount <span class="required">*</span></b></label>
                                                            @Html.TextBoxFor(x => x.SecurityDepositeAmount, new
                                                       {
                                                           @class = "form-control",
                                                           required = "required"
                                                       })
                                                            @Html.ValidationMessageFor(x => x.SecurityDepositeAmount, "", new { @class = "help-block" }, "p")
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-12 mb-3">
                                                        <p class="txt-sm incentiveMsg">Please Note: The amount mentioned above shall be transferred & maintained as a “Security Deposit” in the new account, once the Change of Name request is processed. Additional security deposit, if applicable, shall be added in the 1st bill generated for the new account.</p>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="col-lg-12 mb-3">
                                                <p class="txt-sm incentiveMsg">Please Note: The security deposit payable for the new account shall be calculated once the processing of the “Change of Name” request is complete. The calculated amount shall be included in the 1st bill generated for the new account.</p>
                                            </div>
                                        }
                                    </div>
                                </fieldset>
                            </div>
                            <div class="row">
                                <div class="col-lg-12">
                                    <div class="form-group mb-0">
                                        <label for=""><b>Consumer Remark</b></label>
                                        @Html.TextAreaFor(x => x.ConsumerRemark, new
                                   {
                                       @class = "form-control"
                                   })
                                        @Html.ValidationMessageFor(x => x.ConsumerRemark, "", new { @class = "help-block" }, "p")
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="" id="divStep3">
                            <hr class="my-4">
                            <div class="form-group mb-0">
                                <div class="row">
                                    <div class="col-lg-6">
                                        <h2 class="txt-md txt-orange mb-0"><b>Step 3: Upload Documents</b></h2>
                                    </div>
                                    <div class="col-lg-6 text-lg-right text-left my-3 mt-lg-0">
                                        <button type="button" class="btn btn-primary txt-sm" data-toggle="modal" data-target="#docsupload">DOCUMENT UPLOAD GUIDELINES</button>
                                        <p class="mt-2"><i>All documents needs to be self-attested</i></p>
                                        <a href="#docsupload" class="btn btn-primary d-none" style="color: #fff;" target="_blank" data-toggle="modal" data-target="#docsupload"><b>DOCUMENT UPLOAD GUIDELINES</b></a>
                                    </div>
                                </div>
                            </div>
                            @{
                                var ExistingIDDocument = Model.GetExistingDocuments != null ? Model.GetExistingDocuments.Where(x => x.DocumentTypeCode.Trim() == "ID").ToList() : null;
                            }
                            @if (Model.IDDocumentsList.Count > 0 || Model.IDDocumentsListOnly1.Count > 0)
                            {
                                <h5>Identity Document</h5>
                                <div class="table-responsive my-3">
                                    <table class="table table-bordered mb-0 txt-sm">
                                        <thead class="bg-white">
                                            <tr>
                                                <th valign="middle" style="min-width: 80px;">Sr. No</th>
                                                <th valign="middle" style="min-width: 250px;">Document Type</th>
                                                <th valign="middle" style="min-width: 300px;"></th>
                                                <th valign="middle" style="min-width: 150px;">Document No.</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{var i1 = 1;
                                                if (Model.IDDocumentsList.Count > 0)
                                                {
                                                    foreach (var doc in Model.IDDocumentsList)
                                                    {
                                                        var IDDocument = ExistingIDDocument.Where(d => d.DocumentType == doc.DocType).FirstOrDefault();
                                                        var fileupload1 = "file_" + System.Convert.ToString(doc.DocType);
                                                        var downloadDoc = "download_ID";
                                                        var docname = "docnumber_" + System.Convert.ToString(doc.DocType);
                                                        if (doc.IsMandatory)
                                                        {
                                                            var mad = "mand_" + doc.DocType;
                                                            @Html.HiddenFor(m => doc.IsMandatory, new { id = mad })
                                                        }

                                                        var madname = "manddocname_" + System.Convert.ToString(doc.DocType);

                                                        @Html.HiddenFor(m => doc.DocName, new { id = madname })
                                                        <tr>
                                                            <td>@i1</td>
                                                            <td>
                                                                @doc.DocName @if (doc.IsMandatory)
                                                                {<span class="required">*</span>}
                                                            </td>
                                                            <td>
                                                                <div class="form-group mb-0">
                                                                    <input type="file" id="@fileupload1" onchange="ValidateFile(this);" name="@fileupload1" class="form-control cou" />
                                                                    @if (IDDocument != null)
                                                                    {
                                                                        <a class="txt-orange @fileupload1" href="@Url.Action("DownloadFile",new { id = IDDocument.Id })">
                                                                            <i class="fa fa-download mr-2"></i> Download Uploaded Document
                                                                        </a>
                                                                    }
                                                                </div>
                                                            </td>
                                                            <td>
                                                                <div class="form-group mb-0">
                                                                    @if (IDDocument != null && IDDocument.DocumentNumber != null)
                                                                    {
                                                                        <input type="text" class="form-control txt-caps" name="docnumber_ID" id="docnumber_ID" onkeyup="var start = this.selectionStart; var end = this.selectionEnd; this.value = this.value.toUpperCase(); this.setSelectionRange(start, end);" aria-describedby="" placeholder="" value="@IDDocument.DocumentNumber" disabled>
                                                                        @Html.ValidationMessageFor(x => x.docnumber_ID, "", new { @class = "help-block" }, "p")
                                                                    }
                                                                    else
                                                                    {
                                                                        <input type="text" class="form-control txt-caps" name="docnumber_ID" id="docnumber_ID" onkeyup="var start = this.selectionStart; var end = this.selectionEnd; this.value = this.value.toUpperCase(); this.setSelectionRange(start, end);" aria-describedby="" placeholder="">
                                                                        @Html.ValidationMessageFor(x => x.docnumber_ID, "", new { @class = "help-block" }, "p")
                                                                    }
                                                                </div>
                                                            </td>
                                                        </tr>
                                                        i1 = i1 + 1;
                                                    }
                                                }
                                                else if (Model.IDDocumentsListOnly1.Count > 0)
                                                {
                                                    var IDDocument = ExistingIDDocument == null ? null : ExistingIDDocument.FirstOrDefault();
                                                    foreach (var d in ExistingIDDocument)
                                                    {
                                                        if (Model.IDDocumentsListOnly1.Select(d1 => d1.DocType).Contains(d.DocumentType))
                                                        {
                                                            IDDocument = d;
                                                        }
                                                    }
                                                    var fileupload1 = "file_ID";
                                                    var downloadDoc = "download_ID";
                                                    var docname = "docnumber_ID";
                                                    <tr>
                                                        <td>
                                                            @i1
                                                            <input type="hidden" value="True" id="mand_ID" />
                                                            <input type="hidden" value="Any one Identity Document" id="manddocname_ID" />
                                                        </td>
                                                        <td>
                                                            <div class="row no-gutters">
                                                                <div class="col-10">
                                                                    @if (IDDocument != null)
                                                                    {
                                                                        if (Model.ApplicantType == "2")
                                                                        {
                                                                            @Html.DropDownListFor(m => m.SelectedIDDocumentOnly1, new SelectList(Model.IDDocumentsListOnly1, "DocSerialNumber", "DocName", IDDocument.DocumentChecklistSerialNumber), "Select for Applicant 1", new { @class = "form-control", id = "ddlID" })
                                                                        }
                                                                        else
                                                                        {
                                                                            @Html.DropDownListFor(m => m.SelectedIDDocumentOnly1, new SelectList(Model.IDDocumentsListOnly1, "DocSerialNumber", "DocName", IDDocument.DocumentChecklistSerialNumber), "Select", new { @class = "form-control", id = "ddlID" })

                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if (Model.ApplicantType == "2")
                                                                        {
                                                                            @Html.DropDownListFor(m => m.SelectedIDDocumentOnly1, new SelectList(Model.IDDocumentsListOnly1, "DocSerialNumber", "DocName"), "Select  for Applicant 1", new { @class = "form-control", id = "ddlID" })
                                                                        }
                                                                        else
                                                                        {
                                                                            @Html.DropDownListFor(m => m.SelectedIDDocumentOnly1, new SelectList(Model.IDDocumentsListOnly1, "DocSerialNumber", "DocName"), "Select", new { @class = "form-control", id = "ddlID" })

                                                                        }
                                                                    }
                                                                </div><div class="col-2">
                                                                    <span class="required ml-2">*</span>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <div class="form-group mb-0">
                                                                <input type="file" id="@fileupload1" name="@fileupload1" onchange="ValidateFile(this);" class="form-control cou" />
                                                                @if (IDDocument != null)
                                                                {
                                                                    <div class="d-block mt-2">
                                                                        <a class="txt-orange @fileupload1" href="@Url.Action("DownloadFile",new { id = IDDocument.Id })">
                                                                            <i class="fa fa-download mr-2"></i> Download Uploaded Document
                                                                        </a>
                                                                    </div>
                                                                }
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <div class="form-group mb-0">
                                                                @if (IDDocument != null)
                                                                {
                                                                    <input type="text" class="form-control txt-caps" name="@docname" id="@docname" onkeyup="var start = this.selectionStart; var end = this.selectionEnd; this.value = this.value.toUpperCase(); this.setSelectionRange(start, end);" aria-describedby="" placeholder="" value="@IDDocument.DocumentNumber" disabled>
                                                                    @Html.ValidationMessageFor(x => x.docnumber_ID, "", new { @class = "help-block" }, "p")
                                                                }
                                                                else
                                                                {
                                                                    <input type="text" class="form-control txt-caps" name="@docname" id="@docname" onkeyup="var start = this.selectionStart; var end = this.selectionEnd; this.value = this.value.toUpperCase(); this.setSelectionRange(start, end);" aria-describedby="" placeholder="">
                                                                    @Html.ValidationMessageFor(x => x.docnumber_ID, "", new { @class = "help-block" }, "p")
                                                                }
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    i1 = i1 + 1;
                                                }
                                                var ExistingID2Document = Model.GetExistingDocuments != null ? Model.GetExistingDocuments.Where(x => x.DocumentTypeCode.Trim() == "ID2").ToList() : null;

                                                if (Model.ID2DocumentsList.Count > 0)
                                                {
                                                    foreach (var doc in Model.ID2DocumentsList)
                                                    {
                                                        var ID2Document = ExistingID2Document.Where(d => d.DocumentType == doc.DocType).FirstOrDefault();
                                                        var fileupload1 = "file_" + System.Convert.ToString(doc.DocType);
                                                        var downloadDoc = "download_ID2";
                                                        var docname = "docnumber_" + System.Convert.ToString(doc.DocType);
                                                        if (doc.IsMandatory)
                                                        {
                                                            var mad = "mand_" + doc.DocType;
                                                            @Html.HiddenFor(m => doc.IsMandatory, new { id = mad })
                                                        }

                                                        var madname = "manddocname_" + System.Convert.ToString(doc.DocType);

                                                        @Html.HiddenFor(m => doc.DocName, new { id = madname })
                                                        <tr>
                                                            <td>
                                                                @i1
                                                            </td>
                                                            <td>
                                                                @doc.DocName @if (doc.IsMandatory)
                                                                {<span class="required">*</span>}
                                                            </td>
                                                            <td>
                                                                <div class="form-group mb-0">
                                                                    <input type="file" id="@fileupload1" name="@fileupload1" onchange="ValidateFile(this);" class="form-control cou" />
                                                                    @if (ID2Document != null)
                                                                    {
                                                                        <a class="txt-orange @fileupload1" href="@Url.Action("DownloadFile",new { id = ID2Document.Id })">
                                                                            <i class="fa fa-download mr-2"></i> Download Uploaded Document
                                                                        </a>
                                                                    }
                                                                </div>
                                                            </td>
                                                            <td>
                                                                <div class="form-group mb-0">
                                                                    @if (ID2Document != null)
                                                                    {
                                                                        <input type="text" class="form-control txt-caps" name="docnumber_ID2" id="docnumber_ID2" onkeyup="var start = this.selectionStart; var end = this.selectionEnd; this.value = this.value.toUpperCase(); this.setSelectionRange(start, end);" aria-describedby="" placeholder="" value="@ID2Document.DocumentNumber" disabled>
                                                                        @Html.ValidationMessageFor(x => x.docnumber_ID2, "", new { @class = "help-block" }, "p")
                                                                    }
                                                                    else
                                                                    {
                                                                        <input type="text" class="form-control txt-caps" name="docnumber_ID2" id="docnumber_ID2" onkeyup="var start = this.selectionStart; var end = this.selectionEnd; this.value = this.value.toUpperCase(); this.setSelectionRange(start, end);" aria-describedby="" placeholder="">
                                                                        @Html.ValidationMessageFor(x => x.docnumber_ID2, "", new { @class = "help-block" }, "p")
                                                                    }
                                                                </div>
                                                            </td>
                                                        </tr>
                                                        i1 = i1 + 1;
                                                    }
                                                }
                                                else if (Model.ID2DocumentsListOnly1.Count > 0)
                                                {
                                                    var ID2Document = ExistingID2Document.FirstOrDefault();
                                                    foreach (var d in ExistingID2Document)
                                                    {
                                                        if (Model.ID2DocumentsListOnly1.Select(d1 => d1.DocType).Contains(d.DocumentType))
                                                        {
                                                            ID2Document = d;
                                                        }
                                                    }
                                                    var fileupload1 = "file_ID2";
                                                    var downloadDoc = "download_ID2";
                                                    var docname = "docnumber_ID2";
                                                    <tr>
                                                        <td>
                                                            @i1
                                                            <input type="hidden" value="True" id="mand_ID2" />
                                                            <input type="hidden" value="Any one Identity Document of applicant 2" id="manddocname_ID2" />
                                                        <td>
                                                            <div class="row no-gutters">
                                                                <div class="col-10">
                                                                    @if (ID2Document != null)
                                                                    {
                                                                        @Html.DropDownListFor(m => m.SelectedID2DocumentOnly1, new SelectList(Model.ID2DocumentsListOnly1, "DocSerialNumber", "DocName", ID2Document.DocumentChecklistSerialNumber), "Select for Applicant 2", new { @class = "form-control", id = "ddlID2" })

                                                                    }
                                                                    else
                                                                    {
                                                                        @Html.DropDownListFor(m => m.SelectedID2DocumentOnly1, new SelectList(Model.ID2DocumentsListOnly1, "DocSerialNumber", "DocName"), "Select for Applicant 2", new { @class = "form-control", id = "ddlID2" })
                                                                    }
                                                                </div><div class="col-2">
                                                                    <span class="required ml-2">*</span>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <div class="form-group mb-0">
                                                                <input type="file" id="@fileupload1" name="@fileupload1" onchange="ValidateFile(this);" class="form-control cou" />
                                                                @if (ID2Document != null)
                                                                {
                                                                    <a class="txt-orange @fileupload1" href="@Url.Action("DownloadFile",new { id = ID2Document.Id })">
                                                                        <i class="fa fa-download mr-2"></i> Download Uploaded Document
                                                                    </a>
                                                                }
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <div class="form-group mb-0">
                                                                @if (ID2Document != null)
                                                                {
                                                                    <input type="text" class="form-control txt-caps" name="@docname" id="@docname" onkeyup="var start = this.selectionStart; var end = this.selectionEnd; this.value = this.value.toUpperCase(); this.setSelectionRange(start, end);" aria-describedby="" placeholder="" value="@ID2Document.DocumentNumber" disabled>
                                                                    @Html.ValidationMessageFor(x => x.docnumber_ID2, "", new { @class = "help-block" }, "p")
                                                                }
                                                                else
                                                                {
                                                                    <input type="text" class="form-control txt-caps" name="@docname" id="@docname" onkeyup="var start = this.selectionStart; var end = this.selectionEnd; this.value = this.value.toUpperCase(); this.setSelectionRange(start, end);" aria-describedby="" placeholder="">
                                                                    @Html.ValidationMessageFor(x => x.docnumber_ID2, "", new { @class = "help-block" }, "p")
                                                                }
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    i1 = i1 + 1;
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }

                            <h5 class="mt-4">Required Documents</h5>
                            <div class="table-responsive my-3">
                                <table class="table table-bordered mb-0 txt-sm">
                                    <thead class="bg-white">
                                        <tr>
                                            <th valign="middle" style="min-width: 80px;">Sr. No</th>
                                            <th valign="middle" style="min-width: 250px;">Document Type</th>
                                            <th valign="middle" style="min-width: 300px;"></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{var i = 1;
                                            var ExistingPHDocument = Model.GetExistingDocuments != null ? Model.GetExistingDocuments.Where(x => x.DocumentTypeCode.Trim() == "PH").ToList() : null;

                                            if (Model.PHDocumentsList.Count > 0)
                                            {
                                                foreach (var doc in Model.PHDocumentsList.OrderBy(d => d.DocName))
                                                {
                                                    var PHDocument = ExistingPHDocument.Where(d => d.DocumentType == doc.DocType && d.DocumentDescription == doc.DocName).FirstOrDefault();
                                                    var fileupload1 = "file_" + System.Convert.ToString(doc.DocType);
                                                    var downloadDoc = "download_PH";
                                                    if (doc.IsMandatory)
                                                    {
                                                        var mad = "mand_" + doc.DocType;
                                                        @Html.HiddenFor(m => doc.IsMandatory, new { id = mad })
                                                    }

                                                    var madname = "manddocname_" + System.Convert.ToString(doc.DocType);

                                                    @Html.HiddenFor(m => doc.DocName, new { id = madname })
                                                    <tr>
                                                        <td>
                                                            @i
                                                        </td>
                                                        <td>
                                                            @doc.DocName @if (doc.IsMandatory)
                                                            {<span class="required">*</span>}
                                                        </td>
                                                        <td>
                                                            <div class="form-group mb-0">
                                                                <input type="file" id="@fileupload1" name="@fileupload1" onchange="ValidatePHFile(this);" class="form-control cou" />
                                                                @if (PHDocument != null)
                                                                {
                                                                    <a class="txt-orange @fileupload1" href="@Url.Action("DownloadFile",new { id = PHDocument.Id })">
                                                                        <i class="fa fa-download mr-2"></i> Download Uploaded Document
                                                                    </a>
                                                                }
                                                            </div>
                                                        </td>

                                                    </tr>
                                                    i = i + 1;
                                                }
                                            }
                                            else if (Model.PHDocumentsListOnly1.Count > 0)
                                            {
                                                var PHDocument = ExistingPHDocument.FirstOrDefault();
                                                foreach (var d in ExistingPHDocument)
                                                {
                                                    if (Model.PHDocumentsListOnly1.Select(d1 => d1.DocType).Contains(d.DocumentType) && Model.PHDocumentsListOnly1.Select(d1 => d1.DocName).Contains(d.DocumentDescription))
                                                    {
                                                        PHDocument = d;
                                                    }
                                                }
                                                var fileupload1 = "file_PH";
                                                var downloadDoc = "download_PH";
                                                <tr>
                                                    <td>
                                                        @i
                                                        <input type="hidden" value="True" id="mand_PH" />
                                                        <input type="hidden" value="Photo" id="manddocname_PH" />
                                                    </td>
                                                    <td>

                                                        <div class="row no-gutters">
                                                            <div class="col-10">
                                                                @if (PHDocument != null)
                                                                {
                                                                    @Html.DropDownListFor(m => m.SelectedPHDocumentOnly1, new SelectList(Model.PHDocumentsListOnly1, "DocSerialNumber", "DocName", PHDocument.DocumentChecklistSerialNumber), "Select", new { @class = "form-control", id = "ddlPH" })
                                                                }
                                                                else
                                                                {
                                                                    @Html.DropDownListFor(m => m.SelectedPHDocumentOnly1, new SelectList(Model.PHDocumentsListOnly1, "DocSerialNumber", "DocName"), "Select", new { @class = "form-control", id = "ddlPH" })

                                                                }
                                                            </div><div class="col-2">
                                                                <span class="required ml-2">*</span>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="form-group mb-0">
                                                            <input type="file" id="@fileupload1" name="@fileupload1" onchange="ValidatePHFile(this);" class="form-control cou" />
                                                            @if (PHDocument != null)
                                                            {
                                                                <a class="txt-orange @fileupload1" href="@Url.Action("DownloadFile",new { id = PHDocument.Id })">
                                                                    <i class="fa fa-download mr-2"></i> Download Uploaded Document
                                                                </a>
                                                            }
                                                        </div>
                                                    </td>

                                                </tr>
                                                i = i + 1;
                                            }
                                            var ExistingODDocument = Model.GetExistingDocuments != null ? Model.GetExistingDocuments.Where(x => x.DocumentTypeCode.Trim() == "OD").ToList() : null;

                                            if (Model.ODDocumentsList.Count > 0)
                                            {
                                                foreach (var doc in Model.ODDocumentsList)
                                                {
                                                    var ODDocument = ExistingODDocument.Where(d => d.DocumentType == doc.DocType).FirstOrDefault();
                                                    var fileupload1 = "file_" + System.Convert.ToString(doc.DocType);
                                                    var downloadDoc = "download_OD";
                                                    if (doc.IsMandatory)
                                                    {
                                                        var mad = "mand_" + doc.DocType;
                                                        @Html.HiddenFor(m => doc.IsMandatory, new { id = mad })
                                                    }

                                                    var madname = "manddocname_" + System.Convert.ToString(doc.DocType);

                                                    @Html.HiddenFor(m => doc.DocName, new { id = madname })
                                                    <tr>
                                                        <td>@i</td>
                                                        <td>
                                                            @doc.DocName @if (doc.IsMandatory)
                                                            {<span class="required">*</span>}
                                                        </td>
                                                        <td>
                                                            <div class="form-group mb-0">
                                                                <input type="file" id="@fileupload1" name="@fileupload1" onchange="ValidateFile(this);" class="form-control cou" />
                                                                @if (ODDocument != null)
                                                                {
                                                                    <a class="txt-orange @fileupload1" href="@Url.Action("DownloadFile",new { id = ODDocument.Id })">
                                                                        <i class="fa fa-download mr-2"></i> Download Uploaded Document
                                                                    </a>
                                                                }
                                                            </div>
                                                        </td>

                                                    </tr>
                                                    i = i + 1;
                                                }
                                            }
                                            else if (Model.ODDocumentsListOnly1.Count > 0)
                                            {
                                                var ODDocument = ExistingODDocument.FirstOrDefault();
                                                foreach (var d in ExistingODDocument)
                                                {
                                                    if (Model.ODDocumentsListOnly1.Select(d1 => d1.DocType).Contains(d.DocumentType))
                                                    {
                                                        ODDocument = d;
                                                    }
                                                }
                                                var fileupload1 = "file_OD";
                                                var downloadDoc = "download_OD";
                                                <tr>
                                                    <td>
                                                        @i
                                                        <input type="hidden" value="True" id="mand_OD" />
                                                        <input type="hidden" value="Any one Ownership Document" id="manddocname_OD" />
                                                    </td>
                                                    <td>
                                                        <div class="row no-gutters">
                                                            <div class="col-10">
                                                                @if (ODDocument != null)
                                                                {
                                                                    @Html.DropDownListFor(m => m.SelectedODDocumentOnly1, new SelectList(Model.ODDocumentsListOnly1, "DocSerialNumber", "DocName", ODDocument.DocumentChecklistSerialNumber), "Select Ownership Document", new { @class = "form-control", id = "ddlOD" })

                                                                }
                                                                else
                                                                {
                                                                    @Html.DropDownListFor(m => m.SelectedODDocumentOnly1, new SelectList(Model.ODDocumentsListOnly1, "DocSerialNumber", "DocName"), "Select Ownership Document", new { @class = "form-control", id = "ddlOD" })

                                                                }
                                                            </div>
                                                            <div class="col-2">
                                                                <span class="required ml-2">*</span>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="form-group mb-0">
                                                            <input type="file" id="@fileupload1" name="@fileupload1" onchange="ValidateFile(this);" class="form-control cou" />
                                                            @if (ODDocument != null)
                                                            {
                                                                <a class="txt-orange @fileupload1" href="@Url.Action("DownloadFile",new { id = ODDocument.Id })">
                                                                    <i class="fa fa-download mr-2"></i> Download Uploaded Document
                                                                </a>
                                                            }
                                                        </div>
                                                    </td>

                                                </tr>
                                                i = i + 1;
                                            }
                                            var ExistingSDDocument = Model.GetExistingDocuments != null ? Model.GetExistingDocuments.Where(x => x.DocumentTypeCode.Trim() == "SD").ToList() : null;

                                            if (Model.SDDocumentsList.Count > 0)
                                            {
                                                foreach (var doc in Model.SDDocumentsList)
                                                {
                                                    var SDDocument = ExistingSDDocument.Where(d => d.DocumentType == doc.DocType).FirstOrDefault();
                                                    var fileupload1 = "file_" + System.Convert.ToString(doc.DocType);
                                                    var downloadDoc = "download_SD";
                                                    if (doc.IsMandatory)
                                                    {
                                                        var mad = "mand_" + doc.DocType;
                                                        @Html.HiddenFor(m => doc.IsMandatory, new { id = mad })
                                                    }

                                                    var madname = "manddocname_" + System.Convert.ToString(doc.DocType);

                                                    @Html.HiddenFor(m => doc.DocName, new { id = madname })
                                                    <tr>
                                                        <td>@i</td>
                                                        <td>
                                                            @doc.DocName @if (doc.IsMandatory)
                                                            {<span class="required">*</span>}
                                                        </td>
                                                        <td>
                                                            <div class="form-group mb-0">
                                                                <input type="file" id="@fileupload1" name="@fileupload1" onchange="ValidateFile(this);" class="form-control cou" />
                                                                @if (SDDocument != null)
                                                                {
                                                                    <a class="txt-orange @fileupload1" href="@Url.Action("DownloadFile",new { id = SDDocument.Id })">
                                                                        <i class="fa fa-download mr-2"></i> Download Uploaded Document
                                                                    </a>
                                                                }
                                                            </div>
                                                        </td>

                                                    </tr>
                                                    i = i + 1;
                                                }
                                            }
                                            else if (Model.SDDocumentsListOnly1.Count > 0)
                                            {
                                                var SDDocument = ExistingSDDocument.FirstOrDefault();
                                                foreach (var d in ExistingSDDocument)
                                                {
                                                    if (Model.SDDocumentsListOnly1.Select(d1 => d1.DocType).Contains(d.DocumentType))
                                                    {
                                                        SDDocument = d;
                                                    }
                                                }
                                                var fileupload1 = "file_SD";
                                                var downloadDoc = "download_SD";
                                                <tr>
                                                    <td>
                                                        @i
                                                        <input type="hidden" value="True" id="mand_SD" />
                                                        <input type="hidden" value="Any one Supporting Document" id="manddocname_SD" />
                                                    </td>
                                                    <td>
                                                        <div class="row no-gutters">
                                                            <div class="col-10">
                                                                @if (SDDocument != null)
                                                                {
                                                                    @Html.DropDownListFor(m => m.SelectedSDDocumentOnly1, new SelectList(Model.SDDocumentsListOnly1, "DocSerialNumber", "DocName", SDDocument.DocumentChecklistSerialNumber), "Select Supporting Document", new { @class = "form-control", id = "ddlSD" })
                                                                }
                                                                else
                                                                {
                                                                    @Html.DropDownListFor(m => m.SelectedSDDocumentOnly1, new SelectList(Model.SDDocumentsListOnly1, "DocSerialNumber", "DocName"), "Select Supporting Document", new { @class = "form-control", id = "ddlSD" })
                                                                }
                                                            </div>
                                                            <div class="col-2">
                                                                <span class="required ml-2">*</span>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="form-group mb-0">
                                                            <input type="file" id="@fileupload1" name="@fileupload1" onchange="ValidateFile(this);" class="form-control cou" />
                                                            @if (SDDocument != null)
                                                            {
                                                                <a class="txt-orange @fileupload1" href="@Url.Action("DownloadFile",new { id = SDDocument.Id })">
                                                                    <i class="fa fa-download mr-2"></i> Download Uploaded Document
                                                                </a>
                                                            }
                                                        </div>
                                                    </td>

                                                </tr>
                                                i = i + 1;
                                            }
                                            var ExistingOTDocument = Model.GetExistingDocuments != null ? Model.GetExistingDocuments.Where(x => x.DocumentTypeCode.Trim() == "OT" || x.DocumentTypeCode.Trim() == "").ToList() : null;

                                            if (Model.OTDocumentsList.Count > 0)
                                            {
                                                foreach (var doc in Model.OTDocumentsList)
                                                {
                                                    var OTDocument = ExistingOTDocument.Where(d => d.DocumentType == doc.DocType).FirstOrDefault();
                                                    var fileupload1 = "file_" + System.Convert.ToString(doc.DocType);
                                                    var downloadDoc = "download_OT";
                                                    if (doc.IsMandatory)
                                                    {
                                                        var mad = "mand_" + doc.DocType;
                                                        @Html.HiddenFor(m => doc.IsMandatory, new { id = mad })
                                                    }

                                                    var madname = "manddocname_" + System.Convert.ToString(doc.DocType);

                                                    @Html.HiddenFor(m => doc.DocName, new { id = madname })
                                                    <tr>
                                                        <td>@i</td>
                                                        <td>
                                                            @doc.DocName @if (doc.IsMandatory)
                                                            {<span class="required">*</span>}
                                                        </td>
                                                        <td>
                                                            <div class="form-group mb-0">
                                                                <input type="file" id="@fileupload1" onchange="ValidateFile(this);" name="@fileupload1" class="form-control cou" />
                                                                @if (OTDocument != null)
                                                                {
                                                                    <a class="txt-orange @fileupload1" href="@Url.Action("DownloadFile",new { id = OTDocument.Id })">
                                                                        <i class="fa fa-download mr-2"></i> Download Uploaded Document
                                                                    </a>
                                                                }
                                                            </div>
                                                        </td>

                                                    </tr>
                                                    i = i + 1;
                                                }
                                            }
                                            else if (Model.OTDocumentsListOnly1.Count > 0)
                                            {
                                                var OTDocument = ExistingOTDocument.FirstOrDefault();
                                                foreach (var d in ExistingOTDocument)
                                                {
                                                    if (Model.OTDocumentsListOnly1.Select(d1 => d1.DocType).Contains(d.DocumentType))
                                                    {
                                                        OTDocument = d;
                                                    }
                                                }
                                                var fileupload1 = "file_OT";
                                                var downloadDoc = "download_OT";
                                                <tr>
                                                    <td>
                                                        @i
                                                        <input type="hidden" value="True" id="mand_OT" />
                                                        <input type="hidden" value="Any one Statutory / Legal Requirement Document" id="manddocname_OT" />
                                                    </td>
                                                    <td>
                                                        <div class="row no-gutters">
                                                            <div class="col-10">
                                                                @if (OTDocument != null)
                                                                {
                                                                    @Html.DropDownListFor(m => m.SelectedOTDocumentOnly1, new SelectList(Model.OTDocumentsListOnly1, "DocSerialNumber", "DocName", OTDocument.DocumentChecklistSerialNumber), "Select Other Statutory / Legal Requirement", new { @class = "form-control", id = "ddlOT" })
                                                                }
                                                                else
                                                                {
                                                                    @Html.DropDownListFor(m => m.SelectedOTDocumentOnly1, new SelectList(Model.OTDocumentsListOnly1, "DocSerialNumber", "DocName"), "Select Other Statutory / Legal Requirement", new { @class = "form-control", id = "ddlOT" })
                                                                }
                                                            </div>
                                                            <div class="col-2">
                                                                <span class="required ml-2">*</span>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="form-group mb-0">
                                                            <input type="file" id="@fileupload1" name="@fileupload1" onchange="ValidateFile(this);" class="form-control cou" />
                                                            @if (OTDocument != null)
                                                            {
                                                                <a class="txt-orange @fileupload1" href="@Url.Action("DownloadFile",new { id = OTDocument.Id })">
                                                                    <i class="fa fa-download mr-2"></i> Download Uploaded Document
                                                                </a>
                                                            }
                                                        </div>
                                                    </td>

                                                </tr>
                                                i = i + 1;
                                            }

                                        }
                                    </tbody>
                                </table>
                            </div>

                            <div class="form-group">
                                <p class="txt-orange" id="docErrorMessage"></p>
                            </div>
                            <p class="mb-3"><b>Terms & Conditions:</b></p>
                            <div class="form-check">
                                <input type="checkbox" name="termsCb" class="form-check-input" id="termsCb">
                                <label class="form-check-label" for="termsCb">I agree to the terms and conditions</label>
                            </div>
                            <div class="form-check">
                                <input type="checkbox" name="confirmCb" class="form-check-input" id="confirmCb">
                                <label class="form-check-label" for="confirmCb">I confirm that copies of uploaded documents are self-attested</label>
                            </div>
                            <a href="#termsandconditions" class="pl-4 mt-3 txt-orange" data-toggle="modal" data-target="#termsandconditions" style="text-decoration: underline;font-size: 13px;">Read terms and conditions</a>

                            <div class="form-group py-2 text-right mb-0">
                                <input type="submit" class="btn btn-secondary mb-2 mb-md-0" name="SaveAsDraft" value="Save as Draft" />
                                <input type="submit" class="btn btn-primary mb-2 mb-md-0" name="SubmitApplication" id="SubmitApplication" value="Submit Application" />
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.MobileNo)

                    }
                </div>
            </div>
        }
    </div>
    <div class="container section-left-wrapper">
        <div class="text-right section-wrapper"><a href="@lecPortalHomePage" class="goBack"><i class="fas fa-arrow-left txt-orange"></i>&nbsp;&nbsp;Go back</a></div>
    </div>
</div>
<!-- /Main Content Panel -->
@*</div>*@
<!-- /Section -->
<!-- /Page Content -->

<div id="loader-wrapper" style="display:none">
    <div id="loader"></div>
    <div class="loader-content" style="text-align:center;"><p><b>Your request is being processed. Please do not press the “Back” or “Refresh” button.</b></p></div>
    <div class="loader-section section-left"></div>
    <div class="loader-section section-right"></div>
</div>

<!--<div id="confirmation_modal" class="modal fade show modal-popup" role="dialog" style="display: none; padding-right: 17px;" data-id="">
    <div class="modal-dialog modal-dialog-centered">-->
<!-- Modal content-->
<!--<div class="modal-content">
            <div class="modal-header">
                <p>Message</p>
                <button type="button" class="close reset" data-dismiss="modal">X</button>
            </div>
            <div class="modal-body">
                <p class="confirmation_modal_message"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary confirmation_modalbtnYesNO" value="1">Proceed</button>
                <button type="button" class="btn btn-primary confirmation_modalbtnYesNO" value="0">Cancel</button>
            </div>
        </div>
    </div>
</div>-->

<div class="modal-wrapper-custom">
    <div class="modal modal-alert" id="confirmation_modal">
        <div class="modal-content">
            <p class="confirmation_modal_message"></p>
        </div>
        <button type="button" class="waves-effect waves-light btn confirmation_modalbtnYesNO" value="1">Proceed</button>
        <button type="button" class="btn modal-close waves-effect waves-light outlined" value="0">Cancel</button>
    </div>
</div>

<!--<div id="message_modal" class="modal fade show" role="dialog" style="display: none; padding-right: 17px;" data-id="">
    <div class="modal-dialog modal-dialog-centered">-->
        <!-- Modal content-->
        <!--<div class="modal-content">
            <div class="modal-header">
                <p>Message</p>
                <button type="button" class="close" data-dismiss="modal">X</button>
            </div>
            <div class="modal-body">
              
                {
                    <div class="form-group row">
                        <label for="" class="col-sm-12 col-form-label txt-green"></label>
                    </div>
                }
            </div>
            <button type="button" style="padding-bottom:10px;" class="close" data-dismiss="modal">Ok</button>
        </div>

    </div>
</div>-->

<div class="modal-wrapper-custom">
    <div class="modal modal-alert" id="message_modal">
        <div class="modal-content">
            @if (!string.IsNullOrEmpty(ViewBag.Message))
            {
                <p>@ViewBag.Message</p>
            }
        </div>
        <button type="button" style="padding-bottom:10px;" class="btn modal-close waves-effect waves-light outlined">Ok</button>
    </div>
</div>

<!-- Modal -->
<div class="modal fade modal-popup" id="generalguideline" tabindex="-1" role="dialog" aria-labelledby="generalguideline" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h5>GENERAL GUIDELINES</h5>
                <div class="modal-popup__content">
                    <p class="mb-3">Application for change of name is processed as per the provision of Maharashtra Electricity Regulatory Commission (Electricity Supply Code and Other Conditions of Supply) Regulations, 2005.</p>
                    <ul class="pl-4 txt-sm">
                        <li style="
    list-style-type: upper-alpha;
">
                            <p class="mb-2"><b>Who can apply:</b></p>
                            <p class="mb-2">A connection may be transferred in the name of another person upon application for change of name by the new owner or occupier, in case of:</p>
                            <ul class="pl-4 mb-3">
                                <li class="mb-2" style="
    list-style-type: disc;
">Death of the registered consumer OR</li>
                                <li class="mb-2" style="
    list-style-type: disc;
">Transfer of ownership or occupancy of the premises,</li>
                            </ul>
                        </li>
                        <li style="
    list-style-type: upper-alpha;
">
                            <p class="mb-2"><b>General Requirements:</b></p>
                            <ul class="pl-4 mb-3">
                                <li class="mb-2" style="
    list-style-type: upper-roman;
">A<b>processing fee of Rs. 70/-(+GST)</b>(for single or three phase meters) and Security Deposit (Equivalent to a bill amount for avg. consumption over the last 12 months) is payable and will be added in the 1st bill generated post processing of the “Change of Name request”</li>
                                <li class="mb-2" style="
    list-style-type: upper-roman;
">For<b>transfer of existing Security Deposit</b>to the new account of applicant, the applicant must produce the receipt or No objection letter from the transferor.</li>
                                <li class="mb-2" style="
    list-style-type: upper-roman;
">
                                    Application for change of name shall NOT be processed for:
                                    <ul class="pl-4 mt-2">
                                        <li class="mb-2" style="
    list-style-type: lower-alpha;
">A disconnected connection.</li>
                                        <li class="mb-2" style="
    list-style-type: lower-alpha;
">A connection which has an overdue payment</li>
                                        <li class="mb-2" style="
    list-style-type: lower-alpha;
">An account for which the latest bill has been generated on the basis of estimated consumption or the latest bill is amended.</li>
                                        <li class="mb-2" style="
    list-style-type: lower-alpha;
">An account against which if any electricity theft charges have been levelled or the matter is under investigation</li>
                                    </ul>
                                </li>
                                <li class="mb-2" style="
    list-style-type: upper-roman;
">Adani Electricity Mumbai Ltd. reserves its right to reject the application in case of insufficient / incomplete documentation and non-fulfilment of formalities.</li>
                                <li class="mb-2" style="
    list-style-type: upper-roman;
">On successful processing of change of name, existing contract account will be terminated, and new contract account will be generated for new name.</li>
                            </ul>
                        </li>
                        <li style="
    list-style-type: upper-alpha;
">
                            <p class="mb-2"><b>Processing of Request:</b></p>
                            <ul class="pl-4">
                                <li class="mb-2" style="list-style-type: upper-roman;">On submission of the change of name request, you shall receive an SMS communicating a temporary registration no. This number can be used for future reference.</li>
                                <li class="mb-2" style="list-style-type: upper-roman;">Once the request has been approved &amp; successfully processed, you shall receive a soft copy of the “Welcome Letter” on your registered e-mail ID.</li>
                                <li class="mb-2" style="list-style-type: upper-roman;">The request should be processed within 4 working days, from the date of submission of the request.</li>
                                <li class="mb-2" style="list-style-type: upper-roman;">For any support required, pertaining to the submitted request, you can write to <a href="mailto:Helpdes.Mumbaielectricity@adani.com" class="txt-orange">Helpdes.Mumbaielectricity@adani.com</a> or call the toll-free helpline on 19122.</li>
                            </ul>
                        </li>
                    </ul>

                </div>

            </div>
        </div>
    </div>
</div>


<!-- Modal -->
<div class="modal fade modal-popup" id="docsupload" tabindex="-1" role="dialog" aria-labelledby="docsupload" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h5>DOCUMENT UPLOAD GUIDELINES</h5>
                <div class="modal-popup__content">
                    <ul class="pl-4 txt-sm">
                        <li class="mb-2" style="list-style-type: upper-roman;">On selection of the applicable “Premise Type”, the required documents shall be displayed, that need to be uploaded.</li>
                        <li class="mb-2" style="list-style-type: upper-roman;">Document marked with “*” are mandatory to Upload.</li>
                        <li class="mb-2" style="list-style-type: upper-roman;"><b>Only PDF, JPG format</b> files are supported for upload and applicable file size limit for each file is 2 MB.</li>
                        <li class="mb-2" style="list-style-type: upper-roman;">All documents uploaded by the applicant <b>must be self-attested.</b></li>
                        <li class="mb-2" style="list-style-type: upper-roman;">Against the relevant document type uploadec in the “<b>Identity Document</b>” section, kindly enter the correct document number. For eg: If the document uploaded is a “PAN Card”, then your PAN Card no. will be the document number that needs to be entered. <b>Please ensure correctness of this entry, as this number is updated against the respective Adani Electricity account no. in the system.</b></li>
                        <li class="mb-2" style="list-style-type: upper-roman;">Signature of the applicant on the submitted documents should match with that on the uploaded photo ID.</li>
                        <li class="mb-2" style="list-style-type: upper-roman;">
                            While uploading the <b>registered agreement copy</b>, the applicant must ensure that it includes:
                            <ul class="pl-4 mb-3 mt-2">
                                <li class="mb-2" style="list-style-type: lower-alpha;">Pages of agreement reflecting buyer and seller’s name</li>
                                <li class="mb-2" style="list-style-type: lower-alpha;">Page of agreement reflecting address of premises</li>
                                <li class="mb-2" style="list-style-type: lower-alpha;">Page of agreement reflecting signature/photos and photo ID of buyer and Seller</li>
                                <li class="mb-2" style="list-style-type: lower-alpha;">Copy of index II</li>
                            </ul>
                        </li>
                        <li class="mb-2" style="list-style-type: upper-roman;">In case the property transfer agreement is not with the present registered customer, <b>chain of agreements</b> from the registered customer to the current applicant must be uploaded.</li>
                        <li class="mb-2" style="list-style-type: upper-roman;">In case of <b>joint ownership (multiple applicants)</b>, applicant should produce NOC from Co- owner/s</li>
                        <li class="mb-2" style="list-style-type: upper-roman;">In case of <b>Joint Occupancy (single applicant)</b>, for Single Applicant's Name to appear on Bill, the Co-Owner's NOC is mandatory.</li>
                        <li class="mb-2" style="list-style-type: upper-roman;">The details of name and address in all the supporting documents must be same.</li>
                        <li class="mb-2">In case of <b>unregistered societies</b>, NOC’s from builder / developer must be on the original letterheads duly stamped and signed.</li>
                        <li class="mb-2" style="list-style-type: upper-roman;">In case the <b>tariff category is other than residential category</b>, the Applicants must submit necessary valid licenses / permission / NOC / compliances from the competent authorities.</li>
                        <li class="mb-2" style="list-style-type: upper-roman;">Applicant is solely and exclusively responsible for the genuineness and correctness of the document/s submitted by him in support of the application and the other documents as indicated at various points herein.</li>
                        <li class="mb-2" style="list-style-type: upper-roman;">In case, any such documents are found to be fraudulent and /or fake and/or forged and/or incorrect and /or invalid/incomplete, then the applicant/consumer shall be solely and exclusively responsible for the criminal proceedings and/or any court proceedings initiated and/or any dispute which arises any time in future and AEML and/or its successors, assignees and/or any employee thereof, shall not be responsible for the same in any manner whatsoever. In such a case, Adani Electricity Mumbai Limited reserves the right to disconnect the connection granted and in case of Change of Name, re-transfer connection in the name of previous registered consumer under this declaration cum undertaking, without any notice.</li>
                    </ul>
                </div>
            </div>

        </div>
    </div>
</div>



<!-- Modal -->
<div class="modal fade modal-popup" id="termsandconditions" tabindex="-1" role="dialog" aria-labelledby="termsandconditions" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h5>Terms and Conditions</h5>
                <div class="modal-popup__content">
                    <p class="mb-3">I /we agree to the abide with the Terms and Conditions mentioned herein below and which are in accordance with provisions of The Electricity Act 2003 hereinafter referred as ‘the Act’ and Maharashtra Electricity Regulatory Commission (Electricity Supply Code and Other Conditions of Supply) Regulations, 2005, hereinafter referred as “the Supply Code’’ and undertake as under:</p>
                    <ul class="txt-sm" style="
">
                        <li class="mb-2">1.That the Applicant/Consumer is not a minor.</li>
                        <li class="mb-2"> 2. That in case the applicant is not the sole owner of the premises, no objection certificate has been obtained from the co-owner.</li>
                        <li class="mb-2">3. To abide by the provisions of the Electricity Act, 2003, all applicable laws, conditions of Supply/Tariff Orders and any other Rules or Regulations as may be notified by the Commission/Authority, as applicable from time to time.</li>
                        <li class="mb-2"> 4. That AEML shall be at liberty to adjust the electricity consumption charges due/outstanding along with any other charges against the Consumer Security Deposit paid by the Applicant upon permanent disconnection of supply.</li>
                        <li class="mb-2"> 5. To indemnify AEML against all proceedings, claims, demands, costs, damages, expenses that AEML may incur by reason of a fresh electricity connection given to the Applicant.</li>
                        <li class="mb-2">6. That to the best of applicant’s knowledge, all electrical works done within the premises are as per Central Electricity Authority (Measures relating to Safety and Electricity Supply) Regulations, 2010 as amended from time to time.</li>
                        <li class="mb-2">7. That the internal wiring at the premises has been tested by a Licensed Electrical Contractor having valid license issued by Licensing Authority, Government of Maharashtra and the test certificate is available with the Applicant and can be produced as may be required at any later stage.</li>
                        <li class="mb-2">
                            8. That the Premises/building/structure has been constructed as per prevalent building Bye- Laws and the total height of the Premises/building/structure-
                            <ul>

                                <li>(i) does not exceed 15 (fifteen) metres on the date of seeking electricity connection, or</li>
                                <li>(ii) is more than 15 (fifteen) metres and has obtained valid Clearance certificate from appropriate government authority, which is available with the Applicant.</li>
                            </ul>
                        </li>
                        <li class="mb-2">9. That there is a provision of lift in the Premises and the Applicant has obtained the valid lift fitness certificate from the Electrical Inspector for the lift in the said Premises and the same is available with the Applicant and can be produced as may be required at any later stage.</li>
                        <li class="mb-2">10. That the Applicant would let the Distribution Licensee disconnect the electric connection under reference, in the event of any default, non-compliance of statutory provisions and in the event of a legally binding directive by Statutory Authority(ies) to effect such an order. This shall be without prejudice to any other rights of the licensee including that of getting its payment as on the date of disconnection.</li>
                        <li class="mb-2">11. That if the premises applied for is falling under CRZ, Forest area or any other area where any Court of Law/Statutory Authority has prohibited release of power supply, the Applicant shall submit a No Objection Certificate (NoC) to seek electricity connection, from such Authority.</li>
                        <li class="mb-2">12. That the applicant is solely and exclusively responsible for the genuineness and correctness of the document/s submitted by him in support of the application and the other documents as indicated at various points herein. In case any such documents are found to be fraudulent and /or fake and/or forged and/or incorrect and /or invalid/incomplete, then the applicant/consumer shall be solely and exclusively responsible for the criminal proceedings and/or any court proceedings initiated and/or any dispute which arises any time in future and AEML and/or its successors, assignees and/or any employee thereof, shall not be responsible for the same in any manner whatsoever. In such a case, AEML reserves the right to disconnect the connection granted and in case of Change of Name, re-transfer connection in the name of previous registered consumer under this declaration cum undertaking, without any notice.</li>
                        <li class="mb-2">13. That all details mentioned in the application form are correct and all applicable customer-end obligations (E.g. Documentary and Payment compliance, Site readiness, Way-Leave permits) are complete and complied in all respects, at the time of applying for new electricity connection, through online/offline mode. In case any of these requirements are not ready, or in case of an objection, AEML reserves the right to cancel the application.</li>
                        <li class="mb-2">14. That the Applicant will provide a copy of any of above applicable documents to the Distribution Licensee pursuant to the request from any external Government agency, judicial forum or any other authority empowered under statute seeking such information.</li>
                        <li class="mb-2">15. That Applicant’s industry/trade has not been declared to be releasing obnoxious hazardous/pollutant by any Government agency and that no orders of any court or judicial authority would be breached by running of Applicant’s industry/trade or granting any electricity connection to the same. The Applicant shall indemnify and keep indemnified AEML against any loss of any nature on this accou/nt.</li>
                        <li class="mb-2">16. The Applicant further agrees to indemnify and hold harmless, AEML and/or its successors and/or its employees, in case of any injury or incident on account of any fault in electrical works in the Premises and from point of supply to the Premises. AEML shall not be held responsible/liable for any mishap or incident occurring at the Premises or from point of supply to the Premises on account of any faulty/defective/inferior quality wiring/installation, right from the time of energizing the new electricity connection. On occurrence of such incident, AEML may disconnect the Applicant’s supply, if continuance of supply to such installation is threat to the life or property. Such disconnected supply shall be reconnected only after rectification of faulty installation and submission of test report from Licensed Electrical Contractor.</li>
                        <li class="mb-2">17. The applicant further agrees to bear the expenses towards repairing/ replacement of AEML’s assets or works, in case there is sufficient proof that the damage/ fault has been occurred due to faulty electrical work/ wiring in his premises.</li>
                        <li class="mb-2">18. To pay the electricity consumption bills and all other charges, at the rates set out in the licensee’s Tariff Schedule and the MERC approved Schedule of Charges, as may be in force from time to time, regularly, as and when the same becomes due for payment.</li>
                        <li class="mb-2">19. To deposit the additional security deposit (as applicable) from time to time, based on the prevailing Orders/rules, directions and Regulations of the Commission.</li>
                        <li class="mb-2">
                            20. For GSTIN :In compliance of Rule 49 of CGST Rules, 2017, I/We shall forthwith submit with AEML my/our Goods and Service Tax Identification Number or Unique Identity No. a Bill of supply (monthly electricity bill ) shall print Goods and Services Tax Identification Number or Unique Identity Number, if registered, of the consumer

                            <p class="my-2">For PAN :</p>
                            <ul>
                                <li>i.) As per Rule 114B of Income Tax Rules 1962 every person is required to quote his PAN in all documents pertaining to the transaction of sale or purchase of any nature for a value exceeding Rs. 2 lacs per transaction for the purpose of clause (c) of sub-section (5) of Section 139A</li>
                                <li>ii.) As per section - 206AA of Income-tax Act, 1961, TDS (if applicable)@@ on Security Deposit Interest will be deducted instead of 10% for non-availability of valid PAN</li>
                            </ul>
                        </li>
                        <li class="mb-2">21. Applicable only for applied Industrial/Commercial load between 100 and 150 kW: The Applicant authorizes AEML to debit the approved connection charges and applicable security deposit in first electricity bill (as and when enabled by AEML), and undertake to pay the same within the due date. The Applicant / Consumer may opt to pay such Security Deposit by way of a Bank Guarantee.</li>
                        <li class="mb-2">22. That the Applicant shall not hold AEML liable for delay in providing connection or meeting any Standards of Performance subsequent to grant of connection in case AEML is prevented from doing so on account of any force majeure events/exemptions as specified in the Standards of Performance Regulations, as amended from time to time.</li>
                        <li class="mb-2">23. That there are no arrears towards energy or related charges outstanding in his/her name and /or on account of the said premises. In the event of aforesaid declaration/undertaking given by the applicant/ consumer is found false in view of any pre-existing liability, the applicant/consumer shall willfully, without demur pay such amount on demand. The Consumer/applicant shall be duty bound to extend full co-operation to AEML while determining and/or identifying the arrears, if any, of the premises or account no, within a period of 60 days. The applicant/consumer shall make payment of the said arrears immediately on demand.</li>
                        <li class="mb-2">24. The Applicant/Consumer shall identify suitable space agreeable to AEML to install electrical meter and related devices and ensure un-hindered passage to personnel of AEML to access the meter cabin.</li>
                        <li class="mb-2">
                            25. That the following terms and conditions are complied with respect to space for meter installation:
                            <ul>
                                <li>
                                    a. Metering installation is protected from excessive dust and moisture, exposure to direct sunlight, rain and water seepage and vermin. The Applicant/Consumer shall ensure that temperature within the meter room shall not be more than 10°C, above ambient. It should not be in proximity of machineries, heating devices, equipment generating high vibration or magnetic fields and areas prone to fire and toxic hazards.
                                </li>
                                <li>
                                    b. Meters are not located at an elevated area or a depressed area that does not have access by means of a stairway of normal rise. The meters shall not be installed below/in the stair case or in common passage or lobby.
                                </li>
                                <li>c. Board wiring is carried out preferably on Fire retardant plywood, complying IS 5509. In case of non availability of FR plywood, marine plywood complying IS 710 can be used. The plywood shall be of 19 mm thickness and the same shall be provided by an applicant. Typically plywood is available in following sizes (7’x4’ , 7’x3’, 8’x3’, 8’x4’ ).IS mark is printed on the center of either face of the ply for identification.</li>
                            </ul>
                        </li>
                        <li class="mb-2">
                            26. That the following terms and conditions shall be complied with, for applicant/consumer’s installation beyond the point of supply of AEML:
                            <ul>
                                <li>a. The Applicant/Consumer must install appropriately rate MCB with enclosure near the start of the electricity supply and shall not install DP Switch.</li>
                                <li>b. The Applicant/Consumer, if having voltage exceeding 250 Volts, shall provide his own earthing system for installation.</li>
                                c. The Applicant/Consumer, if having sanctioned load above 2 KW, shall install Earth Leakage protective device
                            </ul>
                        </li>
                        <li class="mb-2">
                            27. The applicant/consumer shall provide way leave in favour of AEML:
                            <ul>
                                <li>i.) to lay its cables through his/owner’s land/ property</li>
                                <li>ii.) to access AEML’s equipment and work in its premises in accordance with the applicable provisions of Supply Code or any other Regulations, as prevailing from time to time</li>
                                <li>iii.) to provide permanent Right of Way to AEML personnel along with vehicles and cables and/or apparatus, without any further consent (for now and in future)</li>
                                <li>iv.) for laying, strengthening and maintaining of electrical network and system</li>
                            </ul>
                        </li>
                        <li class="mb-2">28. That the excavated trenches shall be reinstated by the Applicant/Consumer at his/her own cost when the cable is laid to provide supply to their premises. AEML shall be responsible to reinstate in the event the works is carried out to provide supply to any other customer.</li>
                        <li class="mb-2">29. That AEML shall have full rights to optimally utilize its assets (Substation/ pillars) in applicant/consumer’s premises and shall not object to laying outgoing feeders (LT/ HT) from their premises as the same arrangement is for making interconnection with outside network which shall further help in arranging alternate supply in case of break down on mains.</li>
                        <li class="mb-2">
                            30. Additional Term and Conditions for Change-over applications:
                            <ul>
                                <li>a. The consumer/applicant shall clear all it's dues with existing distribution licensee and submit the proof.</li>
                                <li>b. Changeover is permissible to existing consumer where name and purpose or classification of category for which the electricity has been provided by previous distribution licensee remains same.</li>
                                <li>c. The meter reading for final billing shall be taken jointly and signed off by both distribution licensees in presence of the applicant/ it's representative.</li>
                                <li>d. In the event the consumer/applicant is not present at the time of final meter reading, the readings taken jointly by the previous distribution licensee and AEML shall be final and binding upon the applicant / consumer. The Final meter reading shall be the opening meter reading for AEML.</li>
                            </ul>
                        </li>
                    </ul><p class="mb-3">I/We declare and undertake that I/we have complied with all statutory requirements under all Statutes for the time being in force.</p>
                    <p class="mb-3">I/we shall be solely responsible for any issue arising out of any such non-compliance and further I/we do hereby jointly and severally Indemnify AEML, its agents and servants against all claims, proceedings, demands, costs, expenses and consequences whatsoever, which may arise on account of processing my/our application.</p>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="/scripts/Electricity/jquery-slim.min.js"></script>
<script src="/scripts/Electricity/jquery.min.js"></script>
<script src="/scripts/Electricity/popper.min.js"></script>
<script src="/scripts/Electricity/bootstrap.min.js"></script>
<script src="/scripts/Electricity/owl.carousel.min.js"></script>
@*<script src="/scripts/Electricity/adani-ele-custom.js"></script>*@
<script src="/scripts/accounts/moment.min.js"></script>
<script src="/scripts/accounts/bootstrap-datetimepicker.min.js"></script>
<script src="/scripts/Electricity/Datatablemin.js"></script>
<script src="/scripts/Electricity/hygieneheader.js"></script>
<script src="/scripts/Accounts/ChangeOfNameOnBill.js"></script>
