@using Sitecore.Foundation.Dictionary.Extensions
@using Sitecore.Foundation.SitecoreExtensions.Extensions
@using Sitecore.Mvc.Configuration
@using Sitecore.Feature.Accounts
@using Sitecore.Feature.Accounts.SessionHelper
@using CaptchaMvc;
@using CaptchaMvc.HtmlHelpers;
@model Sitecore.Feature.Accounts.Models.TrackComplaintModel
@{

    var item2 = Sitecore.Context.Database.GetItem(Templates.ComplaintPortal.ComplaintPortalHomePage);
    var complaintPortalHomePage = item2.Url();

    var ComplaintPortalFileCGRFComplaintPage = (Sitecore.Context.Database.GetItem(Templates.ComplaintPortal.ComplaintPortalAdminFileCGRFComplaintPage)).Url();
    var ComplaintPortalReportsPage = (Sitecore.Context.Database.GetItem(Templates.ComplaintPortal.ComplaintPortalAdminReportsPage)).Url();
}

@if (Session["Message"] != null && !string.IsNullOrEmpty(Session["Message"].ToString()))
{
    <div class="form-group row">
        <input id="message" type="hidden" value="@Session["Message"].ToString()" />
    </div>
}
<section class="py-5" style="margin-top: -2rem;">
    <div class="container">
        @using (Html.BeginForm("Logout", "Accounts", FormMethod.Post))
        {
            <div class="row">
                <div class="col-sm-8 pb-3 text-left">
                    <p><span><b>Welcome, </b></span><b class="txt-orange">@UserSession.AEMLComplaintUserSessionContext.LoginName <span class="fa fa-user ml-2 mr-1"></span></b></p>
                </div>
                <div class="col-sm-4 pb-3">
                    <div class="text-right">
                        <button class="btn btn-primary" type="submit">
                            @Html.Sitecore().Dictionary("/ComplaintRegistration/Logout", "Logout")
                        </button>
                    </div>
                    <div class="clearfix"></div>
                </div>
            </div>
        }
        <hr />
        @using (Html.BeginRouteForm(MvcSettings.SitecoreRouteName, FormMethod.Post, new { @class = "form-signin", id = "filterByStatusForm", name = "filterByStatusForm" }))
        {
            <div class="row">
                <div class="col-lg-12 mr-auto mt-2">
                    @{
                        var info = Session.GetAndRemove("UpdateMessage") as Sitecore.Foundation.Alerts.Models.InfoMessage;
                        if (info != null)
                        {
                            Html.RenderPartial(Sitecore.Foundation.Alerts.Constants.InfoMessageView, info);
                        }
                    }
                </div>
            </div>
            <div class="row" style="padding: 0rem 0rem;">
                @Html.AddUniqueFormId()
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                <div class="panel w-100" style="margin-top: 2rem !important;">
                    <h3 class="mb-2 txt-orange txt-md">Change date range and get complaints:</h3>
                    <div class="row w-100">
                        <div class="col-md-6 col-lg-4">
                            <div class="form-group no-gutters">
                                <label for="inputID1" class="form-label mb-2">
                                    @Html.Sitecore().Dictionary("/ComplaintRegistration/StartDate", "Start Date")
                                </label>
                                <div class="w-100">
                                    @Html.TextBoxFor(x => x.StartDate, new { @class = "form-control reset-control", id = "datetimepickerComplaintStartDate", required = "required" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 col-lg-4">
                            <div class="form-group no-gutters">
                                <label for="inputID1" class="form-label mb-2">
                                    @Html.Sitecore().Dictionary("/ComplaintRegistration/EndDate", "End Date")
                                </label>
                                <div class="w-100">
                                    @Html.TextBoxFor(x => x.EndDate, new { @class = "form-control reset-control", id = "datetimepickerComplaintEndDate", required = "required" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 col-lg-4">
                            <div class="form-group no-gutters">
                                <label for="inputID1" class="form-label mb-2">
                                    @Html.Sitecore().Dictionary("/ComplaintRegistration/Zone", "Zone")
                                </label>
                                <div class="w-100">
                                    @Html.DropDownListFor(m => m.ZoneName, Model.Zones, "--Select--", new { @class = "form-control" })
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-12 text-right mb-3">
                            <input type="submit" name="GetApplications" value="Get Applications" class="btn btn-primary mt-2">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <label class="mr-2"><b>Total Number of Complaints:</b></label>
                            <span class="icon_round">@Model.ComplaintList.Count()</span>
                        </div>
                        <div class="col-md-4">
                            <label class="mr-2"><b>Escalated to Level 1:</b></label>
                            <span class="icon_round">@Model.ComplaintList.Where(c => !string.IsNullOrEmpty(c.Level1ComplaintNumber)).Count()</span>
                        </div>
                        <div class="col-md-4">
                            <label class="mr-2"><b>Escalated to Level 2:</b></label>
                            <span class="icon_round">@Model.ComplaintList.Where(c => !string.IsNullOrEmpty(c.EscalatedToCGRF)).Count()</span>
                        </div>
                    </div>
                </div>
                <div class="w-100">

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="mr-2">Escalated to:</label>
                            @Html.DropDownList("Status", new List<SelectListItem>
                                                                   {
                                                                      new SelectListItem{ Text="All", Value = "" ,Selected = true},
                                                                      new SelectListItem{ Text="Level 1", Value = "1" },
                                                                      new SelectListItem{ Text="Level 2", Value = "2" } },
                         new { @onchange = "onChnageFun(this.value)", @class = "form-control w-auto d-inline-block" })
                        </div>
                        <div class="col-md-6 text-right">
                            <input class="form-control w-auto d-inline-block mr-2" id="searchCONStatusApp" type="text" placeholder="Search..">
                            @*@Html.ActionLink("Export", "ComplaitExport", new { }, new { @class = "btn btn-secondary cexport" })*@
                        </div>
                    </div>
                    <div class="table-responsive mb-4" style="max-height:400px;">
                        <table class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>Sr. No</th>
                                    <th>Zone</th>
                                    <th>Division</th>
                                    <th>Complaint No</th>
                                    <th>Account No</th>
                                    <th>Consumer Name</th>
                                    <th>Mobile No</th>
                                    <th>Activity Type</th>
                                    <th>Complaint Category</th>
                                    <th>Complaint Sub Category</th>
                                    <th>Complaint Description</th>
                                    <th>Created Date</th>
                                    <th>Completion date</th>
                                    <th>TAT date</th>
                                    <th>TAT Left Days</th>
                                    <th>TAT Passed Days</th>
                                    <th>OrangeRedGreen</th>
                                    <th>Status</th>
                                    <th>Level 1</th>
                                    <th>Level 2</th>
                                </tr>
                            </thead>
                            <tbody id="CONApps">
                                @{
                                    var count = 1;
                                    foreach (var app in Model.ComplaintList)
                                    {
                                        DateTime createdDate = DateTime.Parse(app.CreatedDate.ToString());
                                        var createdDate1 = createdDate.ToString("dd.MM.yyyy");

                                        var tatDate1 = "-";
                                        if (app.TATDate != null)
                                        {
                                            DateTime tatDate = DateTime.Parse(app.TATDate.ToString());
                                            tatDate1 = tatDate.ToString("dd.MM.yyyy");
                                        }

                                        var completionDate1 = "-";
                                        if (app.CompletionDate != null && app.CompletionDate != "0000-00-00")
                                        {
                                            DateTime completionDate = DateTime.ParseExact(app.CompletionDate.ToString(), "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture);
                                            completionDate1 = completionDate.ToString("dd.MM.yyyy");
                                        }
                                        string category = "";
                                        string subcategory = "";
                                        switch (app.ComplaintSubCategory)
                                        {
                                            case "M40":
                                                category = "New connection";
                                                subcategory = "New connection";
                                                break;
                                            case "M50":
                                                category = "Wrong Disconnection";
                                                subcategory = "Wrong Disconnection";
                                                break;
                                            case "M51":
                                                category = "Reconnection not don";
                                                subcategory = "Reconnection not don";
                                                break;
                                            case "M06":
                                                category = "Billing Complaint";
                                                subcategory = "Wrong tariff plan";
                                                break;
                                            case "I15":
                                                category = "Billing Complaint";
                                                subcategory = "Wrong Reading";
                                                break;
                                            case "M03":
                                                category = "Billing Complaint";
                                                subcategory = "Wrong Payment";
                                                break;
                                            case "M04":
                                                category = "Billing Complaint";
                                                subcategory = "Payment not credited";
                                                break;
                                            case "M14":
                                                category = "Billing Complaint";
                                                subcategory = "Bill Not Received";
                                                break;
                                            case "M24":
                                                category = "Others";
                                                subcategory = "Others";
                                                break;
                                            case "M52":
                                                category = "Billing Complaint";
                                                subcategory = "High consumption complaint";
                                                break;
                                            case "I01":
                                                category = "Billing Complaint";
                                                subcategory = "High consumption complaint";
                                                break;
                                            default:
                                                category = app.ComplaintCategory;
                                                subcategory = app.ComplaintSubCategory;
                                                break;
                                        }

                                        <tr>
                                            <td>@count</td>
                                            <td>@app.ComplaintZone</td>
                                            <td>@app.Division</td>
                                            <td>@app.ComplaintRegistrationNumber</td>
                                            <td>@app.AccountNumber</td>
                                            <td>@app.ConsumerName</td>
                                            <td>@app.MobileNumber</td>
                                            <td>@app.PMActivityType</td>
                                            <td>@category</td>
                                            <td>@subcategory</td>
                                            <td>
                                                @if (app.ComplaintDescription.Length > 50)
                                                {
                                                    <p>@app.ComplaintDescription.Substring(0, 50)...</p>
                                                }
                                                else
                                                {
                                                    <p>@app.ComplaintDescription</p>
                                                }
                                            </td>
                                            <td>@createdDate1</td>
                                            <td>@completionDate1</td>
                                            <td>@tatDate1</td>
                                            <td>@app.TATLeftDays</td>
                                            <td>@app.TATPassedDays</td>
                                            <td>@app.OrangeRedGreen</td>
                                            <td>@app.ComplaintStatusName</td>
                                            <td>@app.Level1ComplaintNumber</td>
                                            <td>@app.EscalatedToCGRF</td>
                                        </tr>
                                        count++;
                                    }

                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            if (UserSession.AEMLComplaintUserSessionContext.IsAdmin && UserSession.AEMLComplaintUserSessionContext.AdminRole.ToLower().ToString() == "icrsadmin")
            {
                <div class="row">
                    <div class="col-lg-12 mr-auto mt-2 text-right">
                        @*<input type="submit" name="ExportReport" value="Export Report" class="btn btn-secondary">*@
                        @Html.ActionLink("Export Complaints", "ExportICRSComplaints", new { }, new { @class = "btn btn-secondary icrscexport" })
                    </div>
                </div>
            }
        }
    </div>
</section>

<div id="message_modal" class="modal fade show" role="dialog" style="display: none; padding-right: 17px;" data-id="">
    <div class="modal-dialog modal-dialog-centered">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <p>Message</p>
                <button type="button" class="close" data-dismiss="modal">X</button>
            </div>
            <div class="modal-body">
                @if (Session["Message"] != null && !string.IsNullOrEmpty(Session["Message"].ToString()))
                {
                    <div class="form-group row">
                        <label for="" class="col-sm-12 col-form-label txt-green">@Session["Message"].ToString()</label>
                        @*@if (Session["AlertMessage"] != null && !string.IsNullOrEmpty(Session["AlertMessage"].ToString()))
                            {
                                <p class="col-sm-12 col-form-label txt-orange">@Session["AlertMessage"].ToString()</p>
                            }*@
                    </div>
                    Session["Message"] = null;
                    Session["AlertMessage"] = null;
                }
            </div>
            <button type="button" style="padding-bottom:10px;" class="close" data-dismiss="modal">Ok</button>
        </div>

    </div>
</div>

<script type="text/javascript">
    function onChnageFun() {
        document.filterByStatusForm.submit();
    }
</script>
