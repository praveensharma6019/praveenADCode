
namespace Sitecore.Feature.Accounts.Controllers
{
    extern alias itextsharp;
    using itextsharp::iTextSharp.text;
    using itextsharp::iTextSharp.text.pdf;
    using CaptchaMvc.HtmlHelpers;
    using DotNetIntegrationKit;

    using Newtonsoft.Json;
    using paytm;
    using RestSharp;
    using SapPiService.Domain;
    using Sitecore.Data;
    using Sitecore.Data.Fields;
    using Sitecore.Data.Items;
    using Sitecore.Diagnostics;
    using Sitecore.Feature.Accounts.Attributes;
    using Sitecore.Feature.Accounts.Helper;
    using Sitecore.Feature.Accounts.Models;
    using Sitecore.Feature.Accounts.Models.AdaniGasCNGRegistration;
    using Sitecore.Feature.Accounts.Repositories;
    using Sitecore.Feature.Accounts.Services;
    using Sitecore.Foundation.Alerts.Models;
    using Sitecore.Foundation.Dictionary.Repositories;
    using Sitecore.Foundation.SitecoreExtensions.Attributes;
    using Sitecore.Foundation.SitecoreExtensions.Extensions;
    using Sitecore.Links;
    using Sitecore.Mvc.Configuration;
    using Sitecore.Mvc.Presentation;
    using System;
    using System.Collections.Generic;
    using System.Configuration;
    using System.Drawing;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Net.Mail;
    using System.Reflection;
    using System.Runtime.Serialization.Json;
    using System.Text;
    using System.Web;
    using System.Web.Mvc;
    using System.Web.Script.Serialization;
    using System.Web.Security;
    using System.Xml;
    using System.Xml.Linq;
    using CCA.Util;
    using System.Collections.Specialized;
    using System.Text.RegularExpressions;
    using Sitecore.Feature.Accounts.SessionHelper;
    using System.Data;
    using ClosedXML.Excel;
    using System.ComponentModel;
    using System.Net.Http.Headers;
    using static Sitecore.Feature.Accounts.Services.NameTransferService;

    public class AdaniGasController : Controller
    {
        // GET: AdaniGas
        public AdaniGasController(IAccountRepository accountRepository, INotificationService notificationService, IAccountsSettingsService accountsSettingsService, IGetRedirectUrlService getRedirectUrlService, IUserProfileService userProfileService, IFedAuthLoginButtonRepository fedAuthLoginRepository, IUserProfileProvider userProfileProvider, IPaymentService paymentService, IDbAccountService dbAccountService)
        {
            this.FedAuthLoginRepository = fedAuthLoginRepository;
            this.AccountRepository = accountRepository;
            this.NotificationService = notificationService;
            this.AccountsSettingsService = accountsSettingsService;
            this.GetRedirectUrlService = getRedirectUrlService;
            this.UserProfileService = userProfileService;
            this.UserProfileProvider = userProfileProvider;
            this.PaymentService = paymentService;
            this._dbAccountService = dbAccountService;
        }
        private IFedAuthLoginButtonRepository FedAuthLoginRepository { get; }
        private IAccountRepository AccountRepository { get; }
        private INotificationService NotificationService { get; }
        private IAccountsSettingsService AccountsSettingsService { get; }
        private IGetRedirectUrlService GetRedirectUrlService { get; }
        private IUserProfileService UserProfileService { get; }
        private IUserProfileProvider UserProfileProvider;
        private IPaymentService PaymentService { get; }
        private IDbAccountService _dbAccountService;

        public static Sitecore.Data.Database webDb = Sitecore.Configuration.Factory.GetDatabase("web");



        WebAPIAdaniGas objWebAPIAdaniGas = new WebAPIAdaniGas();

        #region ||** Registration & Login **||

        #region ||** Registration Adani Gas **||

        [RedirectAuthenticatedAdaniGas]
        public ActionResult RegisterAdaniGas()
        {
            RegistrationInfoAdaniGas model = new RegistrationInfoAdaniGas();
            Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");
            Data.Items.Item type = db.GetItem(Templates.PartnerType.Datasource.PartnerTypeList);
            model.PartnerTypeList = type.GetChildren().ToList().Skip(1).Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            return this.View(model);
        }

        [HttpPost]
        [RedirectAuthenticatedAdaniGas]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        public ActionResult RegisterAdaniGas(RegistrationInfoAdaniGas registrationInfo)
        {
            if (!ModelState.IsValid)
            {
                Data.Items.Item type = webDb.GetItem(Templates.PartnerType.Datasource.PartnerTypeList);
                registrationInfo.PartnerTypeList = type.GetChildren().ToList().Skip(1).Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();
                return this.View(registrationInfo);
            }

            if (!this.IsCaptchaValid("Captcha Validation Required."))
            {
                ModelState.AddModelError(nameof(registrationInfo.Captcha), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Captcha required", "Captcha Validation Required."));
                Data.Items.Item type = webDb.GetItem(Templates.PartnerType.Datasource.PartnerTypeList);
                registrationInfo.PartnerTypeList = type.GetChildren().ToList().Skip(1).Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();
                return this.View(registrationInfo);
            }

            try
            {
                if (registrationInfo.PartnerType.Equals("9001") || registrationInfo.PartnerType.Equals("9002"))
                {
                    registrationInfo.FirstName = registrationInfo.OrganizationName;
                    registrationInfo.LastName = registrationInfo.OrganizationName;
                }

                var response = objWebAPIAdaniGas.RegisterAccount(registrationInfo);
                var jsonString = response.Content;

                // convert JSON text contained in string json into an XML node
                var xml = XDocument.Load(JsonReaderWriterFactory.CreateJsonReader(Encoding.ASCII.GetBytes(jsonString), new XmlDictionaryReaderQuotas()));

                IEnumerable<XElement> element = xml.Descendants().Where(p => p.Name.LocalName == "d").ToList(); //"Ev_Msg_Flag"
                string Ev_Msg_Flag = element.FirstOrDefault() != null ? element.Descendants().FirstOrDefault(p => p.Name.LocalName == "Ev_Msg_Flag").Value : string.Empty;
                if (string.Equals(Ev_Msg_Flag, "T"))
                {
                    LoginInfo loginInfo = new LoginInfo();
                    loginInfo.LoginName = registrationInfo.CustomerID;
                    loginInfo.Password = registrationInfo.Password;
                    return LoginAdaniGas(loginInfo, redirectUrl => new RedirectResult(redirectUrl));
                }
                else if (string.Equals(Ev_Msg_Flag, "S"))
                {
                    //LoginInfo loginInfo = new LoginInfo();
                    //loginInfo.LoginName = registrationInfo.CustomerID;
                    //loginInfo.Password = registrationInfo.Password;
                    //return LoginAdaniGas(loginInfo, redirectUrl => new RedirectResult(redirectUrl));
                    var SuccessUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.RegistrationThankU);
                    return this.Redirect(SuccessUrl);
                }
                else
                {
                    string Ev_Message = element.FirstOrDefault() != null ? element.Descendants().FirstOrDefault(p => p.Name.LocalName == "Ev_Message").Value : string.Empty;
                    registrationInfo.ReturnViewMessage = Ev_Message;
                    Data.Items.Item type = webDb.GetItem(Templates.PartnerType.Datasource.PartnerTypeList);
                    registrationInfo.PartnerTypeList = type.GetChildren().ToList().Skip(1).Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                    return this.View(registrationInfo);
                }

            }
            catch (MembershipCreateUserException ex)
            {
                Log.Error($"Can't create user with {registrationInfo.Email}", ex, this);
                this.ModelState.AddModelError(nameof(registrationInfo.Email), ex.Message);

                return this.View(registrationInfo);
            }
        }

        #endregion

        #region Login


        private LoginInfo CreateLoginInfo(string returnUrl = null)
        {
            return new LoginInfo
            {
                ReturnUrl = returnUrl,
                LoginButtons = this.FedAuthLoginRepository.GetAll()
            };
        }
        public ActionResult LoginAdaniGas(string returnUrl = null)
        {
            LoginInfo model = CreateLoginInfo(returnUrl);
            var currentVisiterIP = WebAPIAdaniGas.GetIPAddress();

            if (WebAPIAdaniGas.IsUserLoggedIn() && SessionHelper.UserSession.AdaniGasUserSessionContext != null && SessionHelper.UserSession.AdaniGasUserSessionContext.UserIP != null && currentVisiterIP != null && currentVisiterIP != SessionHelper.UserSession.AdaniGasUserSessionContext.UserIP)
            {
                model.LoginName = SessionHelper.UserSession.AdaniGasUserSessionContext.LoginName;
                model.CustomerID = SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID;
            }
            else
            {
                SessionHelper.UserSession.AdaniGasUserSessionContext = null;
                //Session.Clear();
                //Session.Abandon();
                //Session.RemoveAll();
                //if (Request.Cookies["AuthToken"] != null)
                //{
                //    Response.Cookies["AuthToken"].Value = string.Empty;
                //    Response.Cookies["AuthToken"].Expires = DateTime.Now.AddMonths(-20);
                //}
            }

            return View(model);
        }

        [HttpPost]
        [ValidateModel]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        public ActionResult LoginAdaniGas(LoginInfo loginInfo)
        {
            if (!this.IsCaptchaValid("Captcha Validation Required."))
            {
                ModelState.AddModelError(nameof(loginInfo.Captcha), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Captcha required", "Captcha Validation Required."));
                return this.View(loginInfo);
            }
            return LoginAdaniGas(loginInfo, redirectUrl => new RedirectResult(redirectUrl));
        }

        //protected string GetIPAddress()
        //{
        //    try
        //    {
        //        System.Web.HttpContext context = System.Web.HttpContext.Current;
        //        string ipAddress = context.Request.ServerVariables["HTTP_X_FORWARDED_FOR"];

        //        if (!string.IsNullOrEmpty(ipAddress))
        //        {
        //            string[] addresses = ipAddress.Split(',');
        //            if (addresses.Length != 0)
        //            {
        //                return addresses[0];
        //            }
        //        }

        //        return context.Request.ServerVariables["REMOTE_ADDR"];
        //    }
        //    catch (Exception e)
        //    {
        //        Log.Error("Adani gas Get IP:" + e.Message, this);
        //        return null;
        //    }
        //}

        protected virtual ActionResult LoginAdaniGas(LoginInfo loginInfo, Func<string, ActionResult> redirectAction)
        {
            try
            {
                //string loginType = WebAPIAdaniGas.LoginModuleType(System.Web.HttpContext.Current.Request.Url.AbsolutePath.ToLower());

                UserLoginInfo loginDetails = objWebAPIAdaniGas.Login(loginInfo.LoginName, loginInfo.Password);
                //if (string.IsNullOrEmpty(loginDetails.CustomerID))
                //{
                //    this.ModelState.AddModelError(nameof(loginInfo.Password), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/API Not Valid", "Unable to fetch data from PI Service."));
                //    return this.View(loginInfo);
                //}
                if (loginDetails.MessageFlag == "F" || loginDetails.IsError == true) // unauthorized
                {
                    string errormsg = !string.IsNullOrEmpty(loginDetails.Message) ? loginDetails.Message : DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/User Not Valid", "Username or Password is not valid.");
                    this.ModelState.AddModelError(nameof(loginInfo.Password), errormsg);
                    return this.View(loginInfo);
                }
                else
                {
                    if (string.IsNullOrEmpty(loginDetails.CustomerID))
                    {
                        this.ModelState.AddModelError(nameof(loginInfo.Password), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/User Not Valid", "Username or password is not valid."));
                        return this.View(loginInfo);
                    }
                    else
                    {
                        string guid = Guid.NewGuid().ToString();
                        //Creating second session for the same user and assigning a randmon GUID

                        SessionHelper.UserSession.AdaniGasUserSessionContext = new PNGLoginModel
                        {
                            UserIP = WebAPIAdaniGas.GetIPAddress(),
                            IsLoggedIn = true,
                            LoginName = loginDetails.Name,
                            CustomerID = loginDetails.CustomerID,
                            userType = AdaniGasUserTypes.GetUserType(loginDetails.CustomerType),
                            Password = loginInfo.Password,
                            Contract_No = loginDetails.Contract_No,
                            Partner = loginDetails.Partner,
                            Inst_No = loginDetails.Inst_No,
                            Meter_Fromdt = loginDetails.Meter_Fromdt,
                            Meter_Uptodt = loginDetails.Meter_Uptodt,
                            Meter_SerialNumber = loginDetails.Meter_SerialNumber,
                            DeviceId = loginDetails.DeviceId,
                            RegNo = loginDetails.RegNo,
                            ReadingUnit = loginDetails.ReadingUnit,
                            CustomerType = loginDetails.CustomerType,
                            AuthToken = guid
                        };
                        Response.Cookies.Add(new System.Web.HttpCookie("AuthToken", guid));
                    }
                }

                string redirectUrl = loginInfo.ReturnUrl;
                if (string.IsNullOrEmpty(redirectUrl))
                {
                    redirectUrl = GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Authenticated);
                }

                return redirectAction(redirectUrl);
            }
            catch (Exception ex)
            {
                Log.Error("LoginAdaniGas Method Error - for User - " + loginInfo.LoginName, ex.Message);
                ModelState.AddModelError(nameof(loginInfo.Password), ex.Message);
                return View(loginInfo);
            }
        }

        #endregion

        #endregion

        #region Logout

        [HttpPost]
        public ActionResult LogoutAdaniGas()
        {
            string redirectUrl = string.Empty;
            if (SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerType == "9004") // Residemtial
            {
                redirectUrl = DictionaryPhraseRepository.Current.Get("/Accounts/Png/residentialpage", "/png-residential");
            }
            else if (SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerType == "9001") // industrail
            {
                redirectUrl = DictionaryPhraseRepository.Current.Get("/Accounts/Png/industrailpage", "/png-industrial");
            }
            else if (SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerType == "9002") // Commmercial
            {
                redirectUrl = DictionaryPhraseRepository.Current.Get("/Accounts/Png/commmercialpage", "/png-commercial");
            }
            else
            {
                redirectUrl = GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated);
            }
            //string usertype = SessionHelper.UserSession.AdaniGasUserSessionContext.userType;
            SessionHelper.UserSession.AdaniGasUserSessionContext = null;
            this.Session["UpdateMessage"] = null;
            this.Session["QuickPayCustomerType"] = null;
            Session.Clear();
            Session.Abandon();
            Session.RemoveAll();
            if (Request.Cookies["AuthToken"] != null)
            {
                Response.Cookies["AuthToken"].Value = string.Empty;
                Response.Cookies["AuthToken"].Expires = DateTime.Now.AddMonths(-20);
            }
            return Redirect(redirectUrl);
        }

        public void ClearedSession()
        {
            SessionHelper.UserSession.AdaniGasUserSessionContext = null;
            this.Session["UpdateMessage"] = null;
            this.Session["QuickPayCustomerType"] = null;
            Session.Clear();
            Session.Abandon();
            Session.RemoveAll();
            if (Request.Cookies["AuthToken"] != null)
            {
                Response.Cookies["AuthToken"].Value = string.Empty;
                Response.Cookies["AuthToken"].Expires = DateTime.Now.AddMonths(-20);
            }
        }

        #endregion

        #region GetGasConsumptionPattern

        public ActionResult GetGasConsumptionPattern_Years()
        {
            JsonResult result = new JsonResult();
            try
            {
                var cust_type = SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerType;

                if (cust_type.Equals("9001") || cust_type.Equals("9002"))
                {
                    Data.Items.Item quater = webDb.GetItem(Templates.GasConsumptionPattern_Quarters.Datasource.GasConsumptionPattern_Quarters);
                    List<SelectListItem> QuaterList = quater.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                    result = Json(QuaterList, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    Data.Items.Item years = webDb.GetItem(Templates.GasConsumptionPattern.Datasource.GasConsumptionPattern_Year);
                    List<SelectListItem> yearsList = years.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                    result = Json(yearsList, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return result;
        }
        public ActionResult GetGasConsumptionPatternChartAdaniGas(string year)
        {
            string contractno = SessionHelper.UserSession.AdaniGasUserSessionContext.Contract_No; //"1000053116";
            JsonResult result = new JsonResult();
            try
            {
                var response = objWebAPIAdaniGas.GetConsumptionDetail(contractno, year);
                if (response != null)
                {
                    GasConsumptionPattern model = new GasConsumptionPattern();
                    IEnumerable<XElement> element = response.Descendants().Where(p => p.Name.LocalName == "content").ToList();
                    if (element != null && element.Any())
                    {
                        //// Defining Format and Testing it via "DateTime.ToString(format)"
                        string sourcedtformat = "yyyy-MM-ddTHH:mm:ss";
                        string targetdtformat = "dd.MM.yyyy";

                        model.SCMValues = element.Select(s => new ConsumptionDetails()
                        {
                            Date = DateTime.ParseExact(s.Descendants().FirstOrDefault(x => x.Name.LocalName == "EndDate").Value, sourcedtformat, new System.Globalization.CultureInfo("en-US")).ToString(targetdtformat),
                            Consumption = Math.Round(decimal.Parse((!string.IsNullOrEmpty(s.Descendants().FirstOrDefault(x => x.Name.LocalName == "ConsumptionValue").Value) ? s.Descendants().FirstOrDefault(x => x.Name.LocalName == "ConsumptionValue").Value : "0.0000")), 4).ToString()
                        }).ToList();
                        model.AmountValues = element.Select(s => new ConsumptionDetails()
                        {
                            Date = DateTime.ParseExact(s.Descendants().FirstOrDefault(x => x.Name.LocalName == "EndDate").Value, sourcedtformat, new System.Globalization.CultureInfo("en-US")).ToString(targetdtformat),
                            Consumption = Math.Round(decimal.Parse((!string.IsNullOrEmpty(s.Descendants().FirstOrDefault(x => x.Name.LocalName == "CurrentBilledAmount").Value) ? s.Descendants().FirstOrDefault(x => x.Name.LocalName == "CurrentBilledAmount").Value : "0.00")), 2).ToString()
                        }).ToList();
                        model.MMBTUValues = element.Select(s => new ConsumptionDetails()
                        {
                            Date = DateTime.ParseExact(s.Descendants().FirstOrDefault(x => x.Name.LocalName == "EndDate").Value, sourcedtformat, new System.Globalization.CultureInfo("en-US")).ToString(targetdtformat),
                            Consumption = Math.Round(decimal.Parse((!string.IsNullOrEmpty(s.Descendants().FirstOrDefault(x => x.Name.LocalName == "GasConsumption_MMBTU").Value) ? s.Descendants().FirstOrDefault(x => x.Name.LocalName == "GasConsumption_MMBTU").Value : "0.00000")), 5).ToString()
                        }).ToList();
                        result = Json(model, JsonRequestBehavior.AllowGet);
                        return result;
                    }
                }
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return result;
        }

        #endregion

        #region GetGasPrice

        public ActionResult GetGasPrice()
        {
            GasPrice model = new GasPrice
            {
                PageType = WebAPIAdaniGas.LoginModuleType(System.Web.HttpContext.Current.Request.Url.AbsolutePath.ToLower()),
                CityListD = new List<SelectListItem>()
            };
            List<City> cityList = objWebAPIAdaniGas.GetCityList();
            var getAllCityWisePrice = objWebAPIAdaniGas.GetGasPrice(null);
            var cities = getAllCityWisePrice.Select(s => s.City).Distinct().ToList();
            model.CityListD = cities.Select(x => new SelectListItem()
            {
                Text = x,
                Value = x
            }).ToList();

            if (cities != null && cities.Count > 0)
            {
                model.SelectedCity = cityList.FirstOrDefault().CityName;
                List<CityAndPrice> result = new List<CityAndPrice>();
                foreach (var city in cities)
                {
                    CityAndPrice resultObj = new CityAndPrice { City = city };
                    foreach (var price in getAllCityWisePrice.Where(c => c.City == city).ToList())
                    {
                        switch (price.Product)
                        {
                            case "CNG In Rs./KG":
                                resultObj.CNGCityWisePrice.Effectice_Date_1 = price.Eff_date;
                                resultObj.CNGCityWisePrice.Price_1 = price.MMBTU_Rate;
                                break;
                            case "Commercial":
                                resultObj.CommercialCityWisePrice.Effectice_Date_1 = price.Eff_date;
                                resultObj.CommercialCityWisePrice.Price_1 = price.MMBTU_Rate;
                                break;
                            case "Domestic":
                                resultObj.DomesticCityWisePrice.Effectice_Date_1 = price.Eff_date;
                                resultObj.DomesticCityWisePrice.Price_1 = price.MMBTU_Rate;
                                break;
                            case "Industrial Excess Price":
                                resultObj.IndustrailCityWisePrice.Effectice_Date_3 = price.Eff_date;
                                resultObj.IndustrailCityWisePrice.Price_3 = price.MMBTU_Rate;
                                break;
                            case "Industrial MGO":
                                resultObj.IndustrailCityWisePrice.Effectice_Date_1 = price.Eff_date;
                                resultObj.IndustrailCityWisePrice.Price_1 = price.MMBTU_Rate;
                                break;
                            case "Industrial NON MGO":
                                resultObj.IndustrailCityWisePrice.Effectice_Date_2 = price.Eff_date;
                                resultObj.IndustrailCityWisePrice.Price_2 = price.MMBTU_Rate;
                                break;
                            case "Non Commercial":
                                resultObj.CommercialCityWisePrice.Effectice_Date_2 = price.Eff_date;
                                resultObj.CommercialCityWisePrice.Price_2 = price.MMBTU_Rate;
                                break;
                            default: break;
                        }
                    }
                    model.CityWisePrice.Add(resultObj);
                }
            }
            return View(model);
        }

        #endregion

        #region ComplaintQuery

        public ActionResult GetComplaintsQuery_Type()
        {
            JsonResult result = new JsonResult();

            try
            {
                Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");
                Data.Items.Item type = db.GetItem(Templates.ComplaintsQueries.Datasource.ComplaintsQuery_Type);
                List<SelectListItem> typeList = type.GetChildren().ToList().Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();
                result = Json(typeList, JsonRequestBehavior.AllowGet);

            }

            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return result;
        }

        public ActionResult GetComplaintsQuery_Category(string Complaintscategoryvalue)
        {
            JsonResult result = new JsonResult();

            try
            {
                WebAPIAdaniGas _webApiAdaniGas = new WebAPIAdaniGas();
                var products = _webApiAdaniGas.GetComplaintsQuery(Complaintscategoryvalue);
                result = Json(products, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return result;
        }

        public ActionResult ComplaintsQuery()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [ValidateRenderingId]
        public ActionResult ComplaintsQuery(string type, string category, string comment)
        {
            WebAPIAdaniGas _webApiAdaniGas = new WebAPIAdaniGas();

            string[] arrCategoryVal = category.Split('_').ToArray();
            string Partner_No = SessionHelper.UserSession.AdaniGasUserSessionContext.Partner ?? string.Empty, Company_Category = arrCategoryVal[0] ?? string.Empty, Consumption_Type = arrCategoryVal[1] ?? string.Empty, Task_Code = arrCategoryVal[2] ?? string.Empty;
            HttpResponseMessage response = _webApiAdaniGas.ComplaintQueryRegistration(Partner_No, Company_Category, Consumption_Type, Task_Code, comment);

            var resultContent = response.Content.ReadAsStreamAsync().Result;
            XDocument incomingXml = XDocument.Load(resultContent);
            StringReader stringReader = new StringReader(incomingXml.ToString());
            string complaint = string.Empty;
            using (XmlReader reader = XmlReader.Create(stringReader))
            {
                while (reader.Read())
                {
                    if (reader.IsStartElement())
                    {
                        switch (reader.Name.ToString())
                        {
                            case "d:MsgFlag":
                                ViewBag.Status = reader.ReadString();
                                break;
                            case "d:Message":
                                ViewBag.Message = reader.ReadString();
                                break;
                            case "d:Complaint":
                                complaint = reader.ReadString();
                                break;
                        }
                    }
                }
            }
            if (ViewBag.Status == "S")
            {
                Session["UpdateMessage"] = new InfoMessage(ViewBag.Message + " Your complaint number is " + complaint);
                return Redirect(Request.RawUrl);
            }
            else
            {
                return View();
            }
        }
        public ActionResult ComplaintsQueryList()
        {
            WebAPIAdaniGas _webApiAdaniGas = new WebAPIAdaniGas();
            var result = _webApiAdaniGas.GetComplaintsQueryList();
            return View(result);
        }

        #endregion

        #region AfterSalesServices

        private afterSalesServices GetSalesDataUsingCommonMethod(afterSalesServices model)
        {
            model = objWebAPIAdaniGas.GetAfterSalesServiceQauntityData();

            List<SelectListItem> afterSalesServiceRequestList = new List<SelectListItem>();

            if (model.afterSalesServicesList != null && model.afterSalesServicesList.Any())
            {
                foreach (var item in model.afterSalesServicesList)
                {
                    afterSalesServiceRequestList.Add(new SelectListItem
                    {
                        Text = item.Comp_Text,
                        Value = item.Comp_Cat + "_" + item.SrNo + "_" + item.Comp_Type
                    });
                }
                model.afterSalesServiceSelectedList = afterSalesServiceRequestList.GroupBy(x => x.Value).Select(x => x.First()).ToList();
                model.Quantity = "01";
                model.Amount = 00;
                model.TempAmount = "00";

            }

            return model;
        }

        [HttpGet]
        public ActionResult AfterSalesService()
        {
            Log.Info("At AfterSalesService", this);
            Session["AfterSalesData"] = null;
            if (SessionHelper.UserSession.AdaniGasUserSessionContext != null && SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerType != "9004")
            {
                return Redirect("/myaccount/png-dashboard");
            }

            afterSalesServices model = new afterSalesServices();
            try
            {
                model = GetSalesDataUsingCommonMethod(model);
                var modeldata = objWebAPIAdaniGas.QuickPay(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
                model.Email = "-";
                model.Mobile = "-";
            }
            catch (Exception ex)
            {
                Log.Error("Error at AfterSalesService: ", ex, this);
            }
            return View("AfterSalesService", model);
        }
        public JsonResult AfterSalesServiceChangeDDR(string serviceValue = null, string Quantity = null)
        {
            try
            {
                string[] words = serviceValue.Split('_');
                var Comp_Cat = words[0];
                var SrNo = words[1];
                var Comp_Type = words[2];
                var qnt = Convert.ToInt32(Quantity);

                var model = objWebAPIAdaniGas.GetAfterSalesServiceQauntityData();

                var getDataForAmmount = objWebAPIAdaniGas.GetAfterSalesServiceAmountData(Comp_Cat, SrNo, Comp_Type, qnt);

                var amount = Convert.ToDouble(getDataForAmmount.AmountWithTax);

                if (model.afterSalesServicesList != null)
                {
                    var afterSalesList = model.afterSalesServicesList.Where(x => x.SrNo == SrNo && x.Comp_Cat == Comp_Cat && x.Comp_Type == Comp_Type).GroupBy(x => x.SrNo).Select(x => x.First()).ToList();

                    var data = new
                    {
                        Quantity_Min = afterSalesList.Select(x => x.Quantity_Min),
                        Quantity_Max = afterSalesList.Select(x => x.Quantity_Max),
                        AmountToBePaid = amount,
                        TempQuantity_Min = afterSalesList.Select(x => x.Quantity_Min),
                        TempQuantity_Max = afterSalesList.Select(x => x.Quantity_Max),
                        Msgflag = getDataForAmmount.MessageFlag,
                        Message = getDataForAmmount.Message,
                        Tax = getDataForAmmount.Tax,
                        extraamount = getDataForAmmount.ExtraAmount,
                        MaxLengthgas = getDataForAmmount.MaxLengthgas
                    };
                    return Json(data, JsonRequestBehavior.AllowGet);
                }

                return Json(new
                {
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                Log.Error("Error at AfterSalesServiceChangeDDR: ", ex, this);
                var data = new
                {
                };
                return Json(data, JsonRequestBehavior.AllowGet);
            }

        }
        public JsonResult AfterSalesServiceOnTextBoxChange(string serviceValue = null, string Quantity = null)
        {
            try
            {
                string[] words = serviceValue.Split('_');
                var Comp_Cat = words[0];
                var SrNo = words[1];
                var Comp_Type = words[2];
                var qnt = Convert.ToInt32(Quantity);

                var getDataForAmmount = objWebAPIAdaniGas.GetAfterSalesServiceAmountData(Comp_Cat, SrNo, Comp_Type, qnt);
                var amount = Convert.ToDouble(getDataForAmmount.AmountWithTax);

                var data = new
                {
                    AmountToBePaid = amount,
                    Msgflag = getDataForAmmount.MessageFlag,
                    Message = getDataForAmmount.Message,
                    Tax = getDataForAmmount.Tax,
                    extraamount = getDataForAmmount.ExtraAmount,
                    MaxLengthgas = getDataForAmmount.MaxLengthgas
                };
                return Json(data, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                Log.Error("Error at AfterSalesServiceChangeDDR: ", ex, this);
                var data = new
                {
                };
                return Json(data, JsonRequestBehavior.AllowGet);
            }

        }

        [HttpPost]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        public ActionResult AfterSalesService(afterSalesServices model)
        {
            Log.Info("At AfterSalesService", this);


            if (Convert.ToInt32(model.Quantity) >= Convert.ToInt32(model.TempQuantity_Min) && Convert.ToInt32(model.Quantity) <= Convert.ToInt32(model.TempQuantity_Max))
            {
            }
            else
            {
                if (Convert.ToInt32(model.Quantity) > 0)
                {
                    ModelState.AddModelError("ErrorInQuantity", "Enter Value between Min-Max");
                    model = GetSalesDataUsingCommonMethod(model);
                    return View("AfterSalesService", model);
                }
            }

            if (!ModelState.IsValid)
            {
                model = GetSalesDataUsingCommonMethod(model);
                return View("AfterSalesService", model);
            }
            try
            {
                string[] words = model.selectedAfterSalesServiceRequest.Split('_');
                var Comp_Cat = words[0];
                var SrNo = words[1];
                var Comp_Type = words[2];
                var Quantity = Convert.ToInt32(model.Quantity);
                var Text = model.Comment;

                if (!string.IsNullOrEmpty(model.TempAmount) && Convert.ToDouble(model.TempAmount) > 0)
                {
                    afterSalesServiceRecords objmodel = new afterSalesServiceRecords();
                    objmodel.Comp_Cat = Comp_Cat;
                    objmodel.SrNo = SrNo;
                    objmodel.Comp_Type = Comp_Type;
                    objmodel.Quantity_Min = Convert.ToString(Quantity);
                    objmodel.Message = Text;
                    objmodel.CustomerId = SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID;
                    objmodel.CustomerPartnerNo = SessionHelper.UserSession.AdaniGasUserSessionContext.Partner;
                    objmodel.CustomerPassword = SessionHelper.UserSession.AdaniGasUserSessionContext.Password;

                    //Session["AfterSalesData"] = objmodel;

                    model.CustomerID = SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID;
                    model.PaymentType = model.selectedAfterSalesServiceRequest;
                    model.CustomerType = SessionHelper.UserSession.AdaniGasUserSessionContext.userType;
                    model.UserType = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/RegisteredUser", "Registered");
                    model.CustomerName = SessionHelper.UserSession.AdaniGasUserSessionContext.LoginName;
                    model.Amount = Convert.ToDouble(model.TempAmount);

                    model.AfterSalesServiceRecord = objmodel;

                    switch (model.PaymentGateway)
                    {
                        case (int)EnumPayment.GatewayType.PayUMoney:
                            PaymentService.StorePaymentRequestAfterSalesAdaniGas(model);
                            string payUHTML = PaymentService.PayUMoneyTransactionRequestAPIAdaniGasRequestPost(model);
                            return Content(payUHTML);
                        case (int)EnumPayment.GatewayType.BillDesk:
                            PaymentService.StorePaymentRequestAfterSalesAdaniGas(model);
                            string RequestHTML = PaymentService.BillDeskTransactionRequestAPIRequestAdaniGasPost(model);
                            return Content(RequestHTML);
                        case (int)EnumPayment.GatewayType.Paytm:
                            PaymentService.StorePaymentRequestAfterSalesAdaniGas(model);
                            string outputHTML = PaymentService.PaytmTransactionRequestAPIRequestAdaniGasPost(model);
                            return Content(outputHTML);
                        case (int)EnumPayment.GatewayType.HDFC:
                            PaymentService.StorePaymentRequestAdaniGas(model);
                            string ReqHTML = PaymentService.HDFCTransactionRequestAPIRequestAdaniGasPost(model);
                            return Content(ReqHTML);
                        default:
                            break;
                    }

                    //  Session["UpdateMessage"] = new InfoMessage(sendData.Message);


                    return Redirect(Request.RawUrl);
                }
                else
                {
                    var sendData = objWebAPIAdaniGas.SalesServiceDataPost(Comp_Cat, SrNo, Comp_Type, Quantity, Text, SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID, SessionHelper.UserSession.AdaniGasUserSessionContext.Password, SessionHelper.UserSession.AdaniGasUserSessionContext.Partner);
                    Session["UpdateMessage"] = new InfoMessage(sendData.Message);
                }
            }
            catch (Exception ex)
            {
                Log.Error("Error at AfterSalesService post: ", ex, this);
            }
            return Redirect(Request.RawUrl);
        }

        #endregion

        #region PaymentHistory & BillingInfoDetails

        [RedirectUnAuthenticatedAdaniGas]
        public ActionResult PaymentHistoryAdaniGas()
        {
            SapPiService.Domain.PaymentHistory model = new SapPiService.Domain.PaymentHistory();
            try
            {
                model = objWebAPIAdaniGas.GetPaymentInformation();



            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return View(model);
        }

        [RedirectUnAuthenticatedAdaniGas]
        public ActionResult BillingInfoDetailsAdaniGas()
        {
            BillingDetailsList model = new BillingDetailsList();
            try
            {
                model = objWebAPIAdaniGas.GetInvoices();
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return View(model);
        }

        [RedirectUnAuthenticatedAdaniGas]
        public ActionResult AlertonDashboard()
        {
            var model = objWebAPIAdaniGas.QuickPay(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);

            if (model != null && !string.IsNullOrEmpty(model.Current_Outstanding_Amount) && Convert.ToDecimal(model.Current_Outstanding_Amount) > 0)
            {
                try
                {
                    DateTime ddate = DateTime.ParseExact(model.Due_Date, "yyyyMMdd", null);
                    var duedate = ddate.ToString("dd.MM.yyyy");

                    string readingInDecimal = "00";
                    if (!string.IsNullOrEmpty(model.Current_Outstanding_Amount))
                    {
                        var decimalPoint = Convert.ToDecimal(model.Current_Outstanding_Amount);
                        readingInDecimal = decimalPoint.ToString("F");
                    }

                    string outStandingAmount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? "00" : readingInDecimal;
                    if (!string.IsNullOrEmpty(model.Current_Outstanding_Amount) && Convert.ToDecimal(model.Current_Outstanding_Amount) > 0)
                    {
                        string alert = string.Format("Bill for account id {0} has been generated. Last date of payment is {1}. The amount due is {2}. ", SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID, duedate, outStandingAmount);
                        ViewBag.AlertMessage = alert;
                    }
                    else
                    {
                        ViewBag.AlertMessage = string.Empty;
                    }
                }
                catch (Exception e)
                {
                    Log.Error(e.Message, this);
                    ViewBag.AlertMessage = string.Empty;
                }
            }
            else
            {
                ViewBag.AlertMessage = string.Empty;
            }

            return View();
        }

        #endregion

        #region LefPanel & WelcomeMessage

        [RedirectUnAuthenticatedAdaniGas]
        public ActionResult LeftPanelAdaniGas()
        {
            if (!WebAPIAdaniGas.IsUserLoggedIn())
            {
                string redirectUrl = GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated);
                return Redirect(redirectUrl);
            }
            string userType = SessionHelper.UserSession.AdaniGasUserSessionContext.userType;
            string CustomerType = SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerType;
            return View("LeftPanelAdaniGas", new EditProfile() { UserType = userType.ToLower(), CustomerType = CustomerType });
        }

        [RedirectUnAuthenticatedAdaniGas]
        public ActionResult WelcomeMessageAdaniGas()
        {
            if (SessionHelper.UserSession.AdaniGasUserSessionContext == null)
            {
                return Redirect(Context.Site.GetRootItem().Url());
            }

            return View("WelcomeMessageAdaniGas", new EditProfile() { LoginName = SessionHelper.UserSession.AdaniGasUserSessionContext.LoginName });
        }

        #endregion

        #region SubmiteMeterReading

        [HttpGet]
        [RedirectUnAuthenticatedAdaniGas]
        public ActionResult SubmitMeterReadingAdaniGas()
        {
            if (SessionHelper.UserSession.AdaniGasUserSessionContext != null && SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerType != "9004")
            {
                return Redirect("/myaccount/png-dashboard");
            }

            SelfBillingAdaniGas model = new SelfBillingAdaniGas();
            model.CustomerID = SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID;
            model.MeterNumber = SessionHelper.UserSession.AdaniGasUserSessionContext.Meter_SerialNumber;

            model = GetMeterReadingDetails(model.CustomerID);

            return View(model);
        }

        [HttpPost]
        //[ValidateModel]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        [RedirectUnAuthenticatedAdaniGas]
        public ActionResult SubmitMeterReadingAdaniGas(SelfBillingAdaniGas model, string submitbutton = null, string okbutton = null, string cancelbutton = null, string cancelReloadbutton = null, string GetCustomerDetails = null, string ValidateOTP = null)
        {
            try
            {
                if (!string.IsNullOrEmpty(GetCustomerDetails))
                {
                    if (!this.IsCaptchaValid("Captcha Validation Required."))
                    {
                        ViewBag.NoInfo = "Please provide Captcha and try again!";
                        ModelState.AddModelError(nameof(model.Captcha), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Captcha required", "Captcha Validation Required."));
                        return this.View(model);
                    }
                    try
                    {

                        var CustomerInfo = objWebAPIAdaniGas.QuickPay(model.CustomerID);

                        if (!string.IsNullOrEmpty(CustomerInfo.Mobile))
                        {
                            WebAPIAdaniGas wbAGl = new WebAPIAdaniGas();
                            var MobileNo = AES_EncryptDecrypt.DecryptString(wbAGl.EncryptionKey, CustomerInfo.Mobile, wbAGl.EncryptionIV);
                            AdaniGasENachRegistrationModel registrationInfo = new AdaniGasENachRegistrationModel();
                            registrationInfo.MobileNo = MobileNo;
                            registrationInfo.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");

                            var sendOTP = objWebAPIAdaniGas.ENachSendOtp(registrationInfo);
                            if (sendOTP.IsError)
                            {
                                ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP sending Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message);
                                model.IsOTPSent = false;
                                model.IsvalidatAccount = true;
                                //Session["Cust_id"] = registrationInfo.CustomerID;
                                return this.View(model);
                            }
                            else if (sendOTP.MessageFlag.ToLower() == "s")
                            {
                                model.IsOTPSent = true;
                                model.IsvalidatAccount = true;
                                model.Message = sendOTP.Message;
                                //Session["CustID"] = registrationInfo.CustomerID;
                                //TempData["CustID"] = registrationInfo.CustomerID;
                                return this.View(model);
                            }
                            else if (sendOTP.MessageFlag.ToLower() == "f")
                            {
                                model.IsOTPSent = false;
                                model.IsvalidatAccount = true;
                                model.Message = sendOTP.Message;
                                //Session["CustID"] = registrationInfo.CustomerID;
                                //TempData["CustID"] = registrationInfo.CustomerID;
                                return this.View(model);
                            }
                            else
                            {
                                ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP failed Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message);
                                model.IsOTPSent = false;
                                model.IsvalidatAccount = true;
                                return this.View(model);
                            }
                        }
                        else
                        {
                            model.IsvalidatAccount = true;
                            ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/API Issue", "There is some issue in fetching your data. Please try after some time.") + CustomerInfo.Message;
                            return this.View(model);

                        }
                    }
                    catch (Exception ex)
                    {
                        ViewBag.NoInfo = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time.");
                        Sitecore.Diagnostics.Log.Error("Error at ViewPayBill Get:" + ex.Message, this);
                    }
                    return View(model);
                }
                if (!string.IsNullOrEmpty(ValidateOTP))
                {
                    var CustomerInfo = objWebAPIAdaniGas.QuickPay(model.CustomerID);
                    WebAPIAdaniGas wbAGl = new WebAPIAdaniGas();
                    var MobileNo = AES_EncryptDecrypt.DecryptString(wbAGl.EncryptionKey, CustomerInfo.Mobile, wbAGl.EncryptionIV);

                    var isOtpValid = objWebAPIAdaniGas.EnachValidateOtp(MobileNo, model.OTPNumber);
                    if (isOtpValid.Msg_Flag == "S")
                    {
                        Session["Cust_id"] = model.CustomerID;
                        return RedirectPermanent(this.UserProfileService.GetPageURL(Templates.Pages.Selfbilling));
                    }
                    else if (isOtpValid.Msg_Flag == "F")
                    {
                        model.Message = isOtpValid.Message;
                        model.IsOTPSent = true;
                        model.IsOTPValid = false;
                        return this.View(model);
                    }
                    else
                    {
                        model.Message = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP Invalid Issue", "There is some issue in validating OTP. Please try after some time. " + isOtpValid.Message);
                        model.IsOTPSent = true;
                        model.IsOTPValid = false;
                        return this.View(model);
                    }
                }
                if (!string.IsNullOrEmpty(submitbutton))
                {
                    if (Session["IsRelease"] != null)
                    {
                        model.IsRelease = (bool)Session["IsRelease"];
                    }
                    string EncryptionKey = DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/EncryptionKey", "Tl;jld@456763909QPwOeiRuTy873XY7");
                    string EncryptionIV = DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/EncryptionIV", "CEIVRAJWquG8iiMw");

                    string enc = HttpUtility.UrlEncode(AES_EncryptDecrypt.EncryptString(EncryptionKey, "", EncryptionIV));

                    string ip = WebAPIAdaniGas.GetIPAddress();
                    byte[] time = BitConverter.GetBytes(DateTime.UtcNow.ToBinary());
                    byte[] key = Guid.NewGuid().ToByteArray();
                    byte[] ipdata = Encoding.ASCII.GetBytes(ip);
                    var TOKEN = Convert.ToBase64String(time.Concat(ipdata).Concat(key).ToArray());

                    byte[] bytes;
                    string image = "";
                    if (!model.IsRelease)
                    {
                        //file is mandatory to upload
                        if (model.MeterReadingImage == null && Session["CapturedImage"] == null)
                        {
                            model.IsSuccessful = false;
                            return View(model);
                        }
                        else if (model.MeterReading1 == 0 && model.MeterReading2 == 0 && model.MeterReading3 == 0 && model.MeterReading4 == 0 && model.MeterReading5 == 0 && model.MeterReading6 == 0 && model.MeterReading7 == 0)
                        {
                            this.ModelState.AddModelError(nameof(model.MeterReading), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Reading error", "Please insert correct reading."));
                            model.IsSuccessful = false;
                            return View(model);
                        }
                        else
                        {
                            if (Session["CapturedImage"] != null && model.MeterReadingImage == null)
                            {
                                model.MeterReadingImagePath = Session["CapturedImage"].ToString();

                                FileStream fs1 = new FileStream(model.MeterReadingImagePath, FileMode.Open, FileAccess.Read);
                                bytes = new byte[fs1.Length];
                                image = Convert.ToBase64String(bytes);

                                Session["MeterReadingImagePath"] = model.MeterReadingImagePath;
                            }
                            else
                            {
                                Stream fs = model.MeterReadingImage.InputStream;
                                BinaryReader br = new BinaryReader(fs);
                                bytes = br.ReadBytes((Int32)fs.Length);
                                image = Convert.ToBase64String(bytes);

                                //save image file for release
                                string meterimage_filename = model.CustomerID + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + System.IO.Path.GetExtension(model.MeterReadingImage.FileName);
                                string meterimage_path = Server.MapPath("~/selfbilling/meterimage/");
                                var meterimage_filepath = "/selfbilling/meterimage/" + meterimage_filename;
                                model.MeterReadingImagePath = meterimage_filename;

                                Session["MeterReadingImagePath"] = model.MeterReadingImagePath;

                                if (!Directory.Exists(meterimage_path))
                                {
                                    Directory.CreateDirectory(meterimage_path);
                                }
                                System.IO.FileStream stream = new FileStream(meterimage_path + meterimage_filename, FileMode.CreateNew);
                                System.IO.BinaryWriter writer =
                                    new BinaryWriter(stream);
                                writer.Write(bytes, 0, bytes.Length);
                                writer.Close();
                            }
                        }
                    }
                    else
                    {
                        //previous file to be send if user has not chosssen any new file
                        if (model.MeterReadingImage == null)
                        {
                            if (Session["MeterReadingImagePath"] == null)
                            {
                                model.IsSuccessful = false;
                                return View(model);
                            }
                            model.MeterReadingImagePath = Server.MapPath("~/selfbilling/meterimage/") + Session["MeterReadingImagePath"].ToString();

                            FileStream fs = new FileStream(model.MeterReadingImagePath, FileMode.Open, FileAccess.Read);
                            bytes = new byte[fs.Length];
                            image = Convert.ToBase64String(bytes);
                        }
                        else
                        {
                            Stream fs = model.MeterReadingImage.InputStream;
                            BinaryReader br = new BinaryReader(fs);
                            bytes = br.ReadBytes((Int32)fs.Length);
                            image = Convert.ToBase64String(bytes);

                            //save image file for release
                            string meterimage_filename = model.CustomerID + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + System.IO.Path.GetExtension(model.MeterReadingImage.FileName);
                            string meterimage_path = Server.MapPath("~/selfbilling/meterimage/");
                            var meterimage_filepath = "/selfbilling/meterimage/" + meterimage_filename;
                            model.MeterReadingImagePath = meterimage_filename;

                            Session["MeterReadingImagePath"] = model.MeterReadingImagePath;

                            if (!Directory.Exists(meterimage_path))
                            {
                                Directory.CreateDirectory(meterimage_path);
                            }
                            System.IO.FileStream stream = new FileStream(meterimage_path + meterimage_filename, FileMode.CreateNew);
                            System.IO.BinaryWriter writer =
                                new BinaryWriter(stream);
                            writer.Write(bytes, 0, bytes.Length);
                            writer.Close();
                        }
                    }

                    var prevMeterReading = model.PreviousMeterReading;
                    var preMeterReadingDateandTime = model.PreviousMeterReadingDateandTime;
                    var preISTABLART = model.ISTABLART;
                    SelfBillingAdaniGas details = GetMeterReadingDetails(model.CustomerID);

                    if (prevMeterReading != null && model.IsRelease)
                    {
                        details.ISTABLART = preISTABLART;
                        details.PreviousMeterReading = prevMeterReading;
                        details.PreviousMeterReadingDateandTime = preMeterReadingDateandTime;
                    }

                    string finalMeterReading = model.MeterReading1.ToString() + model.MeterReading2.ToString() + model.MeterReading3.ToString() + model.MeterReading4.ToString() + model.MeterReading5.ToString() + "." + model.MeterReading6.ToString() + model.MeterReading7.ToString() + model.MeterReading8.ToString();
                    model.MeterReading = Convert.ToDecimal(finalMeterReading);



                    if (details.ISTABLART == "01" || details.ISTABLART == "02")
                    {
                        decimal preReading = Convert.ToDecimal(details.PreviousMeterReading);
                        decimal newReading = Convert.ToDecimal(model.MeterReading);
                        if (preReading > newReading)
                        {
                            this.ModelState.AddModelError(nameof(model.MeterReading), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Reading error", "Meter reading entered by you is lower than previous reading, please correct."));
                            return View(model);
                        }
                    }

                    string mode = "INSERT";
                    if (model.IsRelease)
                        mode = "UPDATE";

                    SelfBillingRequest request1 = new SelfBillingRequest
                    {
                        MODE = AES_EncryptDecrypt.EncryptString(EncryptionKey, mode, EncryptionIV),
                        CONTRACTACCOUNT = AES_EncryptDecrypt.EncryptString(EncryptionKey, model.CustomerID, EncryptionIV),
                        DEVICE = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.SERNR, EncryptionIV),
                        MRRESULT = AES_EncryptDecrypt.EncryptString(EncryptionKey, model.MeterReading.ToString(), EncryptionIV),
                        METERIMAGE = AES_EncryptDecrypt.EncryptString(EncryptionKey, image, EncryptionIV),
                        Token = AES_EncryptDecrypt.EncryptString(EncryptionKey, TOKEN, EncryptionIV),
                        MRDATE = AES_EncryptDecrypt.EncryptString(EncryptionKey, DateTime.Now.ToString("yyyy-MM-dd"), EncryptionIV),
                        MRTIME = AES_EncryptDecrypt.EncryptString(EncryptionKey, DateTime.Now.ToString("hhmm"), EncryptionIV),
                        MRIDNUMBER = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.MRIDNUMBER, EncryptionIV),
                        PARTNERNAME = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.CustomerName, EncryptionIV),
                        CONTRACTNO = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.CONTRACTNO, EncryptionIV),
                        SHMRDATE = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.NextMeterReadingDateandTime, EncryptionIV),
                        PRV_MR_DATE = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.PreviousMeterReadingDateandTime, EncryptionIV),
                        PRV_RESULT = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.PreviousMeterReading, EncryptionIV),
                        DEV_CAT = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.DEV_CAT, EncryptionIV)
                    };

                    model.MRIDNUMBER = details.MRIDNUMBER;
                    var serializedObj = JsonConvert.SerializeObject(request1);

                    //var client = new RestClient("https://apps.adani.com/QASpotBillingServices/ApplicationService.svc/Web/SelfMeterReading");
                    var client = new RestClient(DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/SpotBillingService_SelfBilling", "https://apps.adani.com/QASpotBillingServices/ApplicationService.svc/Web/SelfMeterReading"));

                    client.Timeout = -1;
                    var request = new RestRequest(Method.POST);
                    request.AddHeader("Content-Type", "application/json");
                    request.AddParameter("application/json", serializedObj, ParameterType.RequestBody);
                    IRestResponse response = client.Execute(request);
                    Log.Info("SubmitMeterReading API JSON response: " + response.Content??"Null", this);

                    if (response.IsSuccessful)
                    {
                        model.IsSuccessful = true;
                        Log.Info("SubmitMeterReading API JSON Success response: " + response.Content ?? "Null", this);
                        var resultXml = XElement.Parse(response.Content);


                        //model.MsgFlag = "S";// resultXml.Descendants().Descendants().ToList()[0].Value;
                        model.ExternalMessage = resultXml.Descendants().Descendants().ToList()[0].Value;
                        model.Message = resultXml.Descendants().Descendants().ToList()[1].Value;
                        model.PDFData = resultXml.Descendants().Descendants().ToList()[2].Value;
                        model.MsgFlag = resultXml.Descendants().Descendants().ToList()[3].Value;

                        if (model.MsgFlag == "S" && !string.IsNullOrEmpty(model.PDFData))
                        {
                            string filename = model.CustomerID + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".pdf";
                            string path = Server.MapPath("~/selfbilling/userfile/");
                            var filepath = "/selfbilling/userfile/" + filename;
                            model.FilePath = filepath;

                            if (!Directory.Exists(path))
                            {
                                Directory.CreateDirectory(path);
                            }
                            byte[] PDFbytes = Convert.FromBase64String(model.PDFData);
                            System.IO.FileStream stream1 = new FileStream(path + filename, FileMode.CreateNew);
                            System.IO.BinaryWriter writer1 =
                                new BinaryWriter(stream1);
                            writer1.Write(PDFbytes, 0, PDFbytes.Length);
                            writer1.Close();
                        }
                        else if (model.MsgFlag == "E")
                        {
                            model.IsSuccessful = false;
                            Log.Error("Response E at Adani Gas SelfBilling API: " + model.Message ?? "", this);
                            this.ModelState.AddModelError(nameof(model.MeterReadingImage), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Response API error", model.ExternalMessage ?? "Error in Self-Billing. Please contact our customer care. Sorry for inconvenience caused."));
                            return View(model);
                        }
                    }

                    return View(model);
                }
                if (!string.IsNullOrEmpty(okbutton))
                {
                    Session["IsRelease"] = true;
                    model.IsRelease = true;
                    string EncryptionKey = DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/EncryptionKey", "Tl;jld@456763909QPwOeiRuTy873XY7");
                    string EncryptionIV = DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/EncryptionIV", "CEIVRAJWquG8iiMw");

                    string enc = HttpUtility.UrlEncode(AES_EncryptDecrypt.EncryptString(EncryptionKey, "", EncryptionIV));

                    string ip = WebAPIAdaniGas.GetIPAddress();
                    byte[] time = BitConverter.GetBytes(DateTime.UtcNow.ToBinary());
                    byte[] key = Guid.NewGuid().ToByteArray();
                    byte[] ipdata = Encoding.ASCII.GetBytes(ip);
                    var TOKEN = Convert.ToBase64String(time.Concat(ipdata).Concat(key).ToArray());

                    //string filename = model.CustomerID + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".pdf";
                    //string path = Server.MapPath("~/selfbilling/userfile/");
                    //var filepath = "/selfbilling/userfile/" + filename;
                    //model.FilePath = filepath;

                    model.MeterReadingImagePath = Server.MapPath("~/selfbilling/meterimage/") + Session["MeterReadingImagePath"].ToString();

                    byte[] bytes;
                    FileStream fs = new FileStream(model.MeterReadingImagePath, FileMode.Open, FileAccess.Read);
                    bytes = new byte[fs.Length];

                    //var img = System.Drawing.Image.FromFile(model.MeterReadingImagePath);
                    //byte[] bytes;
                    //using (MemoryStream ms = new MemoryStream())
                    //{
                    //    img.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
                    //    bytes = ms.ToArray();
                    //}
                    //Byte[] bytes = System.IO.File.ReadAllBytes(model.MeterReadingImagePath);
                    string image = Convert.ToBase64String(bytes);

                    SelfBillingAdaniGas details = GetMeterReadingDetails(model.CustomerID);

                    SelfBillingRequest request1 = new SelfBillingRequest
                    {
                        MODE = AES_EncryptDecrypt.EncryptString(EncryptionKey, "RELEASE", EncryptionIV),
                        CONTRACTACCOUNT = AES_EncryptDecrypt.EncryptString(EncryptionKey, model.CustomerID, EncryptionIV),
                        DEVICE = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.SERNR, EncryptionIV),
                        MRRESULT = AES_EncryptDecrypt.EncryptString(EncryptionKey, model.MeterReading.ToString(), EncryptionIV),
                        METERIMAGE = AES_EncryptDecrypt.EncryptString(EncryptionKey, image, EncryptionIV),
                        Token = AES_EncryptDecrypt.EncryptString(EncryptionKey, TOKEN, EncryptionIV),
                        MRDATE = AES_EncryptDecrypt.EncryptString(EncryptionKey, DateTime.Now.ToString("yyyy-MM-dd"), EncryptionIV),
                        MRTIME = AES_EncryptDecrypt.EncryptString(EncryptionKey, DateTime.Now.ToString("hhmm"), EncryptionIV),
                        MRIDNUMBER = AES_EncryptDecrypt.EncryptString(EncryptionKey, model.MRIDNUMBER, EncryptionIV),
                        PARTNERNAME = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.CustomerName, EncryptionIV),
                        CONTRACTNO = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.CONTRACTNO, EncryptionIV),
                        SHMRDATE = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.NextMeterReadingDateandTime, EncryptionIV),
                        PRV_MR_DATE = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.PreviousMeterReadingDateandTime, EncryptionIV),
                        PRV_RESULT = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.PreviousMeterReading, EncryptionIV),
                        DEV_CAT = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.DEV_CAT, EncryptionIV)
                    };

                    var serializedObj = JsonConvert.SerializeObject(request1);

                    //var client = new RestClient("https://apps.adani.com/QASpotBillingServices/ApplicationService.svc/Web/SelfMeterReading");
                    var client = new RestClient(DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/SpotBillingService_SelfBilling", "https://apps.adani.com/QASpotBillingServices/ApplicationService.svc/Web/SelfMeterReading"));

                    client.Timeout = -1;
                    var request = new RestRequest(Method.POST);
                    request.AddHeader("Content-Type", "application/json");
                    request.AddParameter("application/json", serializedObj, ParameterType.RequestBody);
                    IRestResponse response = client.Execute(request);

                    if (response.IsSuccessful)
                    {
                        model.IsSuccessful = true;

                        var resultXml = XElement.Parse(response.Content);

                        //model.MsgFlag = "S";// resultXml.Descendants().Descendants().ToList()[0].Value;
                        //model.Message = resultXml.Descendants().Descendants().ToList()[0].Value;
                        //model.PDFData = resultXml.Descendants().Descendants().ToList()[1].Value;

                        model.ExternalMessage = resultXml.Descendants().Descendants().ToList()[0].Value;
                        model.Message = resultXml.Descendants().Descendants().ToList()[1].Value;
                        model.PDFData = resultXml.Descendants().Descendants().ToList()[2].Value;
                        model.MsgFlag = resultXml.Descendants().Descendants().ToList()[3].Value;

                        string filename = model.CustomerID + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".pdf";
                        string path = Server.MapPath("~/selfbilling/userfile/");
                        var filepath = "/selfbilling/userfile/" + filename;
                        model.FilePath = filepath;

                        if (!Directory.Exists(path))
                        {
                            Directory.CreateDirectory(path);
                        }
                        byte[] PDFbytes = Convert.FromBase64String(model.PDFData);
                        System.IO.FileStream stream = new FileStream(path + filename, FileMode.CreateNew);
                        System.IO.BinaryWriter writer =
                            new BinaryWriter(stream);
                        writer.Write(PDFbytes, 0, PDFbytes.Length);
                        writer.Close();
                    }

                    return View(model);
                }
                if (!string.IsNullOrEmpty(cancelbutton))
                {
                    Session["IsRelease"] = true;
                    model.MeterReadingImagePath = "/selfbilling/meterimage/" + Session["MeterReadingImagePath"].ToString();

                    if (this.ModelState["MeterReadingImage"] != null && this.ModelState["MeterReadingImage"].Errors.Count > 0)
                        this.ModelState["MeterReadingImage"].Errors.Clear();

                    //get old meter reading and show
                    try
                    {
                        string meterReadingSaved = model.MeterReading.ToString();

                        string[] meterReadingBeforeAndAfterDecimal = meterReadingSaved.Split('.');
                        string beforeDecimal = meterReadingBeforeAndAfterDecimal.First();
                        string afterDecimal = "000";

                        if (meterReadingBeforeAndAfterDecimal.Length > 1)
                            afterDecimal = meterReadingBeforeAndAfterDecimal.Last();

                        beforeDecimal = beforeDecimal.PadLeft(5, '0');
                        afterDecimal = afterDecimal.PadRight(3, '0');

                        char[] ch = new char[beforeDecimal.Length];
                        char[] cha = new char[afterDecimal.Length];

                        // Copy character by character into array 
                        for (int i = 0; i < beforeDecimal.Length; i++)
                        {
                            ch[i] = beforeDecimal[i];
                        }

                        for (int i = 0; i < afterDecimal.Length; i++)
                        {
                            cha[i] = afterDecimal[i];
                        }

                        model.MeterReading1 = Convert.ToDecimal(ch[0].ToString());
                        model.MeterReading2 = Convert.ToDecimal(ch[1].ToString());
                        model.MeterReading3 = Convert.ToDecimal(ch[2].ToString());
                        model.MeterReading4 = Convert.ToDecimal(ch[3].ToString());
                        model.MeterReading5 = Convert.ToDecimal(ch[4].ToString());

                        model.MeterReading6 = Convert.ToDecimal(cha[0].ToString());
                        model.MeterReading7 = Convert.ToDecimal(cha[1].ToString());
                        model.MeterReading8 = Convert.ToDecimal(cha[2].ToString());
                    }
                    catch (Exception e)
                    {
                        Log.Error("Meter reaing get error " + e.Message, this);
                    }

                    model.IsRelease = true;
                    return View(model);
                }
                if (!string.IsNullOrEmpty(cancelReloadbutton))
                {
                    return RedirectPermanent(this.UserProfileService.GetPageURL(Templates.Pages.Selfbilling));
                }
            }
            catch (Exception ex)
            {
                model.IsSuccessful = false;
                Log.Error("Error at Adani Gas SelfBilling " + ex.Message, this);
                this.ModelState.AddModelError(nameof(model.MeterReadingImage), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Request error", "Reading is not submitted, please try again after some time."));
                return View(model);
            }
            return View(model);
        }

        //[HttpGet]
        //[RedirectUnAuthenticatedAdaniGas]
        //public ActionResult SubmitMeterReadingAdaniGas()
        //{
        //    if (SessionHelper.UserSession.AdaniGasUserSessionContext != null && SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerType != "9004")
        //    {
        //        return Redirect("/myaccount/png-dashboard");
        //    }

        //    MeterReadingAdaniGas model = new MeterReadingAdaniGas();
        //    model.CustomerID = SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID;
        //    model.MeterNumber = SessionHelper.UserSession.AdaniGasUserSessionContext.Meter_SerialNumber;

        //    //// Getting previous meter reading data
        //    WebAPIAdaniGas _webApiAdaniGas = new WebAPIAdaniGas();
        //    var response = _webApiAdaniGas.GetPreviousReading(SessionHelper.UserSession.AdaniGasUserSessionContext.Partner, SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID, SessionHelper.UserSession.AdaniGasUserSessionContext.Password);

        //    if (response != null)
        //    {
        //        var perviodReading = response.Descendants().FirstOrDefault(p => p.Name.LocalName == "PreviousMeterReading").Value;
        //        var decimalPoint = Convert.ToDecimal(perviodReading);
        //        var readingInDecimal = Math.Round((Double)decimalPoint, 2);
        //        model.PreviousMeterReading = readingInDecimal.ToString();

        //        //// Defining Format and Testing it via "DateTime.ToString(format)"
        //        string sourcedtformat = "yyyyMMddHHmm";
        //        string targetdtformat = "yyyy-MM-ddTHH:mm:ss";

        //        string MeterReadingdatetime = string.Concat(response.Descendants().FirstOrDefault(p => p.Name.LocalName == "PreviousMRDate").Value, response.Descendants().FirstOrDefault(p => p.Name.LocalName == "PreviousMRTime").Value);
        //        var outputDate = DateTime.ParseExact(MeterReadingdatetime, sourcedtformat, new System.Globalization.CultureInfo("en-US")).ToString(targetdtformat);
        //        model.PreviousMeterReadingDateandTime = outputDate;
        //    }

        //    return View(model);
        //}

        //[HttpPost]
        //[ValidateModel]
        //[ValidateRenderingId]
        //[ValidateAntiForgeryToken]
        //[RedirectUnAuthenticatedAdaniGas]
        //public ActionResult SubmitMeterReadingAdaniGas(MeterReadingAdaniGas model)
        //{
        //    try
        //    {
        //        if (!ModelState.IsValid)
        //        {
        //            return View(model);
        //        }
        //        DateTime dtMeaterReading = new DateTime();
        //        if (!string.IsNullOrEmpty(model.ReadingDateandTime))
        //        {
        //            if (!DateTime.TryParseExact(model.ReadingDateandTime, "dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture, DateTimeStyles.NoCurrentDateDefault, out dtMeaterReading))
        //            {
        //                this.ModelState.AddModelError(nameof(model.ReadingDateandTime), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/ValidDateofBirth", "Please enter valid date in dd/mm/yyyy format."));
        //                return View(model);
        //            }
        //            else
        //            {
        //                //// Defining Format and Testing it via "DateTime.ToString(format)"
        //                string format = "yyyy-MM-ddTHH:mm:ss";
        //                model.ReadingDateandTime = dtMeaterReading.ToString(format);

        //                var response = objWebAPIAdaniGas.PostCurrentMeterReading(model);
        //                if (response.IsSuccessful && !string.IsNullOrEmpty(response.Content))
        //                {
        //                    string jsonString = response.Content;

        //                    //// convert JSON text contained in string json into an XML node
        //                    var xml = XDocument.Load(JsonReaderWriterFactory.CreateJsonReader(Encoding.ASCII.GetBytes(jsonString), new XmlDictionaryReaderQuotas()));

        //                    IEnumerable<XElement> element = xml.Descendants().Where(p => p.Name.LocalName == "d").ToList();
        //                    //string Ev_Message = element.FirstOrDefault() != null ? element.Descendants().FirstOrDefault(p => p.Name.LocalName == "Ev_Message").Value : string.Empty;
        //                    model.ReadingDateandTime = string.Empty;
        //                    model.MeterReading = string.Empty;
        //                    model.ReturnViewMessage = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/MyAccount/SubmitMeterReadingSuccess", "Meter reading is submitted successfully.");
        //                    Session["UpdateMessage"] = new InfoMessage(DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Request Submitted Successfully", "Request Submitted Successfully."));
        //                    return Redirect(Request.RawUrl);
        //                }
        //                else if (response.StatusCode == HttpStatusCode.BadRequest)
        //                {
        //                    string jsonString = response.Content;

        //                    var xml = XDocument.Load(JsonReaderWriterFactory.CreateJsonReader(Encoding.ASCII.GetBytes(jsonString), new XmlDictionaryReaderQuotas()));

        //                    IEnumerable<XElement> element = xml.Descendants().Where(p => p.Name.LocalName == "message").ToList();
        //                    string Ev_Message = element.FirstOrDefault() != null ? element.Descendants().FirstOrDefault(p => p.Name.LocalName == "value").Value : string.Empty;
        //                    model.ReturnViewMessage = Ev_Message;
        //                }
        //                else
        //                {
        //                    model.ReturnViewMessage = response.StatusDescription;
        //                }
        //                return View(model);
        //            }
        //        }


        //    }
        //    catch (Exception ex)
        //    {
        //        Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
        //    }
        //    return Redirect(Request.RawUrl);
        //}

        #endregion

        #region EBill & SmsAlert

        [HttpGet]
        [RedirectUnAuthenticatedAdaniGas]
        public ActionResult RegisterForEBillAlertAdaniGas()
        {
            RegisterForEBillAlert model = new RegisterForEBillAlert();
            if (!WebAPIAdaniGas.IsUserLoggedIn())
            {
                string redirectUrl = GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated);
                return Redirect(redirectUrl);
            }
            model = objWebAPIAdaniGas.GetEBillReadEInvoiceSet(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
            return View(model);
        }

        [HttpPost]
        [ValidateModel]
        [ValidateRenderingId]
        [RedirectUnAuthenticatedAdaniGas]
        [ValidateAntiForgeryToken]
        public ActionResult RegisterForEBillAlertAdaniGas(RegisterForEBillAlert model)
        {
            try
            {
                RegisterForEBillAlert obj = new RegisterForEBillAlert();

                Session["UpdateMessage"] = null;
                if (!ModelState.IsValid)
                {
                    return View(model);
                }

                if (!validateCustomerID(model.CustomerID))
                {
                    Session["UpdateMessage"] = new InfoMessage(DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Request Submitted Fail", "Customer Id may be changed. Please try again. "));
                    Sitecore.Diagnostics.Log.Info("Customer Id may be changed.Please try again.", typeof(RegisterForEBillAlert));
                    return Redirect(Request.RawUrl);
                }

                Sitecore.Diagnostics.Log.Info("Requesting to change EInvoice_type", typeof(RegisterForEBillAlert));

                obj = objWebAPIAdaniGas.GetEBillUpdateEInvoiceSet(model);

                if (obj.Msg_Flag == "S")
                {
                    Session["UpdateMessage"] = new InfoMessage(DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Request Submitted Successfully", "Request Submitted Successfully."));
                    Sitecore.Diagnostics.Log.Info("EInvoice_type changed for-" + obj.CustomerID, typeof(RegisterForEBillAlert));
                    return Redirect(Request.RawUrl);
                }
                if (obj.Msg_Flag == "F")
                {
                    Session["UpdateMessage"] = new InfoMessage(DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Request Submitted Fail", "Request Not Submitted Please Try Again."));
                    Sitecore.Diagnostics.Log.Info("EInvoice_type Not changed" + obj.Message, typeof(RegisterForEBillAlert));
                    return Redirect(Request.RawUrl);
                }
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return Redirect(Request.RawUrl);
        }

        [HttpGet]
        [RedirectUnAuthenticatedAdaniGas]
        public ActionResult SmsAlertAdaniGas()
        {
            ViewBag.CustID = SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID;
            ViewBag.CustName = SessionHelper.UserSession.AdaniGasUserSessionContext.LoginName;

            ManageMobileAdaniGas model = objWebAPIAdaniGas.GetMobileNumbersList(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
            return View(model);
        }

        [HttpPost]
        [RedirectUnAuthenticatedAdaniGas]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        public ActionResult SmsAlertAdaniGas(ManageMobileAdaniGas model)
        {

            ManageMobileAdaniGas oldList = objWebAPIAdaniGas.GetMobileNumbersList(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
            model.IsError = false;
            foreach (var mobile in model.MobileNumbersList)
            {
                if (oldList.MobileNumbersList.Where(m => m.MobileNo == mobile.MobileNo).FirstOrDefault().Ischecked != mobile.Ischecked)
                {
                    string result = objWebAPIAdaniGas.RegisterSMSAlert(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID, mobile.MobileNo, mobile.Ischecked);
                    if (result != "success")
                    {
                        model.IsError = true;
                        model.Message += "Error in updating flag for:" + mobile.MobileNo + ", " + result + ". ";
                    }
                    else
                    {
                        model.Message += "Successfully updated flag for:" + mobile.MobileNo + ". ";
                    }
                }
            }
            if (model.IsError == false)
                Session["UpdateMessage"] = new InfoMessage("Submitted Successfully!");
            else
                Session["UpdateMessage"] = new InfoMessage(model.Message);
            return Redirect(Request.RawUrl);
        }

        #endregion

        #region ||** Change Passsword **||

        [HttpGet]
        [RedirectUnAuthenticatedAdaniGas]
        public ActionResult ChangePasswordAdaniGas()
        {
            return this.View("ChangePasswordAdaniGas", new ChangePasswordAdaniGas()
            {
                CustomerID = SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID
            });
        }

        [HttpPost]
        [RedirectUnAuthenticatedAdaniGas]
        [ValidateModel]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        public ActionResult ChangePasswordAdaniGas(ChangePasswordAdaniGas changePassword)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return this.View("ChangePasswordAdaniGas", new ChangePasswordAdaniGas()
                    {
                        CustomerID = SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID
                    });
                }
                if (!validateCustomerID(changePassword.CustomerID))
                {
                    return this.View("ChangePasswordAdaniGas", new ChangePasswordAdaniGas()
                    {
                        CustomerID = SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID
                    });
                }
                var response = objWebAPIAdaniGas.ChnagePassword(changePassword);
                var jsonString = response.Content;

                var xml = XDocument.Load(JsonReaderWriterFactory.CreateJsonReader(Encoding.ASCII.GetBytes(jsonString), new XmlDictionaryReaderQuotas()));

                string Ev_Message = xml.Descendants().FirstOrDefault(p => p.Name.LocalName == "Ev_Message").Value;
                string Ev_Message_flag = xml.Descendants().FirstOrDefault(p => p.Name.LocalName == "Ev_Msg_Flag").Value;

                if (Ev_Message_flag == "S")
                {
                    ClearedSession();
                    var SuccessUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.ChangePasswordThankU);
                    return this.Redirect(SuccessUrl);
                }
                else
                {
                    this.Session["UpdateMessage"] = new InfoMessage(Ev_Message);
                }
            }

            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at ChangePassword Post:" + ex.Message, this);
                this.Session["UpdateMessage"] = new InfoMessage(ex.Message);
            }
            return this.Redirect(this.Request.RawUrl);

        }

        #endregion

        #region ManageEmail

        [HttpGet]
        [RedirectUnAuthenticatedAdaniGas]
        public ActionResult ManageEmailAdaniGas()
        {
            if (!WebAPIAdaniGas.IsUserLoggedIn())
            {
                string redirectUrl = GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated);
                return Redirect(redirectUrl);
            }
            ManageEmailsAdaniGas model = objWebAPIAdaniGas.GetEmailList(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
            return View(model);
        }

        [HttpPost]
        [RedirectUnAuthenticatedAdaniGas]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        public ActionResult ManageEmailAdaniGas(ManageEmailsAdaniGas model)
        {
            ManageEmailsAdaniGas getEmails = objWebAPIAdaniGas.GetEmailList(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
            if (getEmails.EmailsList.Count >= 5)
            {
                Session["UpdateMessage"] = new InfoMessage(DictionaryPhraseRepository.Current.Get("/ManageMobileAdaniGas", "Max 5 email id's are allowed."));
                model = getEmails;
                return Redirect(Request.RawUrl);
            }
            if (!ModelState.IsValid)
            {
                model.EmailsList = getEmails.EmailsList;
                return View(model);
            }
            model = objWebAPIAdaniGas.RegisterEmail(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID, model.NewEmailAddress);
            if (model.IsError == false)
                Session["UpdateMessage"] = new InfoMessage(model.EmailsList.FirstOrDefault().Message);
            else
                Session["UpdateMessage"] = new InfoMessage(model.Message);
            model = getEmails;
            return Redirect(Request.RawUrl);
        }

        [HttpPost]
        public ActionResult DeleteEmailAdaniGas(string emailToDelete)
        {
            ManageEmailsAdaniGas model = objWebAPIAdaniGas.DeleteEmail(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID, emailToDelete);
            if (model.IsError == false)
                Session["UpdateMessage"] = new InfoMessage(model.EmailsList.FirstOrDefault().Message);
            else
                Session["UpdateMessage"] = new InfoMessage(model.Message);
            model = objWebAPIAdaniGas.GetEmailList(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
            return Json(new { data = model }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult ModifyEmailAdaniGas(string emailToUpdate, string newEmailID)
        {
            ManageEmailsAdaniGas model = objWebAPIAdaniGas.ModifyEmail(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID, emailToUpdate, newEmailID);
            if (model.IsError == false)
                Session["UpdateMessage"] = new InfoMessage(model.EmailsList.FirstOrDefault().Message);
            else
                Session["UpdateMessage"] = new InfoMessage(model.Message); model = objWebAPIAdaniGas.GetEmailList(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
            return Json(new { data = model }, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region ManageMobile

        [HttpGet]
        [RedirectUnAuthenticatedAdaniGas]

        public ActionResult ManageMobileAdaniGas()
        {
            ManageMobileAdaniGas model = objWebAPIAdaniGas.GetMobileNumbersList(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
            return View(model);
        }

        [HttpPost]
        [RedirectUnAuthenticatedAdaniGas]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        public ActionResult ManageMobileAdaniGas(ManageMobileAdaniGas model)
        {
            ManageMobileAdaniGas getMobileNumbers = objWebAPIAdaniGas.GetMobileNumbersList(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
            if (getMobileNumbers.MobileNumbersList.Count >= 5)
            {
                Session["UpdateMessage"] = new InfoMessage(DictionaryPhraseRepository.Current.Get("/ManageMobileAdaniGas", "Max 5 numbers are allowed."));
                model = getMobileNumbers;
                return Redirect(Request.RawUrl);
            }
            if (!ModelState.IsValid)
            {
                model.MobileNumbersList = getMobileNumbers.MobileNumbersList;
                return View(model);
            }
            model = objWebAPIAdaniGas.RegisterMobileNumber(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID, model.NewMobileNumber);
            if (model.IsError == false)
                Session["UpdateMessage"] = new InfoMessage(model.MobileNumbersList.FirstOrDefault().Message);
            else
                Session["UpdateMessage"] = new InfoMessage(model.Message);
            model = getMobileNumbers;
            return Redirect(Request.RawUrl);
        }

        [HttpPost]
        public ActionResult DeleteMobileAdaniGas(string mobileNumberToDelete)
        {
            ManageMobileAdaniGas model = objWebAPIAdaniGas.DeleteMobileNumber(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID, mobileNumberToDelete);
            if (model.IsError == false)
                Session["UpdateMessage"] = new InfoMessage(model.MobileNumbersList.FirstOrDefault().Message);
            else
                Session["UpdateMessage"] = new InfoMessage(model.Message);
            model = objWebAPIAdaniGas.GetMobileNumbersList(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
            return Json(new { data = model }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult ModifyMobileAdaniGas(string mobileNumberToUpdate, string newMobileNumber)
        {
            ManageMobileAdaniGas model = objWebAPIAdaniGas.ModifyMobileNumber(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID, mobileNumberToUpdate, newMobileNumber);
            if (model.IsError == false)
                Session["UpdateMessage"] = new InfoMessage(model.MobileNumbersList.FirstOrDefault().Message);
            else
                Session["UpdateMessage"] = new InfoMessage(model.Message);
            model = objWebAPIAdaniGas.GetMobileNumbersList(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
            return Json(new { data = model }, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region AdaniGasPayment

        #region PayOnline

        [HttpGet]
        [RedirectUnAuthenticatedAdaniGas]
        public ActionResult PayOnlineAdaniGas()
        {
            PayOnline model = new PayOnline();
            try
            {
                if (!WebAPIAdaniGas.IsUserLoggedIn())
                {
                    string redirectUrl = GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated);
                    return Redirect(redirectUrl);
                }
                model = objWebAPIAdaniGas.QuickPay(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);

                model.Current_Outstanding_Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? "00" : model.Current_Outstanding_Amount;
                ViewBag.totalamt = model.Amount;
                model.Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? 0 : Convert.ToDouble(model.Current_Outstanding_Amount) > 0 ? Convert.ToDouble(model.Current_Outstanding_Amount) : 0;

                return View(model);
            }
            catch (Exception ex)
            {
                ViewBag.ErrorMessgage = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time.");
                Sitecore.Diagnostics.Log.Error("Error at ViewPayBill Get:" + ex.Message, this);
            }
            return View(model);
        }

        [HttpPost]
        [RedirectUnAuthenticatedAdaniGas]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        public ActionResult PayOnlineAdaniGas(PayOnline model)
        {
            if (!ModelState.IsValid)
            {
                model = objWebAPIAdaniGas.QuickPay(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
                model.Current_Outstanding_Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? "00" : model.Current_Outstanding_Amount;
                ViewBag.totalamt = model.Amount;
                model.Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? 0 : Convert.ToDouble(model.Current_Outstanding_Amount) > 0 ? Convert.ToDouble(model.Current_Outstanding_Amount) : 0;
                return View(model);
            }

            if (model.Amount.ToString().Any(char.IsLetter))
            {
                this.ModelState.AddModelError("Amount", DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/InvalidAmount", "Invalid payable amount value. character is not allowed."));
                model = objWebAPIAdaniGas.QuickPay(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
                model.Current_Outstanding_Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? "00" : model.Current_Outstanding_Amount;
                ViewBag.totalamt = model.Amount;
                model.Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? 0 : Convert.ToDouble(model.Current_Outstanding_Amount) > 0 ? Convert.ToDouble(model.Current_Outstanding_Amount) : 0;
                return this.View(model);
            }
            else if (Convert.ToDecimal(model.Amount) <= 0)
            {
                this.ModelState.AddModelError("Amount", DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/AmountNegativeValidation", "You have not enter proper payable amount."));
                model = objWebAPIAdaniGas.QuickPay(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
                model.Current_Outstanding_Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? "00" : model.Current_Outstanding_Amount;
                ViewBag.totalamt = model.Amount;
                model.Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? 0 : Convert.ToDouble(model.Current_Outstanding_Amount) > 0 ? Convert.ToDouble(model.Current_Outstanding_Amount) : 0;
                return this.View(model);
            }
            else if (!validateCustomerID(model.CustomerID))
            {
                this.ModelState.AddModelError("Amount", DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/AmountNegativeValidation", "Customer Id may be changed. Please try again."));
                model = objWebAPIAdaniGas.QuickPay(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
                model.Current_Outstanding_Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? "00" : model.Current_Outstanding_Amount;
                ViewBag.totalamt = model.Amount;
                model.Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? 0 : Convert.ToDouble(model.Current_Outstanding_Amount) > 0 ? Convert.ToDouble(model.Current_Outstanding_Amount) : 0;
                return this.View(model);
            }

            model.CustomerID = SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID;
            model.PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "Bill Paid");
            model.CustomerType = SessionHelper.UserSession.AdaniGasUserSessionContext.userType;
            model.UserType = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/RegisteredUser", "Registered");

            try
            {
                switch (model.PaymentGateway)
                {
                    case (int)EnumPayment.GatewayType.PayUMoney:
                        PaymentService.StorePaymentRequestAdaniGas(model);
                        string payUHTML = PaymentService.PayUMoneyTransactionRequestAPIAdaniGasRequestPost(model);
                        return Content(payUHTML);

                    case (int)EnumPayment.GatewayType.BillDesk:
                        PaymentService.StorePaymentRequestAdaniGas(model);
                        string RequestHTML = PaymentService.BillDeskTransactionRequestAPIRequestAdaniGasPost(model);
                        return Content(RequestHTML);
                    case (int)EnumPayment.GatewayType.Paytm:
                        PaymentService.StorePaymentRequestAdaniGas(model);
                        string outputHTML = PaymentService.PaytmTransactionRequestAPIRequestAdaniGasPost(model);
                        return Content(outputHTML);
                    case (int)EnumPayment.GatewayType.HDFC:
                        PaymentService.StorePaymentRequestAdaniGas(model);
                        string ReqHTML = PaymentService.HDFCTransactionRequestAPIRequestAdaniGasPost(model);
                        return Content(ReqHTML);
                    default:
                        break;
                }
                Session["UpdateMessage"] = new InfoMessage(DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Submitted Successfully", "Submitted Successfully."));
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at PayOnlineAdaniGas Post:" + ex.Message, this);
            }
            return Redirect(Request.RawUrl);
        }

        #endregion

        #region AdvancePaymentAdaniGas

        [HttpGet]
        [RedirectUnAuthenticatedAdaniGas]
        public ActionResult AdvancePaymentAdaniGas()
        {
            PayOnline model = new PayOnline();
            try
            {
                if (!WebAPIAdaniGas.IsUserLoggedIn())
                {
                    string redirectUrl = GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated);
                    return Redirect(redirectUrl);
                }
                model = objWebAPIAdaniGas.QuickPay(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
                //model.AdvanceAmount = 0;
                return View(model);
            }
            catch (Exception ex)
            {
                ViewBag.ErrorMessgage = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time.");
                Sitecore.Diagnostics.Log.Error("Error at AdvancePaymentAdaniGas Get:" + ex.Message, this);
            }
            return View(model);
        }

        [HttpPost]
        [RedirectUnAuthenticatedAdaniGas]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        public ActionResult AdvancePaymentAdaniGas(PayOnline model)
        {
            if (!ModelState.IsValid)
            {
                model = objWebAPIAdaniGas.QuickPay(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
                return View(model);
            }
            else if (model.AdvanceAmount <= 0)
            {
                this.ModelState.AddModelError("AdvanceAmount", DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/AmountNegativeValidation", "Please enter proper amount."));
                model = objWebAPIAdaniGas.QuickPay(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
                return View(model);
            }
            else if (!validateCustomerID(model.CustomerID))
            {
                this.ModelState.AddModelError("AdvanceAmount", DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/AmountNegativeValidation", "Customer Id may be changed. Please try again."));
                model = objWebAPIAdaniGas.QuickPay(SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID);
                return View(model);
            }

            model.CustomerID = SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID;
            model.PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Advance Bill Paid", "Advance Bill Paid");
            model.CustomerType = SessionHelper.UserSession.AdaniGasUserSessionContext.userType;
            model.UserType = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/RegisteredUser", "Registered");


            try
            {
                switch (model.PaymentGateway)
                {
                    case (int)EnumPayment.GatewayType.PayUMoney:
                        PaymentService.StorePaymentRequestAdaniGas(model);
                        string payUHTML = PaymentService.PayUMoneyTransactionRequestAPIAdaniGasRequestPost(model);
                        return Content(payUHTML);
                    case (int)EnumPayment.GatewayType.BillDesk:
                        PaymentService.StorePaymentRequestAdaniGas(model);
                        string RequestHTML = PaymentService.BillDeskTransactionRequestAPIRequestAdaniGasPost(model);
                        return Content(RequestHTML);
                    case (int)EnumPayment.GatewayType.Paytm:
                        PaymentService.StorePaymentRequestAdaniGas(model);
                        string outputHTML = PaymentService.PaytmTransactionRequestAPIRequestAdaniGasPost(model);
                        return Content(outputHTML);
                    case (int)EnumPayment.GatewayType.HDFC:
                        PaymentService.StorePaymentRequestAdaniGas(model);
                        string ReqHTML = PaymentService.HDFCTransactionRequestAPIRequestAdaniGasPost(model);
                        return Content(ReqHTML);
                    default:
                        break;
                }
                Session["UpdateMessage"] = new InfoMessage(DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Submitted Successfully", "Submitted Successfully."));
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at AdvancePaymentAdaniGas Post:" + ex.Message, this);
            }
            return Redirect(Request.RawUrl);
        }

        #endregion

        #region Self-Billing

        public SelfBillingAdaniGas GetMeterReadingDetails(string CustomerID)
        {

            SelfBillingAdaniGas model = new SelfBillingAdaniGas();
            try
            {
                WebAPIAdaniGas _webApiAdaniGas = new WebAPIAdaniGas();
                var response = _webApiAdaniGas.GetPreviousReadingSelfBilling(CustomerID);

                if (response != null)
                {
                    StringReader stringReader = new StringReader(response.ToString());
                    using (XmlReader reader = XmlReader.Create(stringReader))
                    {
                        while (reader.Read())
                        {
                            if (reader.IsStartElement())
                            {
                                switch (reader.Name.ToString())
                                {
                                    case "d:CustomerId":
                                        model.CustomerID = reader.ReadString();
                                        break;
                                    case "d:NAME":
                                        model.CustomerName = reader.ReadString();
                                        break;
                                    case "d:ADDRESS":
                                        model.CustomerAddress = reader.ReadString();
                                        break;
                                    case "d:pmeter_date":
                                        model.PreviousMeterReadingDateandTime = reader.ReadString();
                                        break;
                                    case "d:pmeter_read":
                                        model.PreviousMeterReading = reader.ReadString();
                                        break;
                                    case "d:FLAG":
                                        model.MsgFlag = reader.ReadString();
                                        break;
                                    case "d:VERTRAG":
                                        model.CONTRACTNO = reader.ReadString();
                                        break;
                                    case "d:mr_doc":
                                        model.MRIDNUMBER = reader.ReadString();
                                        break;
                                    case "d:MATNR":
                                        model.DEV_CAT = reader.ReadString();
                                        break;
                                    case "d:SERGE":
                                        if (!string.IsNullOrEmpty(reader.ReadString()))
                                            model.MeterNumber = reader.ReadString();
                                        break;
                                    case "d:SERNR":
                                        if (string.IsNullOrEmpty(model.MeterNumber))
                                            model.MeterNumber = reader.ReadString();
                                        model.SERNR = model.MeterNumber;
                                        break;
                                    case "d:ISTABLART":
                                        model.ISTABLART = reader.ReadString();
                                        break;
                                    case "d:nx_sch_date":
                                        model.NextMeterReadingDateandTime = reader.ReadString();
                                        break;
                                    case "d:BpNo":
                                        model.BusinessPartnerNumber = reader.ReadString();
                                        break;
                                    case "d:PlantCode":
                                        model.CityCode = reader.ReadString();
                                        break;
                                    case "d:PlantName":
                                        model.CityName = reader.ReadString();
                                        break;
                                }
                            }
                        }
                    }

                    var perviodReading = model.PreviousMeterReading;
                    var decimalPoint = Convert.ToDecimal(perviodReading);
                    var readingInDecimal = Math.Round((Double)decimalPoint, 2);
                    model.PreviousMeterReading = readingInDecimal.ToString();
                }
            }
            catch (Exception e)
            {
                Log.Error("Error at GetMeterReadingDetails " + e.Message, this);
            }
            return model;
        }

        [HttpGet]
        public ActionResult SelfBilling()
        {
            Session["IsRelease"] = null;
            Session["MeterReadingImagePath"] = null;
            Session["CapturedImage"] = null;
            SelfBillingAdaniGas model = new SelfBillingAdaniGas();

            if (Session["Cust_id"] != null)
            {
                model.CustomerID = Session["Cust_id"].ToString();
                Session["Cust_id"] = null;
                try
                {
                    model = GetMeterReadingDetails(model.CustomerID);
                    Sitecore.Diagnostics.Log.Info("Selfbilling detatil's succefully Get:" + model.CustomerID, this);
                    return View(model);
                }
                catch (Exception ex)
                {
                    ViewBag.NoInfo = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time.");
                    Sitecore.Diagnostics.Log.Error("Error at ViewPayBill Get:" + ex.Message, this);
                }
                return View(model);
            }
            else if (Request.QueryString["cust_id"] != null)
            {
                string EncryptedcustomerID = Request.QueryString["cust_id"];
                string EncryptionKey = DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/EncryptionKey", "Tl;jld@456763909QPwOeiRuTy873XY7");
                string EncryptionIV = DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/EncryptionIV", "CEIVRAJWquG8iiMw");

                string id = "1000370003";
                string enc = HttpUtility.UrlEncode(AES_EncryptDecrypt.EncryptString(EncryptionKey, id, EncryptionIV));
                string DecryptedcustomerID = AES_EncryptDecrypt.DecryptString(EncryptionKey, EncryptedcustomerID, EncryptionIV);

                model.CustomerID = DecryptedcustomerID;// "1000370003";// DecryptedcustomerID;
                Session["Cust_id"] = model.CustomerID;
                try
                {
                    model = GetMeterReadingDetails(DecryptedcustomerID);
                    Sitecore.Diagnostics.Log.Info("Selfbilling  get meterRedaing detatil's succefully Get:" + model.CustomerID , this);
                    return View(model);
                }
                catch (Exception ex)
                {
                    ViewBag.NoInfo = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time.");
                    Sitecore.Diagnostics.Log.Error("Error at ViewPayBill Get:" + ex.Message, this);
                }
                return View(model);
            }
            else
            {
            }
            ViewBag.NoInfo = "Please provide customer Id to fetch information.";
            return View(model);
        }

        [HttpPost]
        public ActionResult SelfBilling(SelfBillingAdaniGas model, string submitbutton = null, string okbutton = null, string cancelbutton = null, string cancelReloadbutton = null, string GetCustomerDetails = null, string ValidateOTP = null, string ResendOTP = null)
        {
            try
            {
                if (!string.IsNullOrEmpty(GetCustomerDetails))
                {
                    if (!this.IsCaptchaValid("Captcha Validation Required."))
                    {
                        ViewBag.NoInfo = "Please provide Captcha and try again!";
                        ModelState.AddModelError(nameof(model.Captcha), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Captcha required", "Captcha Validation Required."));
                        return this.View(model);
                    }
                    try
                    {

                        var CustomerInfo = objWebAPIAdaniGas.QuickPay(model.CustomerID);

                        if (CustomerInfo != null & CustomerInfo.Partner_Type != "9004")
                        {
                            model.IsvalidatAccount = true;
                            this.ModelState.AddModelError(nameof(model.CustomerID), DictionaryPhraseRepository.Current.Get("/Accounts/AGL SelfBilling/Non Domestic Issue", "This service is currently available for domestic connections only."));
                            return this.View(model);
                        }

                        if (!string.IsNullOrEmpty(CustomerInfo.Mobile))
                        {
                            WebAPIAdaniGas wbAGl = new WebAPIAdaniGas();
                            var MobileNo = AES_EncryptDecrypt.DecryptString(wbAGl.EncryptionKey, CustomerInfo.Mobile, wbAGl.EncryptionIV);
                            AdaniGasENachRegistrationModel registrationInfo = new AdaniGasENachRegistrationModel();
                            registrationInfo.MobileNo = MobileNo;
                            registrationInfo.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");

                            var sendOTP = objWebAPIAdaniGas.ENachSendOtp(registrationInfo);
                            if (sendOTP.IsError)
                            {
                                //ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP sending Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message);
                                this.ModelState.AddModelError(nameof(model.CustomerID), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP sending Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message));

                                model.IsOTPSent = false;
                                model.IsvalidatAccount = true;
                                //Session["Cust_id"] = registrationInfo.CustomerID;
                                Log.Error("Self billing OTP error: " + sendOTP.Message??"", this);
                                return this.View(model);
                            }
                            else if (sendOTP.MessageFlag.ToLower() == "s")
                            {
                                model.IsOTPSent = true;
                                model.IsvalidatAccount = true;
                                model.Message = sendOTP.Message;
                                //Session["CustID"] = registrationInfo.CustomerID;
                                //TempData["CustID"] = registrationInfo.CustomerID;
                                return this.View(model);
                            }
                            else if (sendOTP.MessageFlag.ToLower() == "f")
                            {
                                model.IsOTPSent = false;
                                model.IsvalidatAccount = true;
                                this.ModelState.AddModelError(nameof(model.CustomerID), sendOTP.Message);
                                model.Message = sendOTP.Message;
                                //Session["CustID"] = registrationInfo.CustomerID;
                                //TempData["CustID"] = registrationInfo.CustomerID;
                                return this.View(model);
                            }
                            else
                            {
                                this.ModelState.AddModelError(nameof(model.CustomerID), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP failed Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message));
                                model.IsOTPSent = false;
                                model.IsvalidatAccount = true;
                                return this.View(model);
                            }
                        }
                        else
                        {
                            model.IsvalidatAccount = true;
                            this.ModelState.AddModelError(nameof(model.CustomerID), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/API Issue", "There is some issue in fetching your data. Please try after some time.") + CustomerInfo.Message);
                            return this.View(model);

                        }
                    }
                    catch (Exception ex)
                    {
                        ViewBag.NoInfo = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time.");
                        this.ModelState.AddModelError(nameof(model.CustomerID), DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time."));
                        Sitecore.Diagnostics.Log.Error("Error at ViewPayBill Get:" + ex.Message, this);
                    }
                    return View(model);
                }
                if (!string.IsNullOrEmpty(ResendOTP))
                {
                    var CustomerInfo = objWebAPIAdaniGas.QuickPay(model.CustomerID);
                    if (!string.IsNullOrEmpty(CustomerInfo.Mobile))
                    {
                        WebAPIAdaniGas wbAGl = new WebAPIAdaniGas();
                        var MobileNo = AES_EncryptDecrypt.DecryptString(wbAGl.EncryptionKey, CustomerInfo.Mobile, wbAGl.EncryptionIV);
                        AdaniGasENachRegistrationModel registrationInfo = new AdaniGasENachRegistrationModel();
                        registrationInfo.MobileNo = MobileNo;
                        registrationInfo.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");

                        var sendOTP = objWebAPIAdaniGas.ENachSendOtp(registrationInfo);
                        if (sendOTP.IsError)
                        {
                            //ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP sending Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message);
                            this.ModelState.AddModelError(nameof(model.CustomerID), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP sending Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message));

                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            //Session["Cust_id"] = registrationInfo.CustomerID;
                            return this.View(model);
                        }
                        else if (sendOTP.MessageFlag.ToLower() == "s")
                        {
                            model.IsOTPSent = true;
                            model.IsvalidatAccount = true;
                            model.Message = sendOTP.Message;
                            model.ResendDisable = "Yes";
                            //Session["CustID"] = registrationInfo.CustomerID;
                            //TempData["CustID"] = registrationInfo.CustomerID;
                            return this.View(model);
                        }
                        else if (sendOTP.MessageFlag.ToLower() == "f")
                        {
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            this.ModelState.AddModelError(nameof(model.CustomerID), sendOTP.Message);
                            model.Message = sendOTP.Message;
                            //Session["CustID"] = registrationInfo.CustomerID;
                            //TempData["CustID"] = registrationInfo.CustomerID;
                            return this.View(model);
                        }
                        else
                        {
                            this.ModelState.AddModelError(nameof(model.CustomerID), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP failed Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message));
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            return this.View(model);
                        }
                    }
                    else
                    {
                        model.IsvalidatAccount = true;
                        this.ModelState.AddModelError(nameof(model.CustomerID), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/API Issue", "There is some issue in fetching your data. Please try after some time.") + CustomerInfo.Message);
                        return this.View(model);

                    }
                }
                if (!string.IsNullOrEmpty(ValidateOTP))
                {
                    var CustomerInfo = objWebAPIAdaniGas.QuickPay(model.CustomerID);
                    WebAPIAdaniGas wbAGl = new WebAPIAdaniGas();
                    var MobileNo = AES_EncryptDecrypt.DecryptString(wbAGl.EncryptionKey, CustomerInfo.Mobile, wbAGl.EncryptionIV);

                    var isOtpValid = objWebAPIAdaniGas.EnachValidateOtp(MobileNo, model.OTPNumber);
                    if (isOtpValid.Msg_Flag == "S")
                    {
                        Session["Cust_id"] = model.CustomerID;
                        return RedirectPermanent(this.UserProfileService.GetPageURL(Templates.Pages.Selfbilling));
                    }
                    else if (isOtpValid.Msg_Flag == "F")
                    {
                        this.ModelState.AddModelError(nameof(model.OTPNumber), isOtpValid.Message);
                        //model.Message = isOtpValid.Message;
                        model.IsOTPSent = true;
                        model.IsOTPValid = false;
                        return this.View(model);
                    }
                    else
                    {
                        //model.Message = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP Invalid Issue", "There is some issue in validating OTP. Please try after some time. " + isOtpValid.Message);
                        this.ModelState.AddModelError(nameof(model.OTPNumber), isOtpValid.Message);
                        model.IsOTPSent = true;
                        model.IsOTPValid = false;
                        return this.View(model);
                    }
                }
                if (!string.IsNullOrEmpty(submitbutton))
                {
                    if (Session["IsRelease"] != null)
                    {
                        model.IsRelease = (bool)Session["IsRelease"];
                    }
                    string EncryptionKey = DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/EncryptionKey", "Tl;jld@456763909QPwOeiRuTy873XY7");
                    string EncryptionIV = DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/EncryptionIV", "CEIVRAJWquG8iiMw");

                    string enc = HttpUtility.UrlEncode(AES_EncryptDecrypt.EncryptString(EncryptionKey, "", EncryptionIV));

                    string ip = WebAPIAdaniGas.GetIPAddress();
                    byte[] time = BitConverter.GetBytes(DateTime.UtcNow.ToBinary());
                    byte[] key = Guid.NewGuid().ToByteArray();
                    byte[] ipdata = Encoding.ASCII.GetBytes(ip);
                    var TOKEN = Convert.ToBase64String(time.Concat(ipdata).Concat(key).ToArray());
                    Sitecore.Diagnostics.Log.Info("Selfbilling Token POST:" + TOKEN+"|"+ ip, this);
                    byte[] bytes;
                    string image = "";
                    if (!model.IsRelease)
                    {
                        //file is mandatory to upload
                        if (model.MeterReadingImage == null && Session["CapturedImage"] == null)
                        {
                            model.IsSuccessful = false;
                            return View(model);
                        }
                        else if (model.MeterReading1 == 0 && model.MeterReading2 == 0 && model.MeterReading3 == 0 && model.MeterReading4 == 0 && model.MeterReading5 == 0&& model.MeterReading6 ==0 && model.MeterReading7 == 0)
                        {
                            this.ModelState.AddModelError(nameof(model.MeterReading), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Reading error", "Please insert correct reading."));
                            model.IsSuccessful = false;
                            return View(model);
                        }
                        else
                        {
                            if (Session["CapturedImage"] != null && model.MeterReadingImage == null)
                            {
                                model.MeterReadingImagePath = Session["CapturedImage"].ToString();
                                Sitecore.Diagnostics.Log.Info("Selfbilling Uploaded Image path POST1:" + model.MeterReadingImagePath, this);
                                FileStream fs1 = new FileStream(model.MeterReadingImagePath, FileMode.Open, FileAccess.Read);
                                bytes = new byte[fs1.Length];
                                image = Convert.ToBase64String(bytes);

                                Session["MeterReadingImagePath"] = model.MeterReadingImagePath;
                            }
                            else
                            {
                                Stream fs = model.MeterReadingImage.InputStream;
                                BinaryReader br = new BinaryReader(fs);
                                bytes = br.ReadBytes((Int32)fs.Length);
                                image = Convert.ToBase64String(bytes);

                                //save image file for release
                                string meterimage_filename = model.CustomerID + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + System.IO.Path.GetExtension(model.MeterReadingImage.FileName);
                                string meterimage_path = Server.MapPath("~/selfbilling/meterimage/");
                                var meterimage_filepath = "/selfbilling/meterimage/" + meterimage_filename;
                                model.MeterReadingImagePath = meterimage_filename;
                                Sitecore.Diagnostics.Log.Info("Selfbilling Uploaded Image path POST2:" + model.MeterReadingImagePath, this);
                                Session["MeterReadingImagePath"] = model.MeterReadingImagePath;

                                if (!Directory.Exists(meterimage_path))
                                {
                                    Directory.CreateDirectory(meterimage_path);
                                }
                                System.IO.FileStream stream = new FileStream(meterimage_path + meterimage_filename, FileMode.CreateNew);
                                System.IO.BinaryWriter writer =
                                    new BinaryWriter(stream);
                                writer.Write(bytes, 0, bytes.Length);
                                writer.Close();
                            }
                        }
                    }
                    else
                    {
                        //previous file to be send if user has not chosssen any new file
                        if (model.MeterReadingImage == null)
                        {
                            if (Session["MeterReadingImagePath"] == null)
                            {
                                model.IsSuccessful = false;
                                return View(model);
                            }
                            model.MeterReadingImagePath = Server.MapPath("~/selfbilling/meterimage/") + Session["MeterReadingImagePath"].ToString();
                            Sitecore.Diagnostics.Log.Info("Selfbilling Uploaded Image path POST3:" + model.MeterReadingImagePath, this);
                            FileStream fs = new FileStream(model.MeterReadingImagePath, FileMode.Open, FileAccess.Read);
                            bytes = new byte[fs.Length];
                            image = Convert.ToBase64String(bytes);
                        }
                        else
                        {
                            Stream fs = model.MeterReadingImage.InputStream;
                            BinaryReader br = new BinaryReader(fs);
                            bytes = br.ReadBytes((Int32)fs.Length);
                            image = Convert.ToBase64String(bytes);

                            //save image file for release
                            string meterimage_filename = model.CustomerID + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + System.IO.Path.GetExtension(model.MeterReadingImage.FileName);
                            string meterimage_path = Server.MapPath("~/selfbilling/meterimage/");
                            var meterimage_filepath = "/selfbilling/meterimage/" + meterimage_filename;
                            model.MeterReadingImagePath = meterimage_filename;
                            Sitecore.Diagnostics.Log.Info("Selfbilling Uploaded Image path POST4:" + model.MeterReadingImagePath, this);
                            Session["MeterReadingImagePath"] = model.MeterReadingImagePath;

                            if (!Directory.Exists(meterimage_path))
                            {
                                Directory.CreateDirectory(meterimage_path);
                            }
                            System.IO.FileStream stream = new FileStream(meterimage_path + meterimage_filename, FileMode.CreateNew);
                            System.IO.BinaryWriter writer =
                                new BinaryWriter(stream);
                            writer.Write(bytes, 0, bytes.Length);
                            writer.Close();
                        }
                    }

                    var prevMeterReading = model.PreviousMeterReading;
                    var preMeterReadingDateandTime = model.PreviousMeterReadingDateandTime;
                    var preISTABLART = model.ISTABLART;
                    Sitecore.Diagnostics.Log.Info("Selfbilling prevMeterReading datetime preISTABLART POST:" + prevMeterReading + "|" + preMeterReadingDateandTime + "|" + preISTABLART, this);
                    SelfBillingAdaniGas details = GetMeterReadingDetails(model.CustomerID);
                    Sitecore.Diagnostics.Log.Info("Selfbilling GetMeterReadingDetails success", this);
                    if (prevMeterReading != null && model.IsRelease)
                    {
                        details.ISTABLART = preISTABLART;
                        details.PreviousMeterReading = prevMeterReading;
                        details.PreviousMeterReadingDateandTime = preMeterReadingDateandTime;
                        Sitecore.Diagnostics.Log.Info("Selfbilling prevMeterReading is Release:" + model.IsRelease.ToString(), this);
                    }

                    string finalMeterReading = model.MeterReading1.ToString() + model.MeterReading2.ToString() + model.MeterReading3.ToString() + model.MeterReading4.ToString() + model.MeterReading5.ToString() + "." + model.MeterReading6.ToString() + model.MeterReading7.ToString() + model.MeterReading8.ToString();
                    Sitecore.Diagnostics.Log.Info("Selfbilling Final Meter Reading POST:" + finalMeterReading, this);
                    model.MeterReading = Convert.ToDecimal(finalMeterReading);



                    if (details.ISTABLART == "01" || details.ISTABLART == "02")
                    {
                        decimal preReading = Convert.ToDecimal(details.PreviousMeterReading);
                        decimal newReading = Convert.ToDecimal(model.MeterReading);
                        if (preReading > newReading)
                        {
                            this.ModelState.AddModelError(nameof(model.MeterReading), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Reading error", "Meter reading entered by you is lower than previous reading, please correct."));
                            Sitecore.Diagnostics.Log.Info("Selfbilling preReading > newReading POST:", this);
                            return View(model);
                        }
                    }

                    string mode = "INSERT";
                    if (model.IsRelease)
                        mode = "UPDATE";
                    Sitecore.Diagnostics.Log.Info("Selfbilling mode POST:" + mode, this);
                    SelfBillingRequest request1 = new SelfBillingRequest
                    {
                        MODE = AES_EncryptDecrypt.EncryptString(EncryptionKey, mode, EncryptionIV),
                        CONTRACTACCOUNT = AES_EncryptDecrypt.EncryptString(EncryptionKey, model.CustomerID, EncryptionIV),
                        DEVICE = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.SERNR, EncryptionIV),
                        MRRESULT = AES_EncryptDecrypt.EncryptString(EncryptionKey, model.MeterReading.ToString(), EncryptionIV),
                        METERIMAGE = AES_EncryptDecrypt.EncryptString(EncryptionKey, image, EncryptionIV),
                        Token = AES_EncryptDecrypt.EncryptString(EncryptionKey, TOKEN, EncryptionIV),
                        MRDATE = AES_EncryptDecrypt.EncryptString(EncryptionKey, DateTime.Now.ToString("yyyy-MM-dd"), EncryptionIV),
                        MRTIME = AES_EncryptDecrypt.EncryptString(EncryptionKey, DateTime.Now.ToString("hhmm"), EncryptionIV),
                        MRIDNUMBER = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.MRIDNUMBER, EncryptionIV),
                        PARTNERNAME = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.CustomerName, EncryptionIV),
                        CONTRACTNO = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.CONTRACTNO, EncryptionIV),
                        SHMRDATE = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.NextMeterReadingDateandTime, EncryptionIV),
                        PRV_MR_DATE = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.PreviousMeterReadingDateandTime, EncryptionIV),
                        PRV_RESULT = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.PreviousMeterReading, EncryptionIV),
                        DEV_CAT = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.DEV_CAT, EncryptionIV)
                    };
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 MODE POST:"+ mode + "|" + request1.MODE, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 CONTRACTACCOUNT POST:" + model.CustomerID + "|" + request1.CONTRACTACCOUNT, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 DEVICE POST:" + details.SERNR + "|" + request1.DEVICE, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 MRRESULT POST:" + model.MeterReading.ToString() + "|" + request1.MRRESULT, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 METERIMAGE POST:" + image + "|" + request1.METERIMAGE, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 Token POST:" + TOKEN + "|" + request1.Token, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 MRDATE POST:" + DateTime.Now.ToString("yyyy-MM-dd") + "|" + request1.MRDATE, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 MRTIME POST:" + DateTime.Now.ToString("hhmm") + "|" + request1.MRTIME, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 MRIDNUMBER POST:" + details.MRIDNUMBER + "|" + request1.MRIDNUMBER, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 PARTNERNAME POST:" + details.CustomerName + "|" + request1.PARTNERNAME, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 CONTRACTNO POST:" + details.CONTRACTNO + "|" + request1.CONTRACTNO, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 SHMRDATE POST:" + details.NextMeterReadingDateandTime + "|" + request1.SHMRDATE, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 PRV_MR_DATE POST:" + details.PreviousMeterReadingDateandTime + "|" + request1.PRV_MR_DATE, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 PRV_RESULT POST:" + details.PreviousMeterReading + "|" + request1.PRV_RESULT, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 DEV_CAT POST:" + details.DEV_CAT + "|" + request1.DEV_CAT, this);

                    model.MRIDNUMBER = details.MRIDNUMBER;
                    var serializedObj = JsonConvert.SerializeObject(request1);
                    Sitecore.Diagnostics.Log.Info("Selfbilling Request JSON POST:" + serializedObj, this);
                    //var client = new RestClient("https://apps.adani.com/QASpotBillingServices/ApplicationService.svc/Web/SelfMeterReading");
                    var client = new RestClient(DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/SpotBillingService_SelfBilling", "https://apps.adani.com/QASpotBillingServices/ApplicationService.svc/Web/SelfMeterReading"));


                    client.Timeout = -1;
                    var request = new RestRequest(Method.POST);
                    request.AddHeader("Content-Type", "application/json");
                    request.AddParameter("application/json", serializedObj, ParameterType.RequestBody);
                    Sitecore.Diagnostics.Log.Info("Selfbilling Sending Request POST:", this);
                    IRestResponse response = client.Execute(request);
                    Sitecore.Diagnostics.Log.Info("Selfbilling Response Received JSON POST:" + response.Content??"NULL", this);
                    if (response.IsSuccessful)
                    {
                        model.IsSuccessful = true;
                        Sitecore.Diagnostics.Log.Info("Selfbilling Response Received Response Successful:" + response.Content ?? "NULL", this);

                        var resultXml = XElement.Parse(response.Content);


                        //model.MsgFlag = "S";// resultXml.Descendants().Descendants().ToList()[0].Value;
                        model.ExternalMessage = resultXml.Descendants().Descendants().ToList()[0].Value;
                        model.Message = resultXml.Descendants().Descendants().ToList()[1].Value;
                        model.PDFData = resultXml.Descendants().Descendants().ToList()[2].Value;
                        model.MsgFlag = resultXml.Descendants().Descendants().ToList()[3].Value;

                        if (model.MsgFlag == "S" && !string.IsNullOrEmpty(model.PDFData))
                        {
                            string filename = model.CustomerID + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".pdf";
                            string path = Server.MapPath("~/selfbilling/userfile/");
                            var filepath = "/selfbilling/userfile/" + filename;
                            model.FilePath = filepath;

                            if (!Directory.Exists(path))
                            {
                                Directory.CreateDirectory(path);
                            }
                            byte[] PDFbytes = Convert.FromBase64String(model.PDFData);
                            System.IO.FileStream stream1 = new FileStream(path + filename, FileMode.CreateNew);
                            System.IO.BinaryWriter writer1 =
                                new BinaryWriter(stream1);
                            writer1.Write(PDFbytes, 0, PDFbytes.Length);
                            writer1.Close();
                        }
                        else if(model.MsgFlag == "E")
                        {
                            model.IsSuccessful = false;
                            Log.Error("Response E at Adani Gas SelfBilling API: " + model.Message??"", this);
                            this.ModelState.AddModelError(nameof(model.MeterReadingImage), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Response API error", model.ExternalMessage?? "Error in Self-Billing. Please contact our customer care. Sorry for inconvenience caused."));
                            return View(model);
                        }
                    }

                    return View(model);
                }
                if (!string.IsNullOrEmpty(okbutton))
                {
                    Session["IsRelease"] = true;
                    model.IsRelease = true;
                    string EncryptionKey = DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/EncryptionKey", "Tl;jld@456763909QPwOeiRuTy873XY7");
                    string EncryptionIV = DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/EncryptionIV", "CEIVRAJWquG8iiMw");

                    string enc = HttpUtility.UrlEncode(AES_EncryptDecrypt.EncryptString(EncryptionKey, "", EncryptionIV));

                    string ip = WebAPIAdaniGas.GetIPAddress();
                    byte[] time = BitConverter.GetBytes(DateTime.UtcNow.ToBinary());
                    byte[] key = Guid.NewGuid().ToByteArray();
                    byte[] ipdata = Encoding.ASCII.GetBytes(ip);
                    var TOKEN = Convert.ToBase64String(time.Concat(ipdata).Concat(key).ToArray());

                    //string filename = model.CustomerID + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".pdf";
                    //string path = Server.MapPath("~/selfbilling/userfile/");
                    //var filepath = "/selfbilling/userfile/" + filename;
                    //model.FilePath = filepath;

                    model.MeterReadingImagePath = Server.MapPath("~/selfbilling/meterimage/") + Session["MeterReadingImagePath"].ToString();

                    byte[] bytes;
                    FileStream fs = new FileStream(model.MeterReadingImagePath, FileMode.Open, FileAccess.Read);
                    bytes = new byte[fs.Length];

                    //var img = System.Drawing.Image.FromFile(model.MeterReadingImagePath);
                    //byte[] bytes;
                    //using (MemoryStream ms = new MemoryStream())
                    //{
                    //    img.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
                    //    bytes = ms.ToArray();
                    //}
                    //Byte[] bytes = System.IO.File.ReadAllBytes(model.MeterReadingImagePath);
                    string image = Convert.ToBase64String(bytes);

                    SelfBillingAdaniGas details = GetMeterReadingDetails(model.CustomerID);

                    SelfBillingRequest request1 = new SelfBillingRequest
                    {
                        MODE = AES_EncryptDecrypt.EncryptString(EncryptionKey, "RELEASE", EncryptionIV),
                        CONTRACTACCOUNT = AES_EncryptDecrypt.EncryptString(EncryptionKey, model.CustomerID, EncryptionIV),
                        DEVICE = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.SERNR, EncryptionIV),
                        MRRESULT = AES_EncryptDecrypt.EncryptString(EncryptionKey, model.MeterReading.ToString(), EncryptionIV),
                        METERIMAGE = AES_EncryptDecrypt.EncryptString(EncryptionKey, image, EncryptionIV),
                        Token = AES_EncryptDecrypt.EncryptString(EncryptionKey, TOKEN, EncryptionIV),
                        MRDATE = AES_EncryptDecrypt.EncryptString(EncryptionKey, DateTime.Now.ToString("yyyy-MM-dd"), EncryptionIV),
                        MRTIME = AES_EncryptDecrypt.EncryptString(EncryptionKey, DateTime.Now.ToString("hhmm"), EncryptionIV),
                        MRIDNUMBER = AES_EncryptDecrypt.EncryptString(EncryptionKey, model.MRIDNUMBER, EncryptionIV),
                        PARTNERNAME = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.CustomerName, EncryptionIV),
                        CONTRACTNO = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.CONTRACTNO, EncryptionIV),
                        SHMRDATE = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.NextMeterReadingDateandTime, EncryptionIV),
                        PRV_MR_DATE = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.PreviousMeterReadingDateandTime, EncryptionIV),
                        PRV_RESULT = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.PreviousMeterReading, EncryptionIV),
                        DEV_CAT = AES_EncryptDecrypt.EncryptString(EncryptionKey, details.DEV_CAT, EncryptionIV)
                    };
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 MODE POST:" + "RELEASE" + "|" + request1.MODE, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 CONTRACTACCOUNT POST:" + model.CustomerID + "|" + request1.CONTRACTACCOUNT, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 DEVICE POST:" + details.SERNR + "|" + request1.DEVICE, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 MRRESULT POST:" + model.MeterReading.ToString() + "|" + request1.MRRESULT, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 METERIMAGE POST:" + image + "|" + request1.METERIMAGE, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 Token POST:" + TOKEN + "|" + request1.Token, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 MRDATE POST:" + DateTime.Now.ToString("yyyy-MM-dd") + "|" + request1.MRDATE, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 MRTIME POST:" + DateTime.Now.ToString("hhmm") + "|" + request1.MRTIME, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 MRIDNUMBER POST:" + details.MRIDNUMBER + "|" + request1.MRIDNUMBER, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 PARTNERNAME POST:" + details.CustomerName + "|" + request1.PARTNERNAME, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 CONTRACTNO POST:" + details.CONTRACTNO + "|" + request1.CONTRACTNO, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 SHMRDATE POST:" + details.NextMeterReadingDateandTime + "|" + request1.SHMRDATE, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 PRV_MR_DATE POST:" + details.PreviousMeterReadingDateandTime + "|" + request1.PRV_MR_DATE, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 PRV_RESULT POST:" + details.PreviousMeterReading + "|" + request1.PRV_RESULT, this);
                    Sitecore.Diagnostics.Log.Info("Selfbilling request1 DEV_CAT POST:" + details.DEV_CAT + "|" + request1.DEV_CAT, this);

                    var serializedObj = JsonConvert.SerializeObject(request1);
                    Sitecore.Diagnostics.Log.Info("Selfbilling Request JSON POST2:" + serializedObj, this);

                    //var client = new RestClient("https://apps.adani.com/QASpotBillingServices/ApplicationService.svc/Web/SelfMeterReading");
                    var client = new RestClient(DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/SpotBillingService_SelfBilling", "https://apps.adani.com/QASpotBillingServices/ApplicationService.svc/Web/SelfMeterReading"));

                    client.Timeout = -1;
                    var request = new RestRequest(Method.POST);
                    request.AddHeader("Content-Type", "application/json");
                    request.AddParameter("application/json", serializedObj, ParameterType.RequestBody);
                    Sitecore.Diagnostics.Log.Info("Selfbilling Sending Request POST:", this);
                    IRestResponse response = client.Execute(request);
                    Sitecore.Diagnostics.Log.Info("Selfbilling Received Response POST:"+ response.Content??"NULL", this);

                    if (response.IsSuccessful)
                    {
                        model.IsSuccessful = true;

                        var resultXml = XElement.Parse(response.Content);

                        //model.MsgFlag = "S";// resultXml.Descendants().Descendants().ToList()[0].Value;
                        //model.Message = resultXml.Descendants().Descendants().ToList()[0].Value;
                        //model.PDFData = resultXml.Descendants().Descendants().ToList()[1].Value;

                        model.ExternalMessage = resultXml.Descendants().Descendants().ToList()[0].Value;
                        model.Message = resultXml.Descendants().Descendants().ToList()[1].Value;
                        model.PDFData = resultXml.Descendants().Descendants().ToList()[2].Value;
                        model.MsgFlag = resultXml.Descendants().Descendants().ToList()[3].Value;

                        string filename = model.CustomerID + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".pdf";
                        string path = Server.MapPath("~/selfbilling/userfile/");
                        var filepath = "/selfbilling/userfile/" + filename;
                        model.FilePath = filepath;

                        if (!Directory.Exists(path))
                        {
                            Directory.CreateDirectory(path);
                        }
                        byte[] PDFbytes = Convert.FromBase64String(model.PDFData);
                        System.IO.FileStream stream = new FileStream(path + filename, FileMode.CreateNew);
                        System.IO.BinaryWriter writer =
                            new BinaryWriter(stream);
                        writer.Write(PDFbytes, 0, PDFbytes.Length);
                        writer.Close();
                    }

                    return View(model);
                }
                if (!string.IsNullOrEmpty(cancelbutton))
                {
                    Session["IsRelease"] = true;
                    model.MeterReadingImagePath = "/selfbilling/meterimage/" + Session["MeterReadingImagePath"].ToString();

                    if (this.ModelState["MeterReadingImage"] != null && this.ModelState["MeterReadingImage"].Errors.Count > 0)
                        this.ModelState["MeterReadingImage"].Errors.Clear();

                    //get old meter reading and show
                    try
                    {
                        string meterReadingSaved = model.MeterReading.ToString();

                        string[] meterReadingBeforeAndAfterDecimal = meterReadingSaved.Split('.');
                        string beforeDecimal = meterReadingBeforeAndAfterDecimal.First();
                        string afterDecimal = "000";

                        if (meterReadingBeforeAndAfterDecimal.Length > 1)
                            afterDecimal = meterReadingBeforeAndAfterDecimal.Last();

                        beforeDecimal = beforeDecimal.PadLeft(5, '0');
                        afterDecimal = afterDecimal.PadRight(3, '0');

                        char[] ch = new char[beforeDecimal.Length];
                        char[] cha = new char[afterDecimal.Length];

                        // Copy character by character into array 
                        for (int i = 0; i < beforeDecimal.Length; i++)
                        {
                            ch[i] = beforeDecimal[i];
                        }

                        for (int i = 0; i < afterDecimal.Length; i++)
                        {
                            cha[i] = afterDecimal[i];
                        }

                        model.MeterReading1 = Convert.ToDecimal(ch[0].ToString());
                        model.MeterReading2 = Convert.ToDecimal(ch[1].ToString());
                        model.MeterReading3 = Convert.ToDecimal(ch[2].ToString());
                        model.MeterReading4 = Convert.ToDecimal(ch[3].ToString());
                        model.MeterReading5 = Convert.ToDecimal(ch[4].ToString());

                        model.MeterReading6 = Convert.ToDecimal(cha[0].ToString());
                        model.MeterReading7 = Convert.ToDecimal(cha[1].ToString());
                        model.MeterReading8 = Convert.ToDecimal(cha[2].ToString());
                    }
                    catch (Exception e)
                    {
                        Log.Error("Meter reaing get error " + e.Message, this);
                    }

                    model.IsRelease = true;
                    return View(model);
                }
                if (!string.IsNullOrEmpty(cancelReloadbutton))
                {
                    return RedirectPermanent(this.UserProfileService.GetPageURL(Templates.Pages.Selfbilling));
                }
            }
            catch (Exception ex)
            {
                model.IsSuccessful = false;
                Log.Error("Error at Adani Gas SelfBilling " + ex.Message, this);
                this.ModelState.AddModelError(nameof(model.MeterReadingImage), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Request error", "Reading is not submitted, please try again after some time."));
                return View(model);
            }
            return View(model);
        }

        [HttpPost]
        public JsonResult CaptureImage(string userId, string data)
        {
            try
            {
                string filename = userId + "_" + DateTime.Now.ToString("dd-MM-yy-hh-mm-ss");
                string path = Server.MapPath("~/selfbilling/capturedimage/");
                string pathToDisplay = "/selfbilling/capturedimage/" + filename + ".jpg";
                string filePath = Path.Combine(Server.MapPath("~/selfbilling/capturedimage/"), filename + ".jpg");

                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                }

                //Convert Base64 Encoded string to Byte Array.
                byte[] imageBytes = Convert.FromBase64String(data.Split(',')[1]);

                //Save the Byte Array as Image File.
                System.IO.File.WriteAllBytes(filePath, imageBytes);
                Session["CapturedImage"] = filePath;

                //try
                //{
                //    using (AdadniGasDBModelDataContext dataContext = new AdadniGasDBModelDataContext())
                //    {
                //        if (dataContext.SelfBillingImageCaptureds.Any(l => l.CustomerId == userId))
                //        {
                //            SelfBillingImageCaptured recordToUpdate = dataContext.SelfBillingImageCaptureds.FirstOrDefault(l => l.CustomerId == userId);
                //            recordToUpdate.CapturedFilePath = filePath;
                //            dataContext.SubmitChanges();
                //        }
                //        else
                //        {
                //            SelfBillingImageCaptured objNew = new SelfBillingImageCaptured
                //            {
                //                CapturedFilePath = filePath,
                //                CustomerId = userId
                //            };
                //            dataContext.SelfBillingImageCaptureds.InsertOnSubmit(objNew);
                //            dataContext.SubmitChanges();
                //        }

                //    }
                //}
                //catch (Exception ex)
                //{
                //    Log.Error("CaptureImage error in DB save" + ex.Message, this);
                //}

                return Json(new { result = "success", filePathPic = pathToDisplay }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                return Json(new { result = "error:" + e.Message, filePathPic = "" }, JsonRequestBehavior.AllowGet);
            }
        }


        #endregion

        #region Quick Pay

        [HttpGet]
        public ActionResult QuickPayAdaniGas()
        {
            PayOnline model = new PayOnline();
            if (Request.QueryString["id"] != null)
            {
                string EncryptedcustomerID = Request.QueryString["id"];
                string EncryptionKey = DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/EncryptionKey", "Tl;jld@456763909QPwOeiRuTy873XY7");
                string EncryptionIV = DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/EncryptionIV", "CEIVRAJWquG8iiMw");

                //string DecodedEncryptedcustomerID = HttpUtility.UrlDecode(EncryptedcustomerID);
                string DecryptedcustomerID = AES_EncryptDecrypt.DecryptString(EncryptionKey, EncryptedcustomerID, EncryptionIV);

                //string EncryptedcustomerID_test = AES_EncryptDecrypt.EncryptString(EncryptionKey, EncryptedcustomerID, EncryptionIV);
                //string EncryptedcustomerID_test_encode = HttpUtility.UrlEncode(AES_EncryptDecrypt.EncryptString(EncryptionKey, EncryptedcustomerID, EncryptionIV));
                //string DecodedEncryptedcustomerID = HttpUtility.UrlDecode(EncryptedcustomerID_test_encode);
                //string DecryptedcustomerID1 = AES_EncryptDecrypt.DecryptString(EncryptionKey, DecodedEncryptedcustomerID, EncryptionIV);
                //string EncryptedcustomerID_re = AES_EncryptDecrypt.EncryptString(EncryptionKey, DecryptedcustomerID1, EncryptionIV);

                if (DecryptedcustomerID == null)
                {
                    ViewBag.NoInfo = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time.") + model.Message;
                    return View(model);
                }
                model.CustomerID = DecryptedcustomerID;
                try
                {
                    model = objWebAPIAdaniGas.QuickPay(model.CustomerID);
                    model.Current_Outstanding_Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? "00" : model.Current_Outstanding_Amount;
                    ViewBag.totalamt = model.Amount;
                    model.Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? 0 : Convert.ToDouble(model.Current_Outstanding_Amount) > 0 ? Convert.ToDouble(model.Current_Outstanding_Amount) : 0;
                    if (model.MessageFlag == "F")
                    {
                        ViewBag.NoInfo = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time.") + model.Message;
                    }
                    model.IsCustomerIdURLRendered = true;
                    return View(model);
                }
                catch (Exception ex)
                {
                    ViewBag.NoInfo = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time.");
                    Sitecore.Diagnostics.Log.Error("Error at ViewPayBill Get:" + ex.Message, this);
                }
                return View(model);
            }

            ViewBag.NoInfo = "Please provide customer Id to fetch information.";
            return View(model);
        }

        [HttpPost]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        public ActionResult QuickPayAdaniGas(PayOnline model, string quickPay_Go, string quickPay_Paynow = null)
        {
            bool isCustomerIDFromURL = model.IsCustomerIdURLRendered;
            ViewBag.NoInfo = null;
            model.UserType = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/GuestUser", "Guest");
            model.PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "Bill Paid");
            model.CustomerType = WebAPIAdaniGas.LoginModuleType(System.Web.HttpContext.Current.Request.Url.AbsolutePath.ToLower());
            Session["QuickPayCustomerType"] = WebAPIAdaniGas.AnotherPayment(System.Web.HttpContext.Current.Request.Url.AbsolutePath.ToString().ToLower());

            if (!string.IsNullOrEmpty(quickPay_Go))
            {
                if (!this.IsCaptchaValid("Captcha Validation Required."))
                {
                    ViewBag.NoInfo = "Please provide Captcha and try again!";
                    ModelState.AddModelError(nameof(model.Captcha), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Captcha required", "Captcha Validation Required."));
                    return this.View(model);
                }
                try
                {
                    //string loginType = WebAPIAdaniGas.LoginModuleType(System.Web.HttpContext.Current.Request.Url.AbsolutePath.ToLower());
                    model = objWebAPIAdaniGas.QuickPay(model.CustomerID);
                    model.Current_Outstanding_Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? "00" : model.Current_Outstanding_Amount;
                    ViewBag.totalamt = model.Amount;
                    model.Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? 0 : Convert.ToDouble(model.Current_Outstanding_Amount) > 0 ? Convert.ToDouble(model.Current_Outstanding_Amount) : 0;
                    //if (AdaniGasUserTypes.GetUserType(model.Partner_Type) != loginType)
                    //{
                    //    ViewBag.NoInfo = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "No Valid User Found in") + loginType + "LoginType";
                    //    return View(model);
                    //}

                    if (model.MessageFlag == "F")
                    {
                        ViewBag.NoInfo = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time.") + model.Message;
                    }
                    return View(model);
                }
                catch (Exception ex)
                {
                    ViewBag.NoInfo = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time.");
                    Sitecore.Diagnostics.Log.Error("Error at ViewPayBill Get:" + ex.Message, this);
                }

                return View(model);
            }
            else
            {
                try
                {
                    if (!ModelState.IsValid)
                    {
                        model = objWebAPIAdaniGas.QuickPay(model.CustomerID);
                        model.Current_Outstanding_Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? "00" : model.Current_Outstanding_Amount;
                        ViewBag.totalamt = model.Amount;
                        model.Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? 0 : Convert.ToDouble(model.Current_Outstanding_Amount) > 0 ? Convert.ToDouble(model.Current_Outstanding_Amount) : 0;
                        model.IsCustomerIdURLRendered = isCustomerIDFromURL;
                        return View(model);
                    }
                    if (model.Amount.ToString().Any(char.IsLetter))
                    {
                        this.ModelState.AddModelError("Amount", DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/InvalidAmount", "Invalid payable amount value. character is not allowed."));
                        model = objWebAPIAdaniGas.QuickPay(model.CustomerID);
                        model.Current_Outstanding_Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? "00" : model.Current_Outstanding_Amount;
                        ViewBag.totalamt = model.Amount;
                        model.Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? 0 : Convert.ToDouble(model.Current_Outstanding_Amount) > 0 ? Convert.ToDouble(model.Current_Outstanding_Amount) : 0;
                        model.IsCustomerIdURLRendered = isCustomerIDFromURL;
                        return this.View(model);
                    }
                    else if (Convert.ToDecimal(model.Amount) <= 0)
                    {
                        this.ModelState.AddModelError("Amount", DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/AmountNegativeValidation", "You have not entered proper payable amount."));
                        model = objWebAPIAdaniGas.QuickPay(model.CustomerID);
                        model.Current_Outstanding_Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? "00" : model.Current_Outstanding_Amount;
                        ViewBag.totalamt = model.Amount;
                        model.Amount = string.IsNullOrEmpty(model.Current_Outstanding_Amount) ? 0 : Convert.ToDouble(model.Current_Outstanding_Amount) > 0 ? Convert.ToDouble(model.Current_Outstanding_Amount) : 0;
                        model.IsCustomerIdURLRendered = isCustomerIDFromURL;
                        return this.View(model);
                    }


                    switch (model.PaymentGateway)
                    {
                        case (int)EnumPayment.GatewayType.PayUMoney:
                            PaymentService.StorePaymentRequestAdaniGas(model);
                            string payUHTML = PaymentService.PayUMoneyTransactionRequestAPIAdaniGasRequestPost(model);
                            return Content(payUHTML);

                        case (int)EnumPayment.GatewayType.BillDesk:
                            PaymentService.StorePaymentRequestAdaniGas(model);
                            string RequestHTML = PaymentService.BillDeskTransactionRequestAPIRequestAdaniGasPost(model);
                            return Content(RequestHTML);
                        case (int)EnumPayment.GatewayType.Paytm:
                            PaymentService.StorePaymentRequestAdaniGas(model);
                            string outputHTML = PaymentService.PaytmTransactionRequestAPIRequestAdaniGasPost(model);
                            return Content(outputHTML);
                        case (int)EnumPayment.GatewayType.HDFC:
                            PaymentService.StorePaymentRequestAdaniGas(model);
                            string ReqHTML = PaymentService.HDFCTransactionRequestAPIRequestAdaniGasPost(model);
                            return Content(ReqHTML);
                        default:
                            break;
                    }
                    Session["UpdateMessage"] = new InfoMessage(DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Submitted Successfully", "Submitted Successfully."));
                }
                catch (Exception ex)
                {
                    Sitecore.Diagnostics.Log.Error("Error at PayOnlineAdaniGas Post:" + ex.Message, this);
                }
                return Redirect(Request.RawUrl);
            }

        }

        #endregion

        #region AdaniGasENachRegistration
        public ActionResult ENachRegistration()
        {
            //PayOnline t = new PayOnline();
            //t.OrderId = DictionaryPhraseRepository.Current.Get("/PayOnline/Account/HDFCorderId", "");
            //if(t.OrderId !="")
            //{
            //    PaymentService.HDFCTransactionStatusAPIAdaniGasPost(t);
            //}            
            AdaniGasENachRegistrationModel model = new AdaniGasENachRegistrationModel();
            model.IsvalidatAccount = false;
            model.IsOTPSent = false;
            ViewBag.Info = null;
            return this.View(model);
        }

        [HttpPost]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        public ActionResult ENachRegistration(AdaniGasENachRegistrationModel registrationInfo, string ValidateAccount = null, string submit = null, string Resend = null)
        {
            bool validationStatus = false;
            var result = new { status = "1" };



            try
            {

                //PayOnline t = new PayOnline();
                //t.OrderId = "P1WMXYX4S66AU5O";
                //PaymentService.HDFCTransactionStatusAPIAdaniGasPost(t);
                registrationInfo.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");
                ViewBag.Info = null;
                registrationInfo.IsvalidatAccount = false;
                registrationInfo.UserType = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/GuestUser", "Guest");
                registrationInfo.CustomerType = WebAPIAdaniGas.LoginModuleType(System.Web.HttpContext.Current.Request.Url.AbsolutePath.ToLower());
                WebAPIAdaniGas wbAGl = new WebAPIAdaniGas();
                Session["CustID"] = null;
                if (!ModelState.IsValid)
                {
                    return this.View(registrationInfo);
                }

                if (string.IsNullOrEmpty(registrationInfo.CustomerID))
                {
                    this.ModelState.AddModelError(nameof(registrationInfo.CustomerID), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Customer ID required", "Please enter Customer Id."));
                    return this.View(registrationInfo);
                }
                if (!string.IsNullOrEmpty(ValidateAccount))
                {
                    try
                    {
                        if (this.IsCaptchaValid("Captcha Validation Required."))
                        {
                            validationStatus = true;
                        }
                        //validationStatus = this.IsReCaptchValid(registrationInfo.reResponse);
                    }
                    catch (Exception ex)
                    {

                        Log.Error("Failed to validate auto script : " + ex.ToString(), "Failed");
                    }
                    if (validationStatus == true)
                    {
                        //validate customer id call sap service
                        var CustomerInfo = objWebAPIAdaniGas.QuickPay(registrationInfo.CustomerID);
                        if (CustomerInfo.MessageFlag == "S")
                        {
                            var ECSInfoCheck = objWebAPIAdaniGas.ReadEcsPostingService(registrationInfo.CustomerID);
                            if (!string.IsNullOrEmpty(ECSInfoCheck.ECSCurrentStatus) && ECSInfoCheck.ECSCurrentStatus.ToLower() == "y")
                            {
                                this.ModelState.AddModelError(nameof(registrationInfo.CustomerID), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/AlreadyRegistered", "You are already registered for NACH. If you want to change the bank then contact our customer care to deactivate the existing NACH mandate and then try again here after existing NACH mandate is de-activated"));
                                return this.View(registrationInfo);
                            }
                            registrationInfo.IsvalidatAccount = true;

                            registrationInfo.MobileNo = AES_EncryptDecrypt.DecryptString(wbAGl.EncryptionKey, CustomerInfo.Mobile, wbAGl.EncryptionIV);//CustomerInfo.Mobile;
                            registrationInfo.CustomerName = CustomerInfo.CustomerName;
                            if (!string.IsNullOrEmpty(registrationInfo.MobileNo))
                            {
                                var sendOTP = objWebAPIAdaniGas.ENachSendOtp(registrationInfo);
                                if (sendOTP.IsError)
                                {
                                    ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP sending Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message);
                                    registrationInfo.IsOTPSent = false;
                                    registrationInfo.IsvalidatAccount = false;
                                    Session["CustID"] = registrationInfo.CustomerID;
                                    TempData["CustID"] = registrationInfo.CustomerID;
                                    return this.View(registrationInfo);
                                }
                                else if (sendOTP.MessageFlag.ToLower() == "s")
                                {
                                    registrationInfo.IsOTPSent = true;
                                    registrationInfo.Message = sendOTP.Message;
                                    Session["CustID"] = registrationInfo.CustomerID;
                                    TempData["CustID"] = registrationInfo.CustomerID;
                                    return this.View(registrationInfo);
                                }
                                else if (sendOTP.MessageFlag.ToLower() == "f")
                                {
                                    registrationInfo.IsOTPSent = false;
                                    registrationInfo.IsvalidatAccount = false;
                                    registrationInfo.Message = sendOTP.Message;
                                    Session["CustID"] = registrationInfo.CustomerID;
                                    TempData["CustID"] = registrationInfo.CustomerID;
                                    return this.View(registrationInfo);
                                }
                                else
                                {
                                    ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP failed Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message);
                                    registrationInfo.IsOTPSent = false;
                                    registrationInfo.IsvalidatAccount = false;
                                    return this.View(registrationInfo);
                                }
                            }
                            else
                            {
                                ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/API Issue", "There is some issue in fetching your data. Please try after some time.") + CustomerInfo.Message;
                                return this.View(registrationInfo);

                            }
                        }
                        else
                        {
                            ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/API Issue", "There is some issue in fetching your data. Please try after some time.");
                            ViewBag.message = CustomerInfo.Message;
                            return this.View(registrationInfo);

                        }
                    }
                    else
                    {
                        this.ModelState.AddModelError(nameof(registrationInfo.reResponse), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/captcha required", "Invalid Captcha"));
                        return this.View(registrationInfo);
                    }
                }

                if (!string.IsNullOrEmpty(Resend))
                {
                    var CustomerInfo = objWebAPIAdaniGas.QuickPay(registrationInfo.CustomerID);
                    if (CustomerInfo.MessageFlag == "S" && TempData["CustID"] != null)
                    {
                        registrationInfo.CustomerID = TempData["CustID"].ToString();
                        var ECSInfoCheck = objWebAPIAdaniGas.ReadEcsPostingService(registrationInfo.CustomerID);
                        if (!string.IsNullOrEmpty(ECSInfoCheck.ECSCurrentStatus) && ECSInfoCheck.ECSCurrentStatus.ToLower() == "y")
                        {
                            this.ModelState.AddModelError(nameof(registrationInfo.CustomerID), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/AlreadyRegistered", "You are already registered for NACH. If you want to change the bank then contact our customer care to deactivate the existing NACH mandate and then try again here after existing NACH mandate is de-activated"));
                            return this.View(registrationInfo);
                        }
                        registrationInfo.IsvalidatAccount = true;

                        registrationInfo.MobileNo = AES_EncryptDecrypt.DecryptString(wbAGl.EncryptionKey, CustomerInfo.Mobile, wbAGl.EncryptionIV);//CustomerInfo.Mobile;
                        registrationInfo.CustomerName = CustomerInfo.CustomerName;
                        if (!string.IsNullOrEmpty(registrationInfo.MobileNo))
                        {
                            var sendOTP = objWebAPIAdaniGas.ENachSendOtp(registrationInfo);
                            if (sendOTP.IsError)
                            {
                                ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP sending Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message);
                                registrationInfo.IsOTPSent = false;
                                TempData["CustID"] = registrationInfo.CustomerID;
                                return this.View(registrationInfo);
                            }
                            else if (sendOTP.MessageFlag.ToLower() == "s")
                            {
                                registrationInfo.IsOTPSent = true;
                                registrationInfo.Message = sendOTP.Message;
                                TempData["CustID"] = registrationInfo.CustomerID;
                                return this.View(registrationInfo);
                            }
                            else if (sendOTP.MessageFlag.ToLower() == "f")
                            {
                                registrationInfo.IsOTPSent = true;
                                registrationInfo.ResendDisable = "yes";
                                ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/max OTP msg", "You have sent maximum number of OTP. " + sendOTP.Message);
                                Session["CustID"] = registrationInfo.CustomerID;
                                TempData["CustID"] = registrationInfo.CustomerID;
                                return this.View(registrationInfo);
                            }
                            else
                            {
                                ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP failed Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message);
                                registrationInfo.IsOTPSent = false;
                                return this.View(registrationInfo);
                            }
                        }
                        else
                        {
                            ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/API Issue", "There is some issue in fetching your data. Please try after some time.") + CustomerInfo.Message;
                            return this.View(registrationInfo);

                        }
                    }
                    else
                    {
                        ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/API Issue", "There is some issue in fetching your data. Please try after some time.");
                        ViewBag.message = CustomerInfo.Message;
                        return this.View(registrationInfo);

                    }
                }
                if (!string.IsNullOrEmpty(submit))
                {
                    try
                    {
                        if (string.IsNullOrEmpty(registrationInfo.OTPNumber.Trim()))
                        {
                            ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/NoOTP Issue", "OTP required.");
                            return this.View(registrationInfo);
                        }
                        else
                        {
                            var CustomerInfo = objWebAPIAdaniGas.QuickPay(registrationInfo.CustomerID);
                            if (CustomerInfo.MessageFlag == "F")
                            {
                                ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/API Issue", "There is some issue in fetching your data. Please try after some time.") + CustomerInfo.Message;
                                return this.View(registrationInfo);
                            }
                            registrationInfo.MobileNo = AES_EncryptDecrypt.DecryptString(wbAGl.EncryptionKey, CustomerInfo.Mobile, wbAGl.EncryptionIV);
                            registrationInfo.CustomerName = CustomerInfo.CustomerName;
                            //registrationInfo.MobileNo = "7007413157";
                            var ValidateOTP = objWebAPIAdaniGas.EnachValidateOtp(registrationInfo.MobileNo, registrationInfo.OTPNumber);
                            if (ValidateOTP.Msg_Flag == "S")
                            {
                                registrationInfo.Amount = 1.00;
                                PaymentService.StoreENachRequestAdaniGas(registrationInfo);
                                //redirect Billdesk Page
                                string ReqHTML = PaymentService.BillDeskENACHRequestAPIRequestPost_AdaniGas(registrationInfo);
                                return Content(ReqHTML);
                            }
                            else if (ValidateOTP.Msg_Flag == "F")
                            {
                                registrationInfo.Message = ValidateOTP.Message;
                                registrationInfo.IsOTPValid = false;
                                return this.View(registrationInfo);
                            }
                            else
                            {
                                ViewBag.Info = DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP Invalid Issue", "There is some issue in validating OTP. Please try after some time. " + ValidateOTP.Message);
                                registrationInfo.IsOTPSent = false;
                                return this.View(registrationInfo);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error($"Error Description : ", ex, this);
                        registrationInfo.IsvalidatAccount = false;
                        return View(registrationInfo);
                    }
                }
                return View(registrationInfo);
            }
            catch (Exception ex)
            {
                Log.Error("eNachRegistration:", ex, this);
                this.ModelState.AddModelError(nameof(registrationInfo.CustomerID), ex.Message);
                registrationInfo.IsvalidatAccount = false;
                return this.View(registrationInfo);
            }




        }

        public ActionResult ENACHBillDeskCallBackAdaniGas()
        {
            var RegFailureUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.ENachRegistrationFailure);
            var RegSuccessUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.ENachRegistrationSuccess);
            try
            {
                string checksum = string.Empty;
                //Sitecore.Data.Database dbWeb = Sitecore.Configuration.Factory.GetDatabase("web");
                var itemInfo = webDb.GetItem(new Data.ID(Templates.AdaniGasENACHRegisterConfiguration.ID.ToString()));

                string ChecksumKey = itemInfo.Fields[Templates.AdaniGasENACHRegisterConfiguration.BillDeskENach.BDSK_ChecksumKey].Value;
                string merchantId = itemInfo.Fields[Templates.AdaniGasENACHRegisterConfiguration.BillDeskENach.BDSK_Merchant_ID].Value;

                //BillDesk Response
                string responsemsg = Request.Form["msg"];
                Sitecore.Diagnostics.Log.Info("Payment Gateway- ENACHBillDeskCallBackAdaniGas Callback Message - " + responsemsg, this);

                if (responsemsg != null)
                {
                    var responselist = responsemsg.Split('|');
                    var billDeskchecksum = responselist.Last().Trim();
                    var responsemsgdata = string.Join("|", responselist.Take(responselist.Count() - 1).ToArray());//responselist.Take(responselist.Count() - 1).ToArray().Join(;
                                                                                                                  // string PaymentMode = GetPaymentTypeBilldeskByCode(responselist[7].ToString());
                    var checksumresponse = this.PaymentService.GetHMACSHA256(responsemsgdata, ChecksumKey);
                    var amount = !string.IsNullOrEmpty(responselist[4].ToString()) ? Convert.ToDouble(responselist[4].ToString()) : 00;
                    if (checksumresponse.Equals(billDeskchecksum)) // Compare Checksum
                    {
                        if (Constants.BillDeskResponse.SuccessCode.Equals(responselist[14].ToString()))
                        {
                            var modelviewpay = new AdaniGasENachRegistrationModel()
                            {
                                TransactionId = responselist[2].ToString(),
                                ResponseStatus = Constants.PaymentResponse.Success,
                                Responsecode = responselist[14].ToString(),
                                Remark = Constants.PaymentResponse.Success,
                                BankRefNo = responselist[3].ToString(),
                                OrderId = responselist[1].ToString(),
                                Amount = double.Parse(responselist[4]),
                                SIAmount = responselist[6].ToString(),
                                CustomerID = responselist[16].ToString(),
                                Message = responsemsg,
                                AccountType = responselist[7].ToString(),
                                AccountHolderName = responselist[10].ToString(),
                                AccountNumber = responselist[11].ToString(),
                                BankName = responselist[12].ToString(),
                                UMRN = responselist[15].ToString(),
                                TransactionDate = responselist[13].ToString()
                            };

                            this.PaymentService.StoreENachResponseAdaniGas(modelviewpay);

                            TempData["RegResponse"] = modelviewpay;

                            Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackAdaniGas Response - ", responsemsg);
                            return this.Redirect(RegSuccessUrl);
                        }
                        else
                        {
                            //error response
                            var modelviewpay = new AdaniGasENachRegistrationModel()
                            {
                                TransactionId = responselist[2].ToString(),
                                ResponseStatus = Constants.PaymentResponse.Failure,
                                Responsecode = responselist[14].ToString(), // ErrorStatus
                                Remark = responselist[24].ToString(), //DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/Technical Problem Msg", "Technically difficulty in the system. Please contact customer care for more details."),
                                Amount = double.Parse(responselist[4]),
                                Message = responsemsg,
                                BankRefNo = responselist[3].ToString(),
                                OrderId = responselist[1].ToString(),
                                SIAmount = responselist[6].ToString(),
                                CustomerID = responselist[16].ToString(),
                                AccountType = responselist[7].ToString(),
                                AccountHolderName = responselist[10].ToString(),
                                AccountNumber = responselist[11].ToString(),
                                BankName = responselist[12].ToString(),
                                UMRN = responselist[15].ToString(),
                                ErrorStatus = responselist[23].ToString(),
                                ErrorDescription = responselist[24].ToString(),
                                TransactionDate = responselist[13].ToString()
                            };
                            this.PaymentService.StoreENachResponseAdaniGas(modelviewpay);

                            TempData["RegResponse"] = modelviewpay;
                            Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackAdaniGas Response Failure - ", responsemsg);
                            return this.Redirect(RegFailureUrl);
                        }
                    }
                    else
                    {
                        //Checksum Mismatch
                        var modelviewpay = new AdaniGasENachRegistrationModel()
                        {
                            TransactionId = responselist[2].ToString(),
                            ResponseStatus = Constants.PaymentResponse.Failure,
                            Responsecode = responselist[14].ToString(), // ErrorStatus
                            Remark = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/Technical Problem Msg", "Technically difficulty in the system. Please contact customer care for more details."),
                            Message = responsemsg,
                            BankRefNo = responselist[3].ToString(),
                            OrderId = responselist[1].ToString(),
                            Amount = double.Parse(responselist[4]),
                            SIAmount = responselist[6].ToString(),
                            CustomerID = responselist[16].ToString(),
                            AccountType = responselist[7].ToString(),
                            AccountHolderName = responselist[10].ToString(),
                            AccountNumber = responselist[11].ToString(),
                            BankName = responselist[12].ToString(),
                            UMRN = responselist[15].ToString(),
                            TransactionDate = responselist[13].ToString()
                        };

                        this.PaymentService.StoreENachResponseAdaniGas(modelviewpay);
                        TempData["RegResponse"] = modelviewpay;
                        Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackAdaniGas Response checksum mismatch - " + responsemsg, this);
                        return this.Redirect(RegFailureUrl);
                    }
                }
                else
                {
                    Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackAdaniGas Response NULL error - " + responsemsg, this);
                    return this.Redirect(RegFailureUrl);
                }
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at BillDeskCallBackAdaniGas - :" + ex.Message, this);
                return this.Redirect(RegFailureUrl);
            }
        }

        [HttpPost]
        public void ENACHBillDeskCallBackS2SAdaniGas()
        {
            Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback BillDeskCallBackS2SAdaniGas API Call Start ", typeof(PayOnline));
            var FailureUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentFailure);
            var SuccessUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentSuccess);

            try
            {

                //Sitecore.Data.Database dbWeb = Sitecore.Configuration.Factory.GetDatabase("web");
                var itemInfo = webDb.GetItem(new Data.ID(Templates.PaymentConfigurationAdaniGas.ID.ToString()));

                string ChecksumKey = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.BillDeskFields.BDSK_ChecksumKey].Value;
                string merchantId = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.BillDeskFields.BDSK_Merchant_ID].Value;

                //BillDesk Response
                string responsemsg = Request.Form["msg"];

                Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackS2SAdaniGas Callback Message - " + responsemsg, this);
                Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback BillDeskCallBackS2SAdaniGas API Response " + responsemsg, typeof(PayOnline));
                if (responsemsg != null)
                {
                    var responselist = responsemsg.Split('|');
                    var billDeskchecksum = responselist.Last().Trim();
                    var responsemsgdata = string.Join("|", responselist.Take(responselist.Count() - 1).ToArray());//responselist.Take(responselist.Count() - 1).ToArray().Join(;

                    var checksumresponse = this.PaymentService.GetHMACSHA256(responsemsgdata, ChecksumKey);
                    var amount = !string.IsNullOrEmpty(responselist[4].ToString()) ? Convert.ToDouble(responselist[4].ToString()) : 00;

                    if (checksumresponse.Equals(billDeskchecksum)) // Compare Checksum
                    {
                        Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback BillDeskCallBackS2SAdaniGas API ChecksumCheck " + billDeskchecksum, typeof(PayOnline));
                        if (Constants.BillDeskResponse.SuccessCode.Equals(responselist[14].ToString()))
                        {
                            Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback BillDeskCallBackS2SAdaniGas API BillDeskResponse Success " + responselist[14].ToString(), typeof(PayOnline));
                            var modelviewpay = new PayOnline()
                            {
                                TransactionId = responselist[2].ToString(),
                                ResponseStatus = Constants.PaymentResponse.Success,
                                Responsecode = responselist[14].ToString(),
                                Remark = Constants.PaymentResponse.Success,
                                PaymentRef = responselist[3].ToString(),
                                OrderId = responselist[19].ToString(),
                                Amount = amount,// responselist[4].ToString(),
                                CustomerID = responselist[1].ToString(),
                                LoginName = responselist[21].ToString(),
                                Message = responsemsg,
                                TransactionDate = responselist[13].ToString(),
                                PaymentMode = responselist[9].ToString() + "_BD",
                                Email = responselist[20].ToString(),
                                PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "Bill Paid"),
                                PaymentGateway = 2,
                                IsS2S = "true_" + DateTime.Now
                            };
                            this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                            Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackS2SAdaniGas Success Response - " + responsemsg, this);
                        }
                        else
                        {
                            //error response
                            Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback BillDeskCallBackS2SAdaniGas API BillDeskResponse Fail " + responselist[14].ToString(), typeof(PayOnline));
                            var modelviewpay = new PayOnline()
                            {
                                TransactionId = responselist[2].ToString(),
                                ResponseStatus = Constants.PaymentResponse.Failure,
                                Responsecode = responselist[14].ToString(), // ErrorStatus
                                Remark = responselist[24].ToString(), //DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/Technical Problem Msg", "Technically difficulty in the system. Please contact customer care for more details."),
                                PaymentRef = responselist[3].ToString(),
                                OrderId = responselist[19].ToString(),
                                Amount = amount,// responselist[4].ToString(),
                                CustomerID = responselist[1].ToString(),
                                LoginName = responselist[21].ToString(),
                                TransactionDate = responselist[13].ToString(),
                                Message = responsemsg,
                                Email = responselist[20].ToString(),
                                PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "Bill Paid"),
                                PaymentGateway = 2,
                                PaymentMode = responselist[9].ToString() + "_BD",
                                IsS2S = "true_" + DateTime.Now
                            };
                            this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                            Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackS2SAdaniGas Response Failure - " + responsemsg, this);
                        }
                    }
                    else
                    {
                        Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback BillDeskCallBackS2SAdaniGas API ChecksumCheck Fail " + billDeskchecksum, typeof(PayOnline));
                        //Checksum Mismatch
                        var modelviewpay = new PayOnline()
                        {
                            TransactionId = responselist[2].ToString(),
                            ResponseStatus = Constants.PaymentResponse.Failure,
                            Responsecode = responselist[14].ToString(), // ErrorStatus
                            Remark = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/Technical Problem Msg", "Technically difficulty in the system. Please contact customer care for more details."),
                            PaymentRef = responselist[3].ToString(),
                            OrderId = responselist[19].ToString(),
                            Amount = amount,// responselist[4].ToString(),
                            CustomerID = responselist[1].ToString(),
                            LoginName = responselist[21].ToString(),
                            TransactionDate = responselist[13].ToString(),
                            Message = responsemsg,
                            Email = responselist[20].ToString(),
                            PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "Bill Paid"),
                            PaymentMode = responselist[9].ToString() + "_BD",
                            PaymentGateway = 2,
                            IsS2S = "true_" + DateTime.Now
                        };

                        this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                        Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackS2SAdaniGas Response checksum mismatch - ", "Checksum Mismatch for Billdesk response");
                    }
                }
                else
                {
                    Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackS2SAdaniGas Response NULL error - " + responsemsg, this);
                }
            }
            catch (Exception ex)
            {
                Diagnostics.Log.Error("AdaniGasPaymentGatewayCallback BillDeskCallBackS2SAdaniGas API Exception ", ex, this);
                Sitecore.Diagnostics.Log.Error("Error at BillDeskCallBackS2SAdaniGas - :" + ex.Message, this);
            }
        }

        public ActionResult ENACHRegisterSuccessAdaniGas()
        {
            var model = new AdaniGasENachRegistrationModel();
            if (TempData["RegResponse"] != null)
            {
                model = (AdaniGasENachRegistrationModel)TempData["RegResponse"];
                var modeldata = objWebAPIAdaniGas.QuickPay(model.CustomerID);
                model.CustomerName = modeldata.CustomerName;
            }
            Sitecore.Diagnostics.Log.Info("ENACH Registration Success AdaniGas Response", this);
            return this.View(model);
        }

        public ActionResult ENACHRegisterFailureAdaniGas()
        {
            var model = new AdaniGasENachRegistrationModel();
            if (TempData["RegResponse"] != null)
            {
                model = (AdaniGasENachRegistrationModel)TempData["RegResponse"];
                if (SessionHelper.UserSession.AdaniGasUserSessionContext != null && SessionHelper.UserSession.AdaniGasUserSessionContext.IsLoggedIn)
                {
                    ViewBag.IsUserLoggedIn = true;
                    ViewBag.UserType = WebAPIAdaniGas.AnotherPayment(SessionHelper.UserSession.AdaniGasUserSessionContext.userType.ToLower());
                }

                if (!string.IsNullOrEmpty(model.CustomerID))
                {
                    var modeldata = objWebAPIAdaniGas.QuickPay(model.CustomerID);
                    model.CustomerName = modeldata.CustomerName;
                }
            }
            Sitecore.Diagnostics.Log.Info("ENACH Registraion Failure AdaniGas Response", this);
            return this.View(model);
        }
        #endregion

        #region Quick Pay

        [HttpGet]
        public ActionResult GeyserConnection()
        {
            PayOnline model = new PayOnline();
            ViewBag.NoInfo = "Please provide customer Id to fetch information.";
            return View(model);
        }

        [HttpPost]
        public ActionResult GeyserConnection(PayOnline model, string quickPay_Go, string quickPay_Paynow = null)
        {
            var details = objWebAPIAdaniGas.GetCustomerDetailsWithPartnerId(model.CustomerID);
            model.CustomerID = details.CustomerID;
            model.CustomerName = details.FirstName + details.LastName;
            model.Email = details.Email;
            model.Mobile = details.Mobile;
            model.Amount = Convert.ToDouble(DictionaryPhraseRepository.Current.Get("/Accounts/GeyserConnection/Amount", "1770"));
            model.Message = DictionaryPhraseRepository.Current.Get("/Accounts/GeyserConnection/Message", "₹ 1770 (inclusive of Tax ₹ 270.0000). Extra Pipe charges of ₹ 295 per meter(Incl.tax) will be charged beyond 5 meter length. In case of refund, visit charges of Rs 250 + tax will be deducted from amount paid.");

            ViewBag.NoInfo = null;
            model.UserType = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/GuestUser", "Guest");
            model.PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Geyser Connection", "Geyser Connection");
            model.CustomerType = WebAPIAdaniGas.LoginModuleType(System.Web.HttpContext.Current.Request.Url.AbsolutePath.ToLower());
            if (!string.IsNullOrEmpty(quickPay_Go))
            {
                if (!this.IsCaptchaValid("Captcha Validation Required."))
                {
                    ViewBag.NoInfo = "Please provide Captcha and try again!";
                    ModelState.AddModelError(nameof(model.Captcha), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Captcha required", "Captcha Validation Required."));
                    return this.View(model);
                }
                try
                {
                    //model = objWebAPIAdaniGas.GetCustomerDetailsWithPartnerId(model.CustomerID);
                    //var geyserAmountDetails = GeyserConnectionDetails("R_0022_03", "1");
                    //model.Amount = Convert.ToDouble(DictionaryPhraseRepository.Current.Get("/Accounts/GeyserConnection/Amount", "1770"));
                    //model.Message = DictionaryPhraseRepository.Current.Get("/Accounts/GeyserConnection/Message", "₹ 1770 (inclusive of Tax ₹ 270.0000). Extra Pipe charges of ₹ 295 per meter(Incl.tax) will be charged beyond 5 meter length. In case of refund, visit charges of Rs 250 + tax will be deducted from amount paid.");

                    if (model.MessageFlag == "F")
                    {
                        ViewBag.NoInfo = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time.") + model.Message;
                    }
                    return View(model);
                }
                catch (Exception ex)
                {
                    ViewBag.NoInfo = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time.");
                    Sitecore.Diagnostics.Log.Error("Error at ViewPayBill Get:" + ex.Message, this);
                }

                return View(model);
            }
            else
            {
                try
                {
                    if (!ModelState.IsValid)
                    {
                        //model = objWebAPIAdaniGas.QuickPay(model.CustomerID);
                        //model.Amount = Convert.ToDouble(DictionaryPhraseRepository.Current.Get("/Accounts/GeyserConnection/Amount", "1770"));
                        //model.Message = DictionaryPhraseRepository.Current.Get("/Accounts/GeyserConnection/Message", "₹ 1770 (inclusive of Tax ₹ 270.0000). Extra Pipe charges of ₹ 295 per meter(Incl.tax) will be charged beyond 5 meter length. In case of refund, visit charges of Rs 250 + tax will be deducted from amount paid.");

                        return View(model);
                    }
                    if (model.Amount.ToString().Any(char.IsLetter))
                    {
                        this.ModelState.AddModelError("Amount", DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/InvalidAmount", "Invalid payable amount value. character is not allowed."));
                        //model = objWebAPIAdaniGas.QuickPay(model.CustomerID);
                        //model.Amount = Convert.ToDouble(DictionaryPhraseRepository.Current.Get("/Accounts/GeyserConnection/Amount", "1770"));
                        //model.Message = DictionaryPhraseRepository.Current.Get("/Accounts/GeyserConnection/Message", "₹ 1770 (inclusive of Tax ₹ 270.0000). Extra Pipe charges of ₹ 295 per meter(Incl.tax) will be charged beyond 5 meter length. In case of refund, visit charges of Rs 250 + tax will be deducted from amount paid.");

                        return this.View(model);
                    }
                    else if (Convert.ToDecimal(model.Amount) <= 0)
                    {
                        this.ModelState.AddModelError("Amount", DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/AmountNegativeValidation", "You have not enter proper payable amount."));
                        //model = objWebAPIAdaniGas.QuickPay(model.CustomerID);
                        //model.Amount = Convert.ToDouble(DictionaryPhraseRepository.Current.Get("/Accounts/GeyserConnection/Amount", "1770"));
                        //model.Message = DictionaryPhraseRepository.Current.Get("/Accounts/GeyserConnection/Message", "₹ 1770 (inclusive of Tax ₹ 270.0000). Extra Pipe charges of ₹ 295 per meter(Incl.tax) will be charged beyond 5 meter length. In case of refund, visit charges of Rs 250 + tax will be deducted from amount paid.");

                        return this.View(model);
                    }
                    else if (!model.TermsConditions)
                    {
                        this.ModelState.AddModelError("TermsConditions", DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/TermsConditions", "Please accept terms & conditions."));
                        //model = objWebAPIAdaniGas.QuickPay(model.CustomerID);
                        //model.Amount = Convert.ToDouble(DictionaryPhraseRepository.Current.Get("/Accounts/GeyserConnection/Amount", "1770"));
                        //model.Message = DictionaryPhraseRepository.Current.Get("/Accounts/GeyserConnection/Message", "₹ 1770 (inclusive of Tax ₹ 270.0000). Extra Pipe charges of ₹ 295 per meter(Incl.tax) will be charged beyond 5 meter length. In case of refund, visit charges of Rs 250 + tax will be deducted from amount paid.");

                        return this.View(model);
                    }

                    SessionHelper.UserSession.AdaniGasUserSessionContext = new PNGLoginModel
                    {
                        CustomerID = model.CustomerID,
                        Partner = details.PartnerNo,
                    };

                    switch (model.PaymentGateway)
                    {
                        case (int)EnumPayment.GatewayType.PayUMoney:
                            PaymentService.StorePaymentRequestAdaniGas(model);
                            string payUHTML = PaymentService.PayUMoneyTransactionRequestAPIAdaniGasRequestPost(model);
                            return Content(payUHTML);

                        case (int)EnumPayment.GatewayType.BillDesk:
                            PaymentService.StorePaymentRequestAdaniGas(model);
                            string RequestHTML = PaymentService.BillDeskTransactionRequestAPIRequestAdaniGasPost(model);
                            return Content(RequestHTML);
                        case (int)EnumPayment.GatewayType.Paytm:
                            PaymentService.StorePaymentRequestAdaniGas(model);
                            string outputHTML = PaymentService.PaytmTransactionRequestAPIRequestAdaniGasPost(model);
                            return Content(outputHTML);
                        default:
                            break;
                    }
                    Session["UpdateMessage"] = new InfoMessage(DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Submitted Successfully", "Submitted Successfully."));
                }
                catch (Exception ex)
                {
                    Sitecore.Diagnostics.Log.Error("Error at PayOnlineAdaniGas Post:" + ex.Message, this);
                }
                return Redirect(Request.RawUrl);
            }

        }



        #endregion

        #region AdaniGasPaymentGatewayCallback

        public ActionResult PayUCallBackAdaniGas()
        {
            var FailureUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentFailure);
            var SuccessUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentSuccess);

            string[] merc_hash_vars_seq;
            string merc_hash_string, merc_hash = string.Empty;

            //Sitecore.Data.Database dbWeb = Sitecore.Configuration.Factory.GetDatabase("web");
            var itemInfo = webDb.GetItem(new Data.ID(Templates.PaymentConfigurationAdaniGas.ID.ToString()));

            string merchantKey = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.PayuMoneyFields.PUM_Merchant_Key].Value;
            string saltkKey = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.PayuMoneyFields.PUM_Merchant_Salt].Value;
            string hash_seq = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.PayuMoneyFields.PUM_Product_Info].Value;

            try
            {

                Dictionary<string, string> TransactionRequestAPIResponse = new Dictionary<string, string>();

                foreach (string key in Request.Form.Keys)
                {
                    TransactionRequestAPIResponse.Add(key.Trim(), Request.Form[key].Trim());
                }

                string PayUResponseMsg = string.Join("|", TransactionRequestAPIResponse.Select(x => x.Key + ":" + x.Value).ToArray());

                if (!TransactionRequestAPIResponse.ContainsKey("issuing_bank"))
                {
                    TransactionRequestAPIResponse.Add("issuing_bank", "issuing_bank");
                }
                Sitecore.Diagnostics.Log.Info("PayUMoney Response at PayUCallBackAdaniGas :" + PayUResponseMsg, this);
                //Note : write code to set parameters to Model Value.
                if (TransactionRequestAPIResponse["mode"] == "DC")
                {
                    TransactionRequestAPIResponse["mode"] = "DEBITCARD_PY";
                }
                else if (TransactionRequestAPIResponse["mode"] == "CC")
                {
                    TransactionRequestAPIResponse["mode"] = "CREDITCARD_PY";
                }
                else if (TransactionRequestAPIResponse["mode"] == "NB")
                {
                    TransactionRequestAPIResponse["mode"] = "NETBANKING_PY";
                }

                var modelviewpay = new PayOnline()
                {
                    TransactionId = TransactionRequestAPIResponse.ContainsKey("payuMoneyId") ? TransactionRequestAPIResponse["payuMoneyId"] : TransactionRequestAPIResponse["mihpayid"], // PayUMoney Generated TrnansactionId
                    ResponseStatus = TransactionRequestAPIResponse["status"],
                    Responsecode = TransactionRequestAPIResponse["error"],
                    PaymentRef = !string.IsNullOrEmpty(TransactionRequestAPIResponse["issuing_bank"]) ? TransactionRequestAPIResponse["issuing_bank"] : string.Empty,
                    Remark = !string.IsNullOrEmpty(TransactionRequestAPIResponse["error_Message"]) ? TransactionRequestAPIResponse["error_Message"] : string.Empty,
                    OrderId = TransactionRequestAPIResponse["txnid"] ?? string.Empty,
                    Amount = getAmountfromDB(TransactionRequestAPIResponse["productinfo"], TransactionRequestAPIResponse["txnid"]),
                    CustomerID = TransactionRequestAPIResponse["productinfo"] ?? string.Empty, // Account Number
                    LoginName = TransactionRequestAPIResponse["firstname"] ?? string.Empty, // User Name for Login User
                    Message = PayUResponseMsg,
                    TransactionDate = !string.IsNullOrEmpty(TransactionRequestAPIResponse["addedon"]) ? TransactionRequestAPIResponse["addedon"] : System.DateTime.Now.ToString(),
                    PaymentMode = TransactionRequestAPIResponse["mode"] ?? string.Empty,
                    PaymentType = TransactionRequestAPIResponse["udf2"] ?? string.Empty
                };

                if (Request.Form["status"] == Constants.PayUResponseStatus.Success)
                {
                    merc_hash_vars_seq = hash_seq.Split('|');
                    Array.Reverse(merc_hash_vars_seq);
                    merc_hash_string = saltkKey + "|" + Request.Form["status"];

                    foreach (string merc_hash_var in merc_hash_vars_seq)
                    {
                        merc_hash_string += "|";
                        merc_hash_string = merc_hash_string + (Request.Form[merc_hash_var] != null ? Request.Form[merc_hash_var] : "");
                    }

                    merc_hash = this.PaymentService.Generatehash512(merc_hash_string).ToLower();

                    if (merc_hash != Request.Form["hash"])
                    {
                        Sitecore.Diagnostics.Log.Error("PayUMoney hash value miss matach at PayUCallBackAdaniGas : Hash value did not matched.", this);

                        //Value didn't match that means some paramter value change between transaction 
                        modelviewpay.Remark = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/Technical Problem Msg", "Technically difficulty in the system. Please contact customer care for more details.");//"Technically difficulty in the system. Please contact customer care for more details.";
                        modelviewpay.Responsecode = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/PayU Hash MissMatch", "Hash value did not matched");//"Hash value did not matched";
                        TempData["PaymentResponse"] = modelviewpay;
                        this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                        return this.Redirect(FailureUrl);
                    }
                    else
                    {
                        Sitecore.Diagnostics.Log.Error("PayUMoney Success Response at PayUCallBackAdaniGas : " + TransactionRequestAPIResponse["status"], this);
                        using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                        {
                            PaymentHistoryData ctx = dbcontext.PaymentHistoryDatas.Where(x => x.UserId == modelviewpay.CustomerID && x.OrderId == modelviewpay.OrderId).FirstOrDefault();

                            if (ctx != null)
                            {
                                modelviewpay.PaymentType = ctx.PaymentType;
                            }
                        }

                        if (modelviewpay.PaymentType.ToString() == "Name Transfer")
                        {
                            modelviewpay.IsSuccess = 1;

                            this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);

                            modelviewpay.NameTransferRequestNumber = this.PaymentService.GetNameTransferRequestNumber(modelviewpay.CustomerID, modelviewpay.OrderId);
                            modelviewpay.IsNameTransfer = true;
                            using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                            {

                                NameTransferRequestDetail obj = dbcontext.NameTransferRequestDetails.Where(x => x.CustomerId == modelviewpay.CustomerID && x.OrderId == modelviewpay.OrderId).FirstOrDefault();


                                if (obj.SAPResponseComment != "S;Complaint Created Sucessfully.")
                                {
                                    Log.Info("Name Transfer Request Response error ", obj.SAPResponseComment);
                                    string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/SAP Services Message Error ", "Name change request Number Not Generated Please Contact with ATGL." + " Error is  : " + obj.SAPResponseComment);
                                    ViewBag.Message = messagetobedisplayed;
                                    Session["Message"] = messagetobedisplayed;
                                }
                                else
                                {
                                    Log.Info("Name Transfer Request Response is :  ", obj.SAPResponseComment);
                                    obj.RequestNumber = modelviewpay.NameTransferRequestNumber;
                                    obj.OrderId = modelviewpay.OrderId;
                                    obj.IsRequestClosed = false;
                                    NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                                    if (obj.Status == "Application_Submited_But_Payment_Required")
                                    {
                                        obj.Status = "AdditionalPaymentDone";
                                        Log.Info("Update Name Transfer Request status after payments, updated status is :  ", obj.Status);
                                        applicationCheckStatus.Id = Guid.NewGuid();
                                        applicationCheckStatus.UserId = obj.Id.ToString();
                                        applicationCheckStatus.Status = obj.Status;
                                        applicationCheckStatus.RequestNumber = obj.RequestNumber;
                                        applicationCheckStatus.CreatedDate = DateTime.Now;
                                        Log.Info("Save Name Transfer Request in NameTransferApplicationCheckStatus :  ", obj.RequestNumber);
                                        dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                        dbcontext.SubmitChanges();
                                        if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                                        {
                                            Log.Info("Send Email Sucessfully after payment completed", obj.RequestNumber);
                                            Log.Info("Email Id is :", obj.CustomerEmailId);
                                            SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, obj.Status);
                                        }

                                    }
                                    else
                                    {
                                        obj.Status = "PaymentDone";
                                        Log.Info("Update Name Transfer Request status after payments, updated status is :  ", obj.Status);
                                        applicationCheckStatus.Id = Guid.NewGuid();
                                        applicationCheckStatus.UserId = obj.Id.ToString();
                                        applicationCheckStatus.Status = obj.Status;
                                        applicationCheckStatus.RequestNumber = obj.RequestNumber;
                                        applicationCheckStatus.CreatedDate = DateTime.Now;
                                        Log.Info("Save Name Transfer Request in NameTransferApplicationCheckStatus :  ", obj.RequestNumber);
                                        dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                        dbcontext.SubmitChanges();
                                        var urlOptions = new Sitecore.Links.UrlOptions();
                                        urlOptions.AlwaysIncludeServerUrl = true;
                                        //var pageUrl = Sitecore.Links.LinkManager.GetItemUrl(Sitecore.Context.Item, urlOptions);

                                        var startItem = Sitecore.Context.Site.HostName;
                                        var StatusItem = Sitecore.Context.Database.GetItem("{5817D216-CA57-4E5A-9E61-2E17F13E570C}");
                                        var StatusURL = Sitecore.Links.LinkManager.GetItemUrl(StatusItem, urlOptions);

                                        if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                                        {
                                            Log.Info("Send Email Sucessfully after payment completed", obj.RequestNumber);
                                            Log.Info("Email Id is :", obj.CustomerEmailId);
                                            SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, "");
                                        }
                                        if (!string.IsNullOrEmpty(obj.Mobile))
                                        {
                                            Log.Info("Send Mobile Sucessfully after payment completed", obj.RequestNumber);
                                            Log.Info("Mobile Number is :", obj.Mobile);
                                            Data.Items.Item settingsItem;
                                            settingsItem = Context.Database.GetItem(Templates.MailTemplate.SMSNameTransferRequest);
                                            var mailTemplateItem = settingsItem;
                                            var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                            string bodyText = subject.Value;
                                            bodyText = bodyText.Replace("[RequestNumber]", obj.RequestNumber);
                                            bodyText = bodyText.Replace("[StatusURL]", StatusURL);

                                            SendNameTransferStatusSMS(obj.Mobile, bodyText);
                                        }
                                    }


                                    string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/SAP Services Message Error ", "Your name transfer request #" + obj.RequestNumber + " is generated and will be resolved within 15 days.");
                                    ViewBag.Message = messagetobedisplayed;
                                    Session["Message"] = messagetobedisplayed;
                                    Log.Info("Name Transfer Request Sucessfully Completed :  ", messagetobedisplayed);
                                }

                            }
                            TempData["PaymentResponse"] = modelviewpay;
                            Sitecore.Diagnostics.Log.Info("Payment Gateway- PayUCallBackAdaniGas Response - ", PayUResponseMsg);
                            return this.Redirect(SuccessUrl);
                        }
                        else
                        {
                            this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);

                            TempData["PaymentResponse"] = modelviewpay;
                            return this.Redirect(SuccessUrl);
                        }

                    }
                }
                else
                {
                    Sitecore.Diagnostics.Log.Error("PayUMoney Failure Response at PayUCallBackAdaniGas : " + TransactionRequestAPIResponse["error_Message"], this);

                    modelviewpay.Responsecode = TransactionRequestAPIResponse["error"];
                    modelviewpay.Remark = TransactionRequestAPIResponse["error_Message"];

                    this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                    TempData["PaymentResponse"] = modelviewpay;
                    return this.Redirect(FailureUrl);
                }
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at PayUCallBackAdaniGas:" + ex.Message, this);
                return this.Redirect(FailureUrl);
            }
        }

        [HttpPost]
        public ActionResult PayUCallBackS2SAdaniGas()
        {
            Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback PayUCallBackS2SAdaniGas API Call Start ", typeof(PayOnline));
            var FailureUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentFailure);
            var SuccessUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentSuccess);

            string[] merc_hash_vars_seq;
            string merc_hash_string, merc_hash = string.Empty;

            //Sitecore.Data.Database dbWeb = Sitecore.Configuration.Factory.GetDatabase("web");
            var itemInfo = webDb.GetItem(new Data.ID(Templates.PaymentConfigurationAdaniGas.ID.ToString()));

            string merchantKey = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.PayuMoneyFields.PUM_Merchant_Key].Value;
            string saltkKey = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.PayuMoneyFields.PUM_Merchant_Salt].Value;
            string hash_seq = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.PayuMoneyFields.PUM_Product_Info].Value;

            try
            {

                Dictionary<string, string> TransactionRequestAPIResponse = new Dictionary<string, string>();

                foreach (string key in Request.Form.Keys)
                {
                    TransactionRequestAPIResponse.Add(key.Trim(), Request.Form[key].Trim());
                }

                string PayUResponseMsg = string.Join("|", TransactionRequestAPIResponse.Select(x => x.Key + ":" + x.Value).ToArray());
                Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback PayUCallBackS2SAdaniGas API Response " + PayUResponseMsg, typeof(PayOnline));
                Sitecore.Diagnostics.Log.Info("PayUMoney Response at PayUCallBackS2SAdaniGas :" + PayUResponseMsg, this);
                //Note : write code to set parameters to Model Value.

                if (TransactionRequestAPIResponse["mode"] == "DC")
                {
                    TransactionRequestAPIResponse["mode"] = "DEBITCARD_PY";
                }
                else if (TransactionRequestAPIResponse["mode"] == "CC")
                {
                    TransactionRequestAPIResponse["mode"] = "CREDITCARD_PY";
                }
                else if (TransactionRequestAPIResponse["mode"] == "NB")
                {
                    TransactionRequestAPIResponse["mode"] = "NETBANKING_PY";
                }

                var modelviewpay = new PayOnline()
                {
                    TransactionId = TransactionRequestAPIResponse.ContainsKey("payuMoneyId") ? TransactionRequestAPIResponse["payuMoneyId"] : TransactionRequestAPIResponse["mihpayid"],
                    ResponseStatus = TransactionRequestAPIResponse["status"],
                    Responsecode = TransactionRequestAPIResponse["error"],
                    PaymentRef = !string.IsNullOrEmpty(TransactionRequestAPIResponse["issuing_bank"]) ? TransactionRequestAPIResponse["issuing_bank"] : string.Empty,
                    Remark = !string.IsNullOrEmpty(TransactionRequestAPIResponse["error_Message"]) ? TransactionRequestAPIResponse["error_Message"] : string.Empty,
                    OrderId = TransactionRequestAPIResponse["txnid"],
                    Amount = !string.IsNullOrEmpty(TransactionRequestAPIResponse["amount"].ToString()) ? Convert.ToDouble(TransactionRequestAPIResponse["amount"].ToString()) : 00,
                    CustomerID = TransactionRequestAPIResponse["productinfo"], // Account Number
                    LoginName = TransactionRequestAPIResponse["firstname"], // User Name for Login User
                    Message = PayUResponseMsg,
                    PaymentMode = TransactionRequestAPIResponse["mode"],
                    PaymentType = TransactionRequestAPIResponse["udf2"],
                    IsS2S = "true_" + DateTime.Now
                };

                if (Request.Form["status"] == Constants.PayUResponseStatus.Success)
                {
                    Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback PayUCallBackS2SAdaniGas API Status " + Request.Form["status"], typeof(PayOnline));
                    merc_hash_vars_seq = hash_seq.Split('|');
                    Array.Reverse(merc_hash_vars_seq);
                    merc_hash_string = saltkKey + "|" + Request.Form["status"];

                    foreach (string merc_hash_var in merc_hash_vars_seq)
                    {
                        merc_hash_string += "|";
                        merc_hash_string = merc_hash_string + (Request.Form[merc_hash_var] != null ? Request.Form[merc_hash_var] : "");
                    }

                    merc_hash = this.PaymentService.Generatehash512(merc_hash_string).ToLower();

                    if (merc_hash != Request.Form["hash"])
                    {
                        Sitecore.Diagnostics.Log.Error("PayUMoney hash value miss matach at PayUCallBackS2SAdaniGas : Hash value did not matched.", this);

                        //Value didn't match that means some paramter value change between transaction 
                        modelviewpay.Remark = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/Technical Problem Msg", "Technically difficulty in the system. Please contact customer care for more details.");//"Technically difficulty in the system. Please contact customer care for more details.";
                        modelviewpay.Responsecode = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/PayU Hash MissMatch", "Hash value did not matched");//"Hash value did not matched";
                        TempData["PaymentResponse"] = modelviewpay;
                        this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                        return null;
                    }
                    else
                    {
                        Sitecore.Diagnostics.Log.Error("PayUMoney Success Response at PayUCallBackS2SAdaniGas : " + TransactionRequestAPIResponse["status"], this);
                        using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                        {
                            PaymentHistoryData ctx = dbcontext.PaymentHistoryDatas.Where(x => x.UserId == modelviewpay.CustomerID && x.OrderId == modelviewpay.OrderId).FirstOrDefault();

                            if (ctx != null)
                            {
                                modelviewpay.PaymentType = ctx.PaymentType;
                            }
                        }
                        if (modelviewpay.PaymentType.ToString() == "Name Transfer")
                        {
                            modelviewpay.IsSuccess = 1;

                            this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);

                            modelviewpay.NameTransferRequestNumber = this.PaymentService.GetNameTransferRequestNumber(modelviewpay.CustomerID, modelviewpay.OrderId);
                            modelviewpay.IsNameTransfer = true;
                            using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                            {

                                NameTransferRequestDetail obj = dbcontext.NameTransferRequestDetails.Where(x => x.CustomerId == modelviewpay.CustomerID && x.OrderId == modelviewpay.OrderId).FirstOrDefault();


                                if (obj.SAPResponseComment != "S;Complaint Created Sucessfully.")
                                {
                                    Log.Info("Name Transfer Request Response error ", obj.SAPResponseComment);
                                    string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/SAP Services Message Error ", "Name change request Number Not Generated Please Contact with ATGL." + " Error is  : " + obj.SAPResponseComment);
                                    ViewBag.Message = messagetobedisplayed;
                                    Session["Message"] = messagetobedisplayed;
                                }
                                else
                                {
                                    Log.Info("Name Transfer Request Response is :  ", obj.SAPResponseComment);
                                    obj.RequestNumber = modelviewpay.NameTransferRequestNumber;
                                    obj.OrderId = modelviewpay.OrderId;
                                    obj.IsRequestClosed = false;
                                    NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                                    if (obj.Status == "Application_Submited_But_Payment_Required")
                                    {
                                        obj.Status = "AdditionalPaymentDone";
                                        Log.Info("Update Name Transfer Request status after payments, updated status is :  ", obj.Status);
                                        applicationCheckStatus.Id = Guid.NewGuid();
                                        applicationCheckStatus.UserId = obj.Id.ToString();
                                        applicationCheckStatus.Status = obj.Status;
                                        applicationCheckStatus.RequestNumber = obj.RequestNumber;
                                        applicationCheckStatus.CreatedDate = DateTime.Now;
                                        Log.Info("Save Name Transfer Request in NameTransferApplicationCheckStatus :  ", obj.RequestNumber);
                                        dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                        dbcontext.SubmitChanges();
                                        if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                                        {
                                            Log.Info("Send Email Sucessfully after payment completed", obj.RequestNumber);
                                            Log.Info("Email Id is :", obj.CustomerEmailId);
                                            SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, obj.Status);
                                        }
                                    }
                                    else
                                    {
                                        obj.Status = "PaymentDone";
                                        Log.Info("Update Name Transfer Request status after payments, updated status is :  ", obj.Status);
                                        applicationCheckStatus.Id = Guid.NewGuid();
                                        applicationCheckStatus.UserId = obj.Id.ToString();
                                        applicationCheckStatus.Status = obj.Status;
                                        applicationCheckStatus.RequestNumber = obj.RequestNumber;
                                        applicationCheckStatus.CreatedDate = DateTime.Now;
                                        Log.Info("Save Name Transfer Request in NameTransferApplicationCheckStatus :  ", obj.RequestNumber);
                                        dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                        dbcontext.SubmitChanges();
                                        var urlOptions = new Sitecore.Links.UrlOptions();
                                        urlOptions.AlwaysIncludeServerUrl = true;
                                        //var pageUrl = Sitecore.Links.LinkManager.GetItemUrl(Sitecore.Context.Item, urlOptions);

                                        var startItem = Sitecore.Context.Site.HostName;
                                        var StatusItem = Sitecore.Context.Database.GetItem("{5817D216-CA57-4E5A-9E61-2E17F13E570C}");
                                        var StatusURL = Sitecore.Links.LinkManager.GetItemUrl(StatusItem, urlOptions);

                                        if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                                        {
                                            Log.Info("Send Email Sucessfully after payment completed", obj.RequestNumber);
                                            Log.Info("Email Id is :", obj.CustomerEmailId);
                                            SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, "");
                                        }
                                        if (!string.IsNullOrEmpty(obj.Mobile))
                                        {
                                            Log.Info("Send Mobile Sucessfully after payment completed", obj.RequestNumber);
                                            Log.Info("Mobile Number is :", obj.Mobile);
                                            Data.Items.Item settingsItem;
                                            settingsItem = Context.Database.GetItem(Templates.MailTemplate.SMSNameTransferRequest);
                                            var mailTemplateItem = settingsItem;
                                            var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                            string bodyText = subject.Value;
                                            bodyText = bodyText.Replace("[RequestNumber]", obj.RequestNumber);
                                            bodyText = bodyText.Replace("[StatusURL]", StatusURL);

                                            SendNameTransferStatusSMS(obj.Mobile, bodyText);
                                        }
                                    }


                                    string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/SAP Services Message Error ", "Your name transfer request #" + obj.RequestNumber + " is generated and will be resolved within 15 days.");
                                    ViewBag.Message = messagetobedisplayed;
                                    Session["Message"] = messagetobedisplayed;
                                    Log.Info("Name Transfer Request Sucessfully Completed :  ", messagetobedisplayed);
                                }

                            }
                            TempData["PaymentResponse"] = modelviewpay;
                            Sitecore.Diagnostics.Log.Info("Payment Gateway- PayUCallBackS2SAdaniGas Response - ", PayUResponseMsg);
                            return null;
                        }
                        else
                        {
                            this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                            TempData["PaymentResponse"] = modelviewpay;
                            return null;
                        }

                    }
                }
                else
                {
                    Diagnostics.Log.Error("AdaniGasPaymentGatewayCallback PayUCallBackS2SAdaniGas API Failure, Error" + TransactionRequestAPIResponse["error"], this);
                    Sitecore.Diagnostics.Log.Error("PayUMoney Failure Response at PayUCallBackS2SAdaniGas : " + TransactionRequestAPIResponse["error_Message"], this);

                    modelviewpay.Responsecode = TransactionRequestAPIResponse["error"];
                    modelviewpay.Remark = TransactionRequestAPIResponse["error_Message"];

                    this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                    TempData["PaymentResponse"] = modelviewpay;
                    return null;
                }
            }
            catch (Exception ex)
            {
                Diagnostics.Log.Error("AdaniGasPaymentGatewayCallback PayUCallBackS2SAdaniGas API Exception, Error " + ex, this);
                Sitecore.Diagnostics.Log.Error("AdaniGasPaymentGatewayCallback PayUCallBackS2SAdaniGas API Exception Message: " + ex.Message, this);
                return null;
            }
        }

        private string GetPaymentTypeBilldeskByCode(string Paymentcode)
        {
            string paymentType = "DIRECT_BD";
            switch (Paymentcode)
            {
                case "01":
                    paymentType = "NETBANKING_BD";
                    break;
                case "02":
                    paymentType = "CREDITCARD_BD";
                    break;
                case "03":
                    paymentType = "DEBITCARD_BD";
                    break;
                case "04":
                    paymentType = "CASHCARD_BD";
                    break;
                case "05":
                    paymentType = "WALLET_BD";
                    break;
                case "06":
                    paymentType = "IMPS_BD";
                    break;
                case "07":
                    paymentType = "DIRECT_BD";
                    break;
                case "08":
                    paymentType = "DEBITCARD_BD";
                    break;
                case "09":
                    paymentType = "DIRECT_BD";
                    break;
                case "10":
                    paymentType = "UPI_BD";
                    break;
                default:
                    paymentType = "DIRECT_BD";
                    break;
            }

            return paymentType;
        }

        public ActionResult BillDeskCallBackAdaniGas()
        {
            var FailureUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentFailure);
            var SuccessUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentSuccess);
            try
            {
                string checksum = string.Empty;
                //Sitecore.Data.Database dbWeb = Sitecore.Configuration.Factory.GetDatabase("web");
                var itemInfo = webDb.GetItem(new Data.ID(Templates.PaymentConfigurationAdaniGas.ID.ToString()));

                string ChecksumKey = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.BillDeskFields.BDSK_ChecksumKey].Value;
                string merchantId = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.BillDeskFields.BDSK_Merchant_ID].Value;

                //BillDesk Response
                string responsemsg = Request.Form["msg"];
                Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackAdaniGas Callback Message - " + responsemsg, this);

                if (responsemsg != null)
                {
                    var responselist = responsemsg.Split('|');
                    var billDeskchecksum = responselist.Last().Trim();
                    var responsemsgdata = string.Join("|", responselist.Take(responselist.Count() - 1).ToArray());//responselist.Take(responselist.Count() - 1).ToArray().Join(;
                    string PaymentMode = GetPaymentTypeBilldeskByCode(responselist[7].ToString());
                    var checksumresponse = this.PaymentService.GetHMACSHA256(responsemsgdata, ChecksumKey);
                    var amount = !string.IsNullOrEmpty(responselist[4].ToString()) ? Convert.ToDouble(responselist[4].ToString()) : 00;
                    if (checksumresponse.Equals(billDeskchecksum)) // Compare Checksum
                    {
                        if (Constants.BillDeskResponse.SuccessCode.Equals(responselist[14].ToString()))
                        {
                            using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                            {
                                PaymentHistoryData ctx = dbcontext.PaymentHistoryDatas.Where(x => x.UserId == responselist[1].ToString() && x.OrderId == responselist[19].ToString()).FirstOrDefault();

                                if (ctx != null && ctx.PaymentType == "Name Transfer")
                                {
                                    var modelviewpayNameTransfer = new PayOnline()
                                    {
                                        IsSuccess = 1,
                                        TransactionId = responselist[2].ToString(),
                                        ResponseStatus = Constants.PaymentResponse.Success,
                                        Responsecode = responselist[14].ToString(),
                                        Remark = Constants.PaymentResponse.Success,
                                        PaymentRef = responselist[3].ToString(),
                                        OrderId = responselist[19].ToString(),
                                        Amount = getAmountfromDB(responselist[1].ToString(), responselist[19].ToString()),
                                        CustomerID = responselist[1].ToString(),
                                        LoginName = responselist[21].ToString(),
                                        Message = responsemsg,
                                        PaymentMode = PaymentMode,//responselist[9].ToString() + "_BD",
                                        TransactionDate = responselist[13].ToString(),
                                        PaymentType = responselist[18].ToString(),/* DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "Bill Paid"),*/
                                        PaymentGateway = 2
                                    };

                                    this.PaymentService.StorePaymentResponseAdaniGas(modelviewpayNameTransfer);

                                    modelviewpayNameTransfer.NameTransferRequestNumber = this.PaymentService.GetNameTransferRequestNumber(modelviewpayNameTransfer.CustomerID, modelviewpayNameTransfer.OrderId);
                                    modelviewpayNameTransfer.IsNameTransfer = true;
                                    using (NameTransferRequestDataContext datacontext = new NameTransferRequestDataContext())
                                    {

                                        NameTransferRequestDetail obj = datacontext.NameTransferRequestDetails.Where(x => x.CustomerId == modelviewpayNameTransfer.CustomerID && x.OrderId == modelviewpayNameTransfer.OrderId).FirstOrDefault();


                                        if (obj.SAPResponseComment != "S;Complaint Created Sucessfully.")
                                        {
                                            Log.Info("Name Transfer Request Response error ", obj.SAPResponseComment);
                                            string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/SAP Services Message Error ", "Name change request Number Not Generated Please Contact with ATGL." + " Error is  : " + obj.SAPResponseComment);
                                            ViewBag.Message = messagetobedisplayed;
                                            Session["Message"] = messagetobedisplayed;
                                        }
                                        else
                                        {
                                            Log.Info("Name Transfer Request Response is :  ", obj.SAPResponseComment);
                                            obj.RequestNumber = modelviewpayNameTransfer.NameTransferRequestNumber;
                                            obj.OrderId = modelviewpayNameTransfer.OrderId;
                                            obj.IsRequestClosed = false;
                                            NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                                            if (obj.Status == "Application_Submited_But_Payment_Required")
                                            {
                                                obj.Status = "AdditionalPaymentDone";
                                                Log.Info("Update Name Transfer Request status after payments, updated status is :  ", obj.Status);
                                                applicationCheckStatus.Id = Guid.NewGuid();
                                                applicationCheckStatus.UserId = obj.Id.ToString();
                                                applicationCheckStatus.Status = obj.Status;
                                                applicationCheckStatus.RequestNumber = obj.RequestNumber;
                                                applicationCheckStatus.CreatedDate = DateTime.Now;
                                                Log.Info("Save Name Transfer Request in NameTransferApplicationCheckStatus :  ", obj.RequestNumber);
                                                datacontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                                datacontext.SubmitChanges();
                                                if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                                                {
                                                    Log.Info("Send Email Sucessfully after payment completed", obj.RequestNumber);
                                                    Log.Info("Email Id is :", obj.CustomerEmailId);
                                                    SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, obj.Status);
                                                }
                                            }
                                            else
                                            {
                                                obj.Status = "PaymentDone";
                                                Log.Info("Update Name Transfer Request status after payments, updated status is :  ", obj.Status);
                                                applicationCheckStatus.Id = Guid.NewGuid();
                                                applicationCheckStatus.UserId = obj.Id.ToString();
                                                applicationCheckStatus.Status = obj.Status;
                                                applicationCheckStatus.RequestNumber = obj.RequestNumber;
                                                applicationCheckStatus.CreatedDate = DateTime.Now;
                                                Log.Info("Save Name Transfer Request in NameTransferApplicationCheckStatus :  ", obj.RequestNumber);
                                                datacontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                                datacontext.SubmitChanges();
                                                var urlOptions = new Sitecore.Links.UrlOptions();
                                                urlOptions.AlwaysIncludeServerUrl = true;
                                                //var pageUrl = Sitecore.Links.LinkManager.GetItemUrl(Sitecore.Context.Item, urlOptions);

                                                var startItem = Sitecore.Context.Site.HostName;
                                                var StatusItem = Sitecore.Context.Database.GetItem("{5817D216-CA57-4E5A-9E61-2E17F13E570C}");
                                                var StatusURL = Sitecore.Links.LinkManager.GetItemUrl(StatusItem, urlOptions);

                                                if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                                                {
                                                    Log.Info("Send Email Sucessfully after payment completed", obj.RequestNumber);
                                                    Log.Info("Email Id is :", obj.CustomerEmailId);
                                                    SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, "");
                                                }
                                                if (!string.IsNullOrEmpty(obj.Mobile))
                                                {
                                                    Log.Info("Send Mobile Sucessfully after payment completed", obj.RequestNumber);
                                                    Log.Info("Mobile Number is :", obj.Mobile);
                                                    Data.Items.Item settingsItem;
                                                    settingsItem = Context.Database.GetItem(Templates.MailTemplate.SMSNameTransferRequest);
                                                    var mailTemplateItem = settingsItem;
                                                    var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                                    string bodyText = subject.Value;
                                                    bodyText = bodyText.Replace("[RequestNumber]", obj.RequestNumber);
                                                    bodyText = bodyText.Replace("[StatusURL]", StatusURL);

                                                    SendNameTransferStatusSMS(obj.Mobile, bodyText);
                                                }
                                            }


                                            string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/SAP Services Message Error ", "Your name transfer request #" + obj.RequestNumber + " is generated and will be resolved within 15 days.");
                                            ViewBag.Message = messagetobedisplayed;
                                            Session["Message"] = messagetobedisplayed;
                                            Log.Info("Name Transfer Request Sucessfully Completed :  ", messagetobedisplayed);
                                        }

                                    }
                                    TempData["PaymentResponse"] = modelviewpayNameTransfer;
                                    Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackAdaniGas Response - ", responsemsg);
                                    return this.Redirect(SuccessUrl);
                                }
                                else
                                {
                                    var modelviewpay = new PayOnline()
                                    {
                                        IsSuccess = 1,
                                        TransactionId = responselist[2].ToString(),
                                        ResponseStatus = Constants.PaymentResponse.Success,
                                        Responsecode = responselist[14].ToString(),
                                        Remark = Constants.PaymentResponse.Success,
                                        PaymentRef = responselist[3].ToString(),
                                        OrderId = responselist[19].ToString(),
                                        Amount = getAmountfromDB(responselist[1].ToString(), responselist[19].ToString()),
                                        CustomerID = responselist[1].ToString(),
                                        LoginName = responselist[21].ToString(),
                                        Message = responsemsg,
                                        PaymentMode = PaymentMode,//responselist[9].ToString() + "_BD",
                                        TransactionDate = responselist[13].ToString(),
                                        PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "Bill Paid"),
                                        PaymentGateway = 2
                                    };



                                    //ADANIENRGY|1000356801|SPMP8833897674|802670|1098.00|PMP|607093|03|INR|RDDIRECT|NA|NA|00000000.00|26-05-2020 17:35:30|0300|NA|1000356801|20200529|Bill Payment|BSBKVUGBH0HYV1M|-|1000356801|NA|NA|PGS10001-Success|53FFF3F4987856C3CC85D8C0E7F1FE2A3814B695EC69C0DC891A140691A8A04A
                                    this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);

                                    if (responselist[1].ToString().StartsWith("DODO")) // For dodo payment
                                    {
                                        this.PaymentService.UpdateDODOPaymentStatus(modelviewpay);
                                    }

                                    TempData["PaymentResponse"] = modelviewpay;
                                    Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackAdaniGas Response - ", responsemsg);
                                    return this.Redirect(SuccessUrl);
                                }
                            }





                        }
                        else
                        {
                            //error response
                            var modelviewpay = new PayOnline()
                            {
                                IsSuccess = 2,
                                TransactionId = responselist[2].ToString(),
                                ResponseStatus = Constants.PaymentResponse.Failure,
                                Responsecode = responselist[14].ToString(), // ErrorStatus
                                Remark = responselist[24].ToString(), //DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/Technical Problem Msg", "Technically difficulty in the system. Please contact customer care for more details."),
                                PaymentRef = responselist[3].ToString(),
                                OrderId = responselist[19].ToString(),
                                Amount = getAmountfromDB(responselist[1].ToString(), responselist[19].ToString()),
                                CustomerID = responselist[1].ToString(),
                                LoginName = responselist[21].ToString(),
                                Message = responsemsg,
                                PaymentMode = PaymentMode,// responselist[9].ToString() + "_BD",
                                TransactionDate = responselist[13].ToString()
                            };
                            this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                            if (modelviewpay.PaymentType == "Name Transfer")
                            {

                                //CustomerID = responselist[1].ToString(),
                                // OrderId = responselist[19].ToString(),
                                modelviewpay.NameTransferRequestNumber = this.PaymentService.GetNameTransferRequestNumber(modelviewpay.CustomerID, modelviewpay.OrderId);
                                modelviewpay.IsNameTransfer = true;

                            }

                            TempData["PaymentResponse"] = modelviewpay;
                            Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackAdaniGas Response Failure - ", responsemsg);
                            return this.Redirect(FailureUrl);
                        }
                    }
                    else
                    {
                        //Checksum Mismatch
                        var modelviewpay = new PayOnline()
                        {
                            IsSuccess = 3,
                            TransactionId = responselist[2].ToString(),
                            ResponseStatus = Constants.PaymentResponse.Failure,
                            Responsecode = responselist[14].ToString(), // ErrorStatus
                            Remark = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/Technical Problem Msg", "Technically difficulty in the system. Please contact customer care for more details."),
                            PaymentRef = responselist[3].ToString(),
                            OrderId = responselist[19].ToString(),
                            Amount = getAmountfromDB(responselist[1].ToString(), responselist[19].ToString()),
                            CustomerID = responselist[1].ToString(),
                            LoginName = responselist[21].ToString(),
                            Message = responsemsg,
                            PaymentMode = PaymentMode,// responselist[9].ToString() + "_BD",
                            TransactionDate = responselist[13].ToString()
                        };

                        this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);

                        if (modelviewpay.PaymentType == "Name Transfer")
                        {
                            //CustomerID = responselist[1].ToString(),
                            // OrderId = responselist[19].ToString(),
                            modelviewpay.NameTransferRequestNumber = this.PaymentService.GetNameTransferRequestNumber(modelviewpay.CustomerID, modelviewpay.OrderId);
                            modelviewpay.IsNameTransfer = true;
                        }

                        TempData["PaymentResponse"] = modelviewpay;
                        Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackAdaniGas Response checksum mismatch - " + responsemsg, this);
                        return this.Redirect(FailureUrl);
                    }
                }
                else
                {
                    Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackAdaniGas Response NULL error - " + responsemsg, this);
                    return this.Redirect(FailureUrl);
                }
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at BillDeskCallBackAdaniGas - :" + ex.Message, this);
                return this.Redirect(FailureUrl);
            }
        }

        [HttpPost]
        public void BillDeskCallBackS2SAdaniGas()
        {
            Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback BillDeskCallBackS2SAdaniGas API Call Start ", typeof(PayOnline));
            var FailureUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentFailure);
            var SuccessUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentSuccess);

            try
            {

                //Sitecore.Data.Database dbWeb = Sitecore.Configuration.Factory.GetDatabase("web");
                var itemInfo = webDb.GetItem(new Data.ID(Templates.PaymentConfigurationAdaniGas.ID.ToString()));

                string ChecksumKey = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.BillDeskFields.BDSK_ChecksumKey].Value;
                string merchantId = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.BillDeskFields.BDSK_Merchant_ID].Value;

                //BillDesk Response
                string responsemsg = Request.Form["msg"];

                Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackS2SAdaniGas Callback Message - " + responsemsg, this);
                Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback BillDeskCallBackS2SAdaniGas API Response " + responsemsg, typeof(PayOnline));
                if (responsemsg != null)
                {
                    var responselist = responsemsg.Split('|');
                    var billDeskchecksum = responselist.Last().Trim();
                    var responsemsgdata = string.Join("|", responselist.Take(responselist.Count() - 1).ToArray());//responselist.Take(responselist.Count() - 1).ToArray().Join(;
                    string PaymentMode = GetPaymentTypeBilldeskByCode(responselist[7].ToString());
                    var checksumresponse = this.PaymentService.GetHMACSHA256(responsemsgdata, ChecksumKey);
                    var amount = !string.IsNullOrEmpty(responselist[4].ToString()) ? Convert.ToDouble(responselist[4].ToString()) : 00;

                    if (checksumresponse.Equals(billDeskchecksum)) // Compare Checksum
                    {
                        Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback BillDeskCallBackS2SAdaniGas API ChecksumCheck " + billDeskchecksum, typeof(PayOnline));
                        if (Constants.BillDeskResponse.SuccessCode.Equals(responselist[14].ToString()))
                        {
                            Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback BillDeskCallBackS2SAdaniGas API BillDeskResponse Success " + responselist[14].ToString(), typeof(PayOnline));
                            using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                            {
                                PaymentHistoryData ctx = dbcontext.PaymentHistoryDatas.Where(x => x.UserId == responselist[1].ToString() && x.OrderId == responselist[19].ToString()).FirstOrDefault();
                                if (ctx != null && ctx.PaymentType == "Name Transfer")
                                {
                                    var modelviewpayNameTransfer = new PayOnline()
                                    {
                                        IsSuccess = 1,
                                        TransactionId = responselist[2].ToString(),
                                        ResponseStatus = Constants.PaymentResponse.Success,
                                        Responsecode = responselist[14].ToString(),
                                        Remark = Constants.PaymentResponse.Success,
                                        PaymentRef = responselist[3].ToString(),
                                        OrderId = responselist[19].ToString(),
                                        Amount = getAmountfromDB(responselist[1].ToString(), responselist[19].ToString()),
                                        CustomerID = responselist[1].ToString(),
                                        LoginName = responselist[21].ToString(),
                                        Message = responsemsg,
                                        PaymentMode = PaymentMode,//responselist[9].ToString() + "_BD",
                                        TransactionDate = responselist[13].ToString(),
                                        PaymentType = responselist[18].ToString(),/* DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "Bill Paid"),*/
                                        PaymentGateway = 2
                                    };

                                    this.PaymentService.StorePaymentResponseAdaniGas(modelviewpayNameTransfer);

                                    modelviewpayNameTransfer.NameTransferRequestNumber = this.PaymentService.GetNameTransferRequestNumber(modelviewpayNameTransfer.CustomerID, modelviewpayNameTransfer.OrderId);
                                    modelviewpayNameTransfer.IsNameTransfer = true;
                                    using (NameTransferRequestDataContext datacontext = new NameTransferRequestDataContext())
                                    {

                                        NameTransferRequestDetail obj = datacontext.NameTransferRequestDetails.Where(x => x.CustomerId == modelviewpayNameTransfer.CustomerID && x.OrderId == modelviewpayNameTransfer.OrderId).FirstOrDefault();


                                        if (obj.SAPResponseComment != "S;Complaint Created Sucessfully.")
                                        {
                                            string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/SAP Services Message Error ", "Name change request Number Not Generated Please Contact with ATGL." + " Error is  : " + obj.SAPResponseComment);
                                            ViewBag.Message = messagetobedisplayed;
                                            Session["Message"] = messagetobedisplayed;
                                        }
                                        else
                                        {
                                            obj.RequestNumber = modelviewpayNameTransfer.NameTransferRequestNumber;
                                            obj.OrderId = modelviewpayNameTransfer.OrderId;
                                            obj.IsRequestClosed = false;
                                            NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                                            if (obj.Status == "Application_Submited_But_Payment_Required")
                                            {
                                                obj.Status = "AdditionalPaymentDone";
                                                applicationCheckStatus.Id = Guid.NewGuid();
                                                applicationCheckStatus.UserId = obj.Id.ToString();
                                                applicationCheckStatus.Status = obj.Status;
                                                applicationCheckStatus.CreatedDate = DateTime.Now;
                                                applicationCheckStatus.RequestNumber = obj.RequestNumber;
                                                datacontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                                datacontext.SubmitChanges();
                                                if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                                                    SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, obj.Status);
                                            }
                                            else
                                            {
                                                obj.Status = "PaymentDone";
                                                applicationCheckStatus.Id = Guid.NewGuid();
                                                applicationCheckStatus.UserId = obj.Id.ToString();
                                                applicationCheckStatus.Status = obj.Status;
                                                applicationCheckStatus.RequestNumber = obj.RequestNumber;
                                                applicationCheckStatus.CreatedDate = DateTime.Now;
                                                datacontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                                datacontext.SubmitChanges();
                                                var urlOptions = new Sitecore.Links.UrlOptions();
                                                urlOptions.AlwaysIncludeServerUrl = true;
                                                //var pageUrl = Sitecore.Links.LinkManager.GetItemUrl(Sitecore.Context.Item, urlOptions);

                                                var startItem = Sitecore.Context.Site.HostName;
                                                var StatusItem = Sitecore.Context.Database.GetItem("{5817D216-CA57-4E5A-9E61-2E17F13E570C}");
                                                var StatusURL = Sitecore.Links.LinkManager.GetItemUrl(StatusItem, urlOptions);

                                                if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                                                {
                                                    SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, "");
                                                }
                                                if (!string.IsNullOrEmpty(obj.Mobile))
                                                {

                                                    Data.Items.Item settingsItem;
                                                    settingsItem = Context.Database.GetItem(Templates.MailTemplate.SMSNameTransferRequest);
                                                    var mailTemplateItem = settingsItem;
                                                    var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                                    string bodyText = subject.Value;
                                                    bodyText = bodyText.Replace("[RequestNumber]", obj.RequestNumber);
                                                    bodyText = bodyText.Replace("[StatusURL]", StatusURL);

                                                    SendNameTransferStatusSMS(obj.Mobile, bodyText);
                                                }
                                            }


                                            string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/SAP Services Message Error ", "Your name transfer request #" + obj.RequestNumber + " is generated and will be resolved within 15 days.");
                                            ViewBag.Message = messagetobedisplayed;
                                            Session["Message"] = messagetobedisplayed;
                                        }

                                    }
                                    TempData["PaymentResponse"] = modelviewpayNameTransfer;
                                    Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackAdaniGas Response - ", responsemsg);
                                    //return null;
                                }
                                else
                                {
                                    var modelviewpay = new PayOnline()
                                    {
                                        IsSuccess = 1,
                                        TransactionId = responselist[2].ToString(),
                                        ResponseStatus = Constants.PaymentResponse.Success,
                                        Responsecode = responselist[14].ToString(),
                                        Remark = Constants.PaymentResponse.Success,
                                        PaymentRef = responselist[3].ToString(),
                                        OrderId = responselist[19].ToString(),
                                        Amount = getAmountfromDB(responselist[1].ToString(), responselist[19].ToString()),
                                        CustomerID = responselist[1].ToString(),
                                        LoginName = responselist[21].ToString(),
                                        Message = responsemsg,
                                        PaymentMode = PaymentMode,//responselist[9].ToString() + "_BD",
                                        TransactionDate = responselist[13].ToString(),
                                        PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "Bill Paid"),
                                        PaymentGateway = 2
                                    };



                                    //ADANIENRGY|1000356801|SPMP8833897674|802670|1098.00|PMP|607093|03|INR|RDDIRECT|NA|NA|00000000.00|26-05-2020 17:35:30|0300|NA|1000356801|20200529|Bill Payment|BSBKVUGBH0HYV1M|-|1000356801|NA|NA|PGS10001-Success|53FFF3F4987856C3CC85D8C0E7F1FE2A3814B695EC69C0DC891A140691A8A04A
                                    this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);

                                    if (responselist[1].ToString().StartsWith("DODO")) // For dodo payment
                                    {
                                        this.PaymentService.UpdateDODOPaymentStatus(modelviewpay);
                                    }

                                    TempData["PaymentResponse"] = modelviewpay;
                                    Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackAdaniGas Response - ", responsemsg);
                                    //return null;
                                }
                            }

                        }
                        else
                        {
                            //error response
                            Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback BillDeskCallBackS2SAdaniGas API BillDeskResponse Fail " + responselist[14].ToString(), typeof(PayOnline));
                            var modelviewpay = new PayOnline()
                            {
                                TransactionId = responselist[2].ToString(),
                                ResponseStatus = Constants.PaymentResponse.Failure,
                                Responsecode = responselist[14].ToString(), // ErrorStatus
                                Remark = responselist[24].ToString(), //DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/Technical Problem Msg", "Technically difficulty in the system. Please contact customer care for more details."),
                                PaymentRef = responselist[3].ToString(),
                                OrderId = responselist[19].ToString(),
                                Amount = amount,// responselist[4].ToString(),
                                CustomerID = responselist[1].ToString(),
                                LoginName = responselist[21].ToString(),
                                TransactionDate = responselist[13].ToString(),
                                Message = responsemsg,
                                Email = responselist[20].ToString(),
                                PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "Bill Paid"),
                                PaymentGateway = 2,
                                PaymentMode = responselist[9].ToString() + "_BD",
                                IsS2S = "true_" + DateTime.Now
                            };
                            this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                            Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackS2SAdaniGas Response Failure - " + responsemsg, this);
                        }
                    }
                    else
                    {
                        Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback BillDeskCallBackS2SAdaniGas API ChecksumCheck Fail " + billDeskchecksum, typeof(PayOnline));
                        //Checksum Mismatch
                        var modelviewpay = new PayOnline()
                        {
                            TransactionId = responselist[2].ToString(),
                            ResponseStatus = Constants.PaymentResponse.Failure,
                            Responsecode = responselist[14].ToString(), // ErrorStatus
                            Remark = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/Technical Problem Msg", "Technically difficulty in the system. Please contact customer care for more details."),
                            PaymentRef = responselist[3].ToString(),
                            OrderId = responselist[19].ToString(),
                            Amount = amount,// responselist[4].ToString(),
                            CustomerID = responselist[1].ToString(),
                            LoginName = responselist[21].ToString(),
                            TransactionDate = responselist[13].ToString(),
                            Message = responsemsg,
                            Email = responselist[20].ToString(),
                            PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "Bill Paid"),
                            PaymentMode = responselist[9].ToString() + "_BD",
                            PaymentGateway = 2,
                            IsS2S = "true_" + DateTime.Now
                        };

                        this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                        Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackS2SAdaniGas Response checksum mismatch - ", "Checksum Mismatch for Billdesk response");
                    }
                }
                else
                {
                    Sitecore.Diagnostics.Log.Info("Payment Gateway- BillDeskCallBackS2SAdaniGas Response NULL error - " + responsemsg, this);
                }
            }
            catch (Exception ex)
            {
                Diagnostics.Log.Error("AdaniGasPaymentGatewayCallback BillDeskCallBackS2SAdaniGas API Exception ", ex, this);
                Sitecore.Diagnostics.Log.Error("Error at BillDeskCallBackS2SAdaniGas - :" + ex.Message, this);
            }
        }
        [HttpPost]
        public ActionResult PaytmCallBackAdaniGas()
        {
            var FailureUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentFailure);

            try
            {
                #region Variable Initialization

                //Sitecore.Data.Database dbWeb = Sitecore.Configuration.Factory.GetDatabase("web");
                var itemInfo = webDb.GetItem(new Data.ID(Templates.PaymentConfigurationAdaniGas.ID.ToString()));

                string merchantKey = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.PayTMFields.PTM_Merchant_Key].Value;
                string merchantID = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.PayTMFields.PTM_Merchant_ID].Value;

                #endregion

                #region Response Parameters setup after Transaction Request API Call

                Dictionary<string, string> TransactionRequestAPIResponse = new Dictionary<string, string>();
                string paytmChecksum = "";

                foreach (string key in Request.Form.Keys)
                {
                    TransactionRequestAPIResponse.Add(key.Trim(), Request.Form[key].Trim());
                }

                if (TransactionRequestAPIResponse.ContainsKey("CHECKSUMHASH"))
                {
                    paytmChecksum = TransactionRequestAPIResponse["CHECKSUMHASH"];
                    TransactionRequestAPIResponse.Remove("CHECKSUMHASH");
                }
                #endregion

                if (TransactionRequestAPIResponse["RESPCODE"] == "196" && TransactionRequestAPIResponse["RESPMSG"].Contains("entered exceeds the allowed limit"))
                {
                    var amount = !string.IsNullOrEmpty(TransactionRequestAPIResponse["TXNAMOUNT"].ToString()) ? Convert.ToDouble(TransactionRequestAPIResponse["TXNAMOUNT"].ToString()) : 00;
                    var modelviewpay = new PayOnline()
                    {
                        TransactionId = TransactionRequestAPIResponse["MID"] ?? string.Empty,
                        ResponseStatus = TransactionRequestAPIResponse["STATUS"] ?? string.Empty,
                        Responsecode = TransactionRequestAPIResponse["RESPCODE"] ?? string.Empty,
                        Remark = TransactionRequestAPIResponse["RESPMSG"] ?? string.Empty,
                        Amount = amount,
                        PaymentRef = TransactionRequestAPIResponse["BANKTXNID"] ?? string.Empty,
                        OrderId = TransactionRequestAPIResponse["ORDERID"] ?? string.Empty,
                        Message = TransactionRequestAPIResponse["RESPMSG"] ?? string.Empty,
                        PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "Bill Paid"),
                        PaymentGateway = 3
                    };
                    this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                    TempData["PaymentResponse"] = modelviewpay;
                    return this.Redirect(FailureUrl);
                }
                else
                {

                    if (CheckSum.verifyCheckSum(merchantKey, TransactionRequestAPIResponse, paytmChecksum))
                    {

                        #region Transaction Status API Call after checksum matched.

                        string responseData = this.PaymentService.PaytmTransactionStatusAPIRequestPostAdaniGas(TransactionRequestAPIResponse);
                        try
                        {
                            var TransactionStatusApiresponse = JsonConvert.DeserializeObject<Dictionary<string, string>>(responseData);

                            #region Set model property from recieved response and Store Response to sitecore Item

                            //Note : set message value with Pipe Seprated.
                            string otherResponseMsg = string.Join("|", TransactionStatusApiresponse.Select(x => x.Key + ":" + x.Value).ToArray());
                            var amount = !string.IsNullOrEmpty(TransactionStatusApiresponse["TXNAMOUNT"].ToString()) ? Convert.ToDouble(TransactionStatusApiresponse["TXNAMOUNT"].ToString()) : 00;
                            string txnDate = string.Empty;
                            if (!string.IsNullOrEmpty(TransactionStatusApiresponse["TXNDATE"]))
                            {
                                string txnDatetemp = TransactionStatusApiresponse["TXNDATE"];
                                DateTime DT = DateTime.ParseExact(txnDatetemp, "yyyy-MM-dd HH:mm:ss.0", System.Globalization.CultureInfo.CurrentCulture);
                                txnDate = DT.ToString("dd-MM-yyyy HH:mm:ss");
                            }

                            if (!TransactionStatusApiresponse.ContainsKey("PAYMENTMODE"))
                            {
                                TransactionStatusApiresponse.Add("PAYMENTMODE", "PaymentFailed");
                            }

                            //Note : write code to set parameters to Model Value.
                            var modelviewpay = new PayOnline()
                            {
                                TransactionId = TransactionStatusApiresponse["TXNID"] ?? string.Empty,
                                ResponseStatus = TransactionStatusApiresponse["STATUS"] ?? string.Empty,
                                Responsecode = TransactionStatusApiresponse["RESPCODE"] ?? string.Empty,
                                Remark = TransactionStatusApiresponse["RESPMSG"] ?? string.Empty,
                                PaymentRef = TransactionStatusApiresponse["BANKTXNID"] ?? string.Empty,
                                OrderId = TransactionStatusApiresponse["ORDERID"] ?? string.Empty,
                                Amount = getAmountfromDB(TransactionRequestAPIResponse["MERC_UNQ_REF"].Split('_')[0], TransactionStatusApiresponse["ORDERID"]),
                                CustomerID = TransactionRequestAPIResponse["MERC_UNQ_REF"].Split('_')[0] ?? string.Empty,
                                LoginName = TransactionRequestAPIResponse["MERC_UNQ_REF"].Split('_')[1] ?? string.Empty,
                                Message = otherResponseMsg ?? string.Empty,
                                PaymentMode = TransactionStatusApiresponse["PAYMENTMODE"] + "_PT",
                                TransactionDate = txnDate,
                                PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "Bill Paid"),
                                PaymentGateway = 3
                            };
                            using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                            {
                                PaymentHistoryData ctx = dbcontext.PaymentHistoryDatas.Where(x => x.UserId == modelviewpay.CustomerID && x.OrderId == modelviewpay.OrderId).FirstOrDefault();

                                if (ctx != null)
                                {
                                    modelviewpay.PaymentType = ctx.PaymentType;
                                }
                            }
                            if (modelviewpay.PaymentType.ToString() == "Name Transfer")
                            {
                                if (string.Equals(TransactionStatusApiresponse["STATUS"], Constants.PaytmResponseStatus.Success))
                                {
                                    modelviewpay.IsSuccess = 1;
                                }

                                this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);

                                modelviewpay.NameTransferRequestNumber = this.PaymentService.GetNameTransferRequestNumber(modelviewpay.CustomerID, modelviewpay.OrderId);
                                modelviewpay.IsNameTransfer = true;
                                using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                                {

                                    NameTransferRequestDetail obj = dbcontext.NameTransferRequestDetails.Where(x => x.CustomerId == modelviewpay.CustomerID && x.OrderId == modelviewpay.OrderId).FirstOrDefault();



                                    if (obj.SAPResponseComment != "S;Complaint Created Sucessfully.")
                                    {
                                        string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/SAP Services Message Error ", "Name change request Number Not Generated Please Contact with ATGL." + " Error is  : " + obj.SAPResponseComment);
                                        ViewBag.Message = messagetobedisplayed;
                                        Session["Message"] = messagetobedisplayed;
                                    }
                                    else
                                    {
                                        obj.RequestNumber = modelviewpay.NameTransferRequestNumber;
                                        obj.OrderId = modelviewpay.OrderId;
                                        obj.IsRequestClosed = false;
                                        NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                                        if (obj.Status == "Application_Submited_But_Payment_Required")
                                        {
                                            obj.Status = "AdditionalPaymentDone";
                                            applicationCheckStatus.Id = Guid.NewGuid();
                                            applicationCheckStatus.UserId = obj.Id.ToString();
                                            applicationCheckStatus.Status = obj.Status;
                                            applicationCheckStatus.CreatedDate = DateTime.Now;
                                            applicationCheckStatus.RequestNumber = obj.RequestNumber;
                                            dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                            dbcontext.SubmitChanges();
                                            if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                                                SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, obj.Status);
                                        }
                                        else
                                        {
                                            obj.Status = "PaymentDone";
                                            applicationCheckStatus.Id = Guid.NewGuid();
                                            applicationCheckStatus.UserId = obj.Id.ToString();
                                            applicationCheckStatus.Status = obj.Status;
                                            applicationCheckStatus.RequestNumber = obj.RequestNumber;
                                            applicationCheckStatus.CreatedDate = DateTime.Now;
                                            dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                            dbcontext.SubmitChanges();
                                            var urlOptions = new Sitecore.Links.UrlOptions();
                                            urlOptions.AlwaysIncludeServerUrl = true;
                                            //var pageUrl = Sitecore.Links.LinkManager.GetItemUrl(Sitecore.Context.Item, urlOptions);

                                            var startItem = Sitecore.Context.Site.HostName;
                                            var StatusItem = Sitecore.Context.Database.GetItem("{5817D216-CA57-4E5A-9E61-2E17F13E570C}");
                                            var StatusURL = Sitecore.Links.LinkManager.GetItemUrl(StatusItem, urlOptions);

                                            if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                                            {
                                                SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, "");
                                            }
                                            if (!string.IsNullOrEmpty(obj.Mobile))
                                            {

                                                Data.Items.Item settingsItem;
                                                settingsItem = Context.Database.GetItem(Templates.MailTemplate.SMSNameTransferRequest);
                                                var mailTemplateItem = settingsItem;
                                                var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                                string bodyText = subject.Value;
                                                bodyText = bodyText.Replace("[RequestNumber]", obj.RequestNumber);
                                                bodyText = bodyText.Replace("[StatusURL]", StatusURL);

                                                SendNameTransferStatusSMS(obj.Mobile, bodyText);
                                            }
                                        }


                                        string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/SAP Services Message Error ", "Your name transfer request #" + obj.RequestNumber + " is generated and will be resolved within 15 days.");
                                        ViewBag.Message = messagetobedisplayed;
                                        Session["Message"] = messagetobedisplayed;
                                    }

                                }
                                TempData["PaymentResponse"] = modelviewpay;

                                Sitecore.Diagnostics.Log.Info("Payment Gateway- Transaction Status API Response AdaniGas" + responseData, this);

                                if ((string.Equals(TransactionStatusApiresponse["TXNAMOUNT"], TransactionRequestAPIResponse["TXNAMOUNT"]))
                                        && (string.Equals(TransactionStatusApiresponse["STATUS"], Constants.PaytmResponseStatus.Success)))
                                {
                                    var SuccessUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentSuccess);

                                    return this.Redirect(SuccessUrl);
                                }
                                else
                                {
                                    Sitecore.Diagnostics.Log.Info("Payment Gateway- PaytmCallBackAdaniGas Response Failed due to ammount or status mismatch", this);
                                    return this.Redirect(FailureUrl);
                                }
                            }
                            else
                            {
                                this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);

                                #endregion
                                TempData["PaymentResponse"] = modelviewpay;

                                Sitecore.Diagnostics.Log.Info("Payment Gateway- Transaction Status API Response AdaniGas" + responseData, this);

                                if ((string.Equals(TransactionStatusApiresponse["TXNAMOUNT"], TransactionRequestAPIResponse["TXNAMOUNT"]))
                                        && (string.Equals(TransactionStatusApiresponse["STATUS"], Constants.PaytmResponseStatus.Success)))
                                {
                                    var SuccessUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentSuccess);

                                    return this.Redirect(SuccessUrl);
                                }
                                else
                                {
                                    Sitecore.Diagnostics.Log.Info("Payment Gateway- PaytmCallBackAdaniGas Response Failed due to ammount or status mismatch", this);
                                    return this.Redirect(FailureUrl);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Sitecore.Diagnostics.Log.Info("Payment Gateway- PaytmCallBackAdaniGas Response " + ex.Message, this);
                        }

                        #endregion
                    }
                    else
                    {

                        string txnDate = string.Empty;
                        if (!string.IsNullOrEmpty(TransactionRequestAPIResponse["TXNDATE"]))
                        {
                            string txnDatetemp = TransactionRequestAPIResponse["TXNDATE"];
                            DateTime DT = DateTime.ParseExact(txnDatetemp, "yyyy-MM-dd HH:mm:ss.0", System.Globalization.CultureInfo.CurrentCulture);
                            txnDate = DT.ToString("dd-MM-yyyy HH:mm:ss");
                        }
                        if (!TransactionRequestAPIResponse.ContainsKey("PAYMENTMODE"))
                        {
                            TransactionRequestAPIResponse.Add("PAYMENTMODE", "PaymentFailed");
                        }
                        var modelviewpay = new PayOnline()
                        {
                            TransactionId = TransactionRequestAPIResponse["TXNID"] ?? string.Empty,
                            ResponseStatus = TransactionRequestAPIResponse["STATUS"] ?? string.Empty,
                            Responsecode = TransactionRequestAPIResponse["RESPCODE"] ?? string.Empty,
                            Remark = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/Technical Problem Msg", "Technically difficulty in the system. Please contact customer care for more details."),
                            PaymentRef = TransactionRequestAPIResponse["BANKNAME"] ?? string.Empty,
                            OrderId = TransactionRequestAPIResponse["ORDERID"] ?? string.Empty,
                            //Amount = !string.IsNullOrEmpty(TransactionRequestAPIResponse["TXNAMOUNT"].ToString()) ? Convert.ToDouble(TransactionRequestAPIResponse["TXNAMOUNT"].ToString()) : 00,
                            Amount = getAmountfromDB(TransactionRequestAPIResponse["MERC_UNQ_REF"].Split('_')[0], TransactionRequestAPIResponse["ORDERID"]),
                            CustomerID = TransactionRequestAPIResponse["MERC_UNQ_REF"].Split('_')[0] ?? string.Empty,
                            LoginName = TransactionRequestAPIResponse["MERC_UNQ_REF"].Split('_')[1] ?? string.Empty,
                            Message = string.Join("|", TransactionRequestAPIResponse.Select(x => x.Key + ":" + x.Value).ToArray()) ?? string.Empty,
                            PaymentMode = TransactionRequestAPIResponse["PAYMENTMODE"] + "_PT",
                            TransactionDate = txnDate ?? string.Empty,
                            PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "Bill Paid"),
                            PaymentGateway = 3
                        };

                        this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                        TempData["PaymentResponse"] = modelviewpay;
                        Sitecore.Diagnostics.Log.Info("Payment Gateway- PaytmCallBackAdaniGas Response  - CheckSum Mismatch of TransactionRequestAPIResponseAdaniGas", this);
                        return this.Redirect(FailureUrl);
                    }
                }
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at PaytmCallBackAdaniGas :" + ex.Message, this);
                return this.Redirect(FailureUrl);
            }
            return this.Redirect(FailureUrl);
        }

        [HttpPost]
        public void PaytmCallBackS2SAdaniGas()
        {
            Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback PaytmCallBackS2SAdaniGas API Call Start ", typeof(PayOnline));
            var FailureUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentFailure);

            try
            {
                #region Variable Initialization

                //Sitecore.Data.Database dbWeb = Sitecore.Configuration.Factory.GetDatabase("web");
                var itemInfo = webDb.GetItem(new Data.ID(Templates.PaymentConfigurationAdaniGas.ID.ToString()));

                string merchantKey = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.PayTMFields.PTM_Merchant_Key].Value;
                string merchantID = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.PayTMFields.PTM_Merchant_ID].Value;

                #endregion

                #region Response Parameters setup after Transaction Request API Call

                Dictionary<string, string> TransactionRequestAPIResponse = new Dictionary<string, string>();
                string paytmChecksum = "";

                foreach (string key in Request.Form.Keys)
                {
                    TransactionRequestAPIResponse.Add(key.Trim(), Request.Form[key].Trim());
                }

                if (TransactionRequestAPIResponse.ContainsKey("CHECKSUMHASH"))
                {
                    paytmChecksum = TransactionRequestAPIResponse["CHECKSUMHASH"];
                    TransactionRequestAPIResponse.Remove("CHECKSUMHASH");
                }
                #endregion

                if (!TransactionRequestAPIResponse.ContainsKey("PAYMENTMODE"))
                {
                    TransactionRequestAPIResponse.Add("PAYMENTMODE", "PaymentFailed");
                }

                string otherResponseMsg = string.Join("|", TransactionRequestAPIResponse.Select(x => x.Key + ":" + x.Value).ToArray());

                Sitecore.Diagnostics.Log.Info("Payment Gateway S2S- PaytmCallBackS2SAdaniGas Response -" + otherResponseMsg, this);


                if (CheckSum.verifyCheckSum(merchantKey, TransactionRequestAPIResponse, paytmChecksum))
                {
                    Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback PaytmCallBackS2SAdaniGas API Checksum Verified " + paytmChecksum, this);
                    #region Transaction Status API Call after checksum matched.
                    try
                    {
                        #region Set model property from recieved response and Store Response to sitecore Item

                        //Note : write code to set parameters to Model Value.
                        var modelviewpay = new PayOnline()
                        {
                            TransactionId = TransactionRequestAPIResponse["TXNID"],
                            ResponseStatus = TransactionRequestAPIResponse["STATUS"],
                            Responsecode = TransactionRequestAPIResponse["RESPCODE"],
                            Remark = TransactionRequestAPIResponse["RESPMSG"],
                            PaymentRef = TransactionRequestAPIResponse["BANKNAME"],
                            OrderId = TransactionRequestAPIResponse["ORDERID"],
                            Amount = !string.IsNullOrEmpty(TransactionRequestAPIResponse["TXNAMOUNT"].ToString()) ? Convert.ToDouble(TransactionRequestAPIResponse["TXNAMOUNT"].ToString()) : 00,
                            CustomerID = TransactionRequestAPIResponse["MERC_UNQ_REF"],
                            LoginName = TransactionRequestAPIResponse["CUST_ID"],
                            Message = otherResponseMsg,
                            PaymentMode = TransactionRequestAPIResponse["PAYMENTMODE"] + "_PT",
                            PaymentGateway = 3,
                            PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "Bill Paid"),
                            IsS2S = "true_" + DateTime.Now
                        };

                        using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                        {
                            PaymentHistoryData ctx = dbcontext.PaymentHistoryDatas.Where(x => x.UserId == modelviewpay.CustomerID && x.OrderId == modelviewpay.OrderId).FirstOrDefault();

                            if (ctx != null)
                            {
                                modelviewpay.PaymentType = ctx.PaymentType;
                            }
                        }
                        if (modelviewpay.PaymentType.ToString() == "Name Transfer")
                        {
                            if (string.Equals(TransactionRequestAPIResponse["STATUS"], Constants.PaytmResponseStatus.Success))
                            {
                                modelviewpay.IsSuccess = 1;
                            }

                            this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);

                            modelviewpay.NameTransferRequestNumber = this.PaymentService.GetNameTransferRequestNumber(modelviewpay.CustomerID, modelviewpay.OrderId);
                            modelviewpay.IsNameTransfer = true;
                            using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                            {

                                NameTransferRequestDetail obj = dbcontext.NameTransferRequestDetails.Where(x => x.CustomerId == modelviewpay.CustomerID && x.OrderId == modelviewpay.OrderId).FirstOrDefault();


                                if (obj.SAPResponseComment != "S;Complaint Created Sucessfully.")
                                {
                                    string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/SAP Services Message Error ", "Name change request Number Not Generated Please Contact with ATGL." + " Error is  : " + obj.SAPResponseComment);
                                    ViewBag.Message = messagetobedisplayed;
                                    Session["Message"] = messagetobedisplayed;
                                }
                                else
                                {
                                    obj.RequestNumber = modelviewpay.NameTransferRequestNumber;
                                    obj.OrderId = modelviewpay.OrderId;
                                    obj.IsRequestClosed = false;
                                    NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                                    if (obj.Status == "Application_Submited_But_Payment_Required")
                                    {
                                        obj.Status = "AdditionalPaymentDone";
                                        applicationCheckStatus.Id = Guid.NewGuid();
                                        applicationCheckStatus.UserId = obj.Id.ToString();
                                        applicationCheckStatus.Status = obj.Status;
                                        applicationCheckStatus.CreatedDate = DateTime.Now;
                                        applicationCheckStatus.RequestNumber = obj.RequestNumber;
                                        dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                        dbcontext.SubmitChanges();
                                        if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                                            SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, obj.Status);
                                    }
                                    else
                                    {
                                        obj.Status = "PaymentDone";
                                        applicationCheckStatus.Id = Guid.NewGuid();
                                        applicationCheckStatus.UserId = obj.Id.ToString();
                                        applicationCheckStatus.Status = obj.Status;
                                        applicationCheckStatus.RequestNumber = obj.RequestNumber;
                                        applicationCheckStatus.CreatedDate = DateTime.Now;
                                        dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                        dbcontext.SubmitChanges();
                                        var urlOptions = new Sitecore.Links.UrlOptions();
                                        urlOptions.AlwaysIncludeServerUrl = true;
                                        //var pageUrl = Sitecore.Links.LinkManager.GetItemUrl(Sitecore.Context.Item, urlOptions);

                                        var startItem = Sitecore.Context.Site.HostName;
                                        var StatusItem = Sitecore.Context.Database.GetItem("{5817D216-CA57-4E5A-9E61-2E17F13E570C}");
                                        var StatusURL = Sitecore.Links.LinkManager.GetItemUrl(StatusItem, urlOptions);

                                        if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                                        {
                                            SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, "");
                                        }
                                        if (!string.IsNullOrEmpty(obj.Mobile))
                                        {

                                            Data.Items.Item settingsItem;
                                            settingsItem = Context.Database.GetItem(Templates.MailTemplate.SMSNameTransferRequest);
                                            var mailTemplateItem = settingsItem;
                                            var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                            string bodyText = subject.Value;
                                            bodyText = bodyText.Replace("[RequestNumber]", obj.RequestNumber);
                                            bodyText = bodyText.Replace("[StatusURL]", StatusURL);

                                            SendNameTransferStatusSMS(obj.Mobile, bodyText);
                                        }
                                    }


                                    string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/SAP Services Message Error ", "Your name transfer request #" + obj.RequestNumber + " is generated and will be resolved within 15 days.");
                                    ViewBag.Message = messagetobedisplayed;
                                    Session["Message"] = messagetobedisplayed;
                                }

                            }
                            TempData["PaymentResponse"] = modelviewpay;

                            Sitecore.Diagnostics.Log.Info("Payment Gateway- Transaction Status API Response AdaniGas", this);

                        }
                        else
                        {
                            this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                        }

                        #endregion

                    }
                    catch (Exception ex)
                    {
                        Sitecore.Diagnostics.Log.Error("Payment Gateway S2S- PaytmCallBackS2SAdaniGas Response - " + ex.Message, this);
                    }
                    #endregion
                }
                else
                {
                    Diagnostics.Log.Info("AdaniGasPaymentGatewayCallback PaytmCallBackS2SAdaniGas API Checksum Failed " + paytmChecksum, this);
                    var modelviewpay = new PayOnline()
                    {
                        TransactionId = TransactionRequestAPIResponse["TXNID"],
                        ResponseStatus = TransactionRequestAPIResponse["STATUS"],
                        Responsecode = TransactionRequestAPIResponse["RESPCODE"],
                        Remark = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/Checksum MissMatch", "Checksum Missmatch"),
                        PaymentRef = TransactionRequestAPIResponse["BANKNAME"],
                        OrderId = TransactionRequestAPIResponse["ORDERID"],
                        Amount = !string.IsNullOrEmpty(TransactionRequestAPIResponse["TXNAMOUNT"].ToString()) ? Convert.ToDouble(TransactionRequestAPIResponse["TXNAMOUNT"].ToString()) : 00,
                        CustomerID = TransactionRequestAPIResponse["MERC_UNQ_REF"],
                        LoginName = TransactionRequestAPIResponse["CUST_ID"],
                        Message = otherResponseMsg,
                        PaymentMode = TransactionRequestAPIResponse["PAYMENTMODE"] + "_PT",
                        PaymentGateway = 3,
                        PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "Bill Paid"),
                        IsS2S = "true_" + DateTime.Now
                    };

                    this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);

                    Sitecore.Diagnostics.Log.Info("Payment Gateway- PaytmCallBackS2SAdaniGas Response  CheckSum Mismatch of TransactionRequestAPIResponse", this);
                }
            }
            catch (Exception ex)
            {
                Diagnostics.Log.Error("AdaniGasPaymentGatewayCallback PaytmCallBackS2SAdaniGas API Exception ", ex, this);
                Sitecore.Diagnostics.Log.Error("Error at PaytmCallBackS2SAdaniGas - : " + ex.Message, this);
            }
        }

        //HDFC PG Added By KETAN 
        [HttpPost]
        public ActionResult HDFC_CallBackAdaniGas()
        {
            var FailureUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentFailure);
            var SuccessUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentSuccess);

            //Sitecore.Data.Database dbWeb = Sitecore.Configuration.Factory.GetDatabase("web");
            var itemInfo = webDb.GetItem(new Data.ID(Templates.PaymentConfigurationAdaniGas.ID.ToString()));

            string workingKey = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.HDFCFields.HDFC_Working_Key].Value;
            CCACrypto ccaCrypto = new CCACrypto();

            //NameValueCollection Params = new NameValueCollection();

            try
            {
                Log.Info("HDFC for below 10k for AGL Received Callback:" + Request.Form["encResp"], this);
                string encResponse = ccaCrypto.Decrypt(Request.Form["encResp"], workingKey);
                Log.Info("HDFC for below 10k for AGL Received Callback Decrypted:" + encResponse, this);
                string[] segments = encResponse.Split('&');
                Dictionary<string, string> TransactionRequestAPIResponse = new Dictionary<string, string>();

                foreach (string seg in segments)
                {
                    string[] parts = seg.Split('=');
                    if (parts.Length > 0)
                    {
                        string Key = parts[0].Trim();
                        string Value = parts[1].Trim();
                        //Params.Add(Key, Value);
                        TransactionRequestAPIResponse.Add(Key, Value);
                    }
                }
                var modelviewpay = new PayOnline()
                {
                    TransactionId = TransactionRequestAPIResponse["tracking_id"], // PayUMoney Generated TrnansactionId
                    ResponseStatus = TransactionRequestAPIResponse["order_status"],
                    Responsecode = TransactionRequestAPIResponse["status_message"],
                    PaymentRef = !string.IsNullOrEmpty(TransactionRequestAPIResponse["bank_ref_no"]) ? TransactionRequestAPIResponse["bank_ref_no"] : string.Empty,
                    Remark = TransactionRequestAPIResponse.ContainsKey("failure_message") ? TransactionRequestAPIResponse["failure_message"] : string.Empty,
                    OrderId = !string.IsNullOrEmpty(TransactionRequestAPIResponse["order_id"]) ? TransactionRequestAPIResponse["order_id"] : string.Empty,
                    Amount = getAmountfromDB(TransactionRequestAPIResponse["merchant_param1"], TransactionRequestAPIResponse["order_id"]),
                    CustomerID = !string.IsNullOrEmpty(TransactionRequestAPIResponse["merchant_param1"]) ? TransactionRequestAPIResponse["merchant_param1"] : string.Empty, // Account Number
                    LoginName = !string.IsNullOrEmpty(TransactionRequestAPIResponse["merchant_param3"]) ? TransactionRequestAPIResponse["merchant_param3"] : string.Empty, // User Name for Login User
                    PaymentType = !string.IsNullOrEmpty(TransactionRequestAPIResponse["merchant_param4"]) ? TransactionRequestAPIResponse["merchant_param4"] : string.Empty,
                    Message = encResponse,
                    TransactionDate = !string.IsNullOrEmpty(TransactionRequestAPIResponse["trans_date"]) ? TransactionRequestAPIResponse["trans_date"] : System.DateTime.Now.ToString(),
                    PaymentMode = !string.IsNullOrEmpty(TransactionRequestAPIResponse["payment_mode"]) ? TransactionRequestAPIResponse["payment_mode"] : string.Empty
                };
                if (modelviewpay.PaymentMode.ToLower() == "unified payments")
                {
                    modelviewpay.PaymentMode = "HDFC_UPI";
                }
                else if (modelviewpay.PaymentMode.ToLower() == "bharat qr")
                {
                    modelviewpay.PaymentMode = "HDFC_BHARATQR";
                }
                else if (modelviewpay.PaymentMode.ToLower() == "credit card")
                {
                    modelviewpay.PaymentMode = "HDFC_CC";
                }
                else if (modelviewpay.PaymentMode.ToLower() == "debit card")
                {
                    modelviewpay.PaymentMode = "HDFC_DC";
                }
                else if (modelviewpay.PaymentMode.ToLower() == "net banking")
                {
                    modelviewpay.PaymentMode = "HDFC_NB";
                }
                else if (modelviewpay.PaymentMode.ToLower() == "wallet")
                {
                    modelviewpay.PaymentMode = "HDFC_WALLET";
                }
                else if (modelviewpay.PaymentMode.ToLower() == "upi")
                {
                    modelviewpay.PaymentMode = "HDFC_UPI";
                }

                if (TransactionRequestAPIResponse["order_status"] == Constants.PaymentResponse.Success)
                {
                    if (!ValidatePaymentfromDB(TransactionRequestAPIResponse["merchant_param1"], TransactionRequestAPIResponse["order_id"]))
                    {
                        Sitecore.Diagnostics.Log.Error("HDFC order/customerId missmatch value HDFC_CallBackAdaniGas.", this);

                        //Value didn't match that means some paramter value change between transaction 
                        modelviewpay.Remark = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/Technical Problem Msg", "Technically difficulty in the system. Please contact customer care for more details.");//"Technically difficulty in the system. Please contact customer care for more details.";
                        modelviewpay.Responsecode = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/HDFC CallBack MissMatch", "Return value did not matched");//"Hash value did not matched";
                        TempData["PaymentResponse"] = modelviewpay;
                        this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                        return this.Redirect(FailureUrl);
                    }
                    else
                    {
                        Sitecore.Diagnostics.Log.Error("HDFC Success Response at HDFC_CallBackAdaniGas : " + TransactionRequestAPIResponse["order_status"], this);
                        if (modelviewpay.PaymentType == "Name Transfer")
                        {
                            modelviewpay.IsSuccess = 1;
                        }
                        this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                        if (modelviewpay.PaymentType == "Name Transfer")
                        {
                            //CustomerID = responselist[1].ToString(),
                            // OrderId = responselist[19].ToString(),
                            modelviewpay.NameTransferRequestNumber = this.PaymentService.GetNameTransferRequestNumber(modelviewpay.CustomerID, modelviewpay.OrderId);
                            modelviewpay.IsNameTransfer = true;
                            using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                            {

                                NameTransferRequestDetail obj = dbcontext.NameTransferRequestDetails.Where(x => x.CustomerId == modelviewpay.CustomerID && x.OrderId == modelviewpay.OrderId).FirstOrDefault();


                                if (obj.SAPResponseComment != "S;Complaint Created Sucessfully.")
                                {
                                    string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/SAP Services Message Error ", "Name change request Number Not Generated Please Contact with ATGL." + " Error is  : " + obj.SAPResponseComment);
                                    ViewBag.Message = messagetobedisplayed;
                                    Session["Message"] = messagetobedisplayed;
                                }
                                else
                                {
                                    obj.RequestNumber = modelviewpay.NameTransferRequestNumber;
                                    obj.OrderId = modelviewpay.OrderId;
                                    obj.IsRequestClosed = false;
                                    NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                                    if (obj.Status == "Application_Submited_But_Payment_Required")
                                    {
                                        obj.Status = "AdditionalPaymentDone";
                                        applicationCheckStatus.Id = Guid.NewGuid();
                                        applicationCheckStatus.UserId = obj.Id.ToString();
                                        applicationCheckStatus.Status = obj.Status;
                                        applicationCheckStatus.RequestNumber = obj.RequestNumber;
                                        applicationCheckStatus.CreatedDate = DateTime.Now;
                                        dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                        dbcontext.SubmitChanges();
                                        if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                                            SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, obj.Status);
                                    }
                                    else
                                    {
                                        obj.Status = "PaymentDone";
                                        applicationCheckStatus.Id = Guid.NewGuid();
                                        applicationCheckStatus.UserId = obj.Id.ToString();
                                        applicationCheckStatus.Status = obj.Status;
                                        applicationCheckStatus.RequestNumber = obj.RequestNumber;
                                        applicationCheckStatus.CreatedDate = DateTime.Now;
                                        dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                        dbcontext.SubmitChanges();
                                        var urlOptions = new Sitecore.Links.UrlOptions();
                                        urlOptions.AlwaysIncludeServerUrl = true;
                                        //var pageUrl = Sitecore.Links.LinkManager.GetItemUrl(Sitecore.Context.Item, urlOptions);

                                        var startItem = Sitecore.Context.Site.HostName;
                                        var StatusItem = Sitecore.Context.Database.GetItem("{5817D216-CA57-4E5A-9E61-2E17F13E570C}");
                                        var StatusURL = Sitecore.Links.LinkManager.GetItemUrl(StatusItem, urlOptions);

                                        if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                                        {
                                            SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, "");
                                        }
                                        if (!string.IsNullOrEmpty(obj.Mobile))
                                        {

                                            Data.Items.Item settingsItem;
                                            settingsItem = Context.Database.GetItem(Templates.MailTemplate.SMSNameTransferRequest);
                                            var mailTemplateItem = settingsItem;
                                            var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                            string bodyText = subject.Value;
                                            bodyText = bodyText.Replace("[RequestNumber]", obj.RequestNumber);
                                            bodyText = bodyText.Replace("[StatusURL]", StatusURL);

                                            SendNameTransferStatusSMS(obj.Mobile, bodyText);
                                        }
                                    }


                                    string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/SAP Services Message Error ", "Your name transfer request #" + obj.RequestNumber + " is generated and will be resolved within 15 days.");
                                    ViewBag.Message = messagetobedisplayed;
                                    Session["Message"] = messagetobedisplayed;
                                }
                            }
                        }
                        TempData["PaymentResponse"] = modelviewpay;
                        return this.Redirect(SuccessUrl);
                    }
                }
                else
                {
                    Sitecore.Diagnostics.Log.Error("HDFC Failure Response at HDFC_CallBackAdaniGas : " + TransactionRequestAPIResponse["failure_message"], this);

                    modelviewpay.Responsecode = TransactionRequestAPIResponse["status_message"];
                    modelviewpay.Remark = TransactionRequestAPIResponse["failure_message"];

                    this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                    TempData["PaymentResponse"] = modelviewpay;
                    return this.Redirect(FailureUrl);
                }
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at HDFC_CallBackAdaniGas:" + ex.Message, this);
                return this.Redirect(FailureUrl);
            }
        }

        // For Payment Above Rs.10000
        [HttpPost]
        public ActionResult HDFC_CallBackAdaniGasATGL()
        {
            var FailureUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentFailure);
            var SuccessUrl = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.PaymentSuccess);

            //Sitecore.Data.Database dbWeb = Sitecore.Configuration.Factory.GetDatabase("web");
            var itemInfo = webDb.GetItem(new Data.ID(Templates.PaymentConfigurationAdaniGas.ID.ToString()));

            string workingKey = itemInfo.Fields[Templates.PaymentConfigurationAdaniGas.HDFCFieldsForATGL.HDFC_Working_Key].Value;
            CCACrypto ccaCrypto = new CCACrypto();

            //NameValueCollection Params = new NameValueCollection();

            try
            {
                Log.Info("HDFC for above 10k for ATGL Received Callback:" + Request.Form["encResp"], this);
                string encResponse = ccaCrypto.Decrypt(Request.Form["encResp"], workingKey);
                Log.Info("HDFC for above 10k for ATGL Received Callback Decrypted:" + encResponse, this);
                string[] segments = encResponse.Split('&');
                Dictionary<string, string> TransactionRequestAPIResponse = new Dictionary<string, string>();

                foreach (string seg in segments)
                {
                    string[] parts = seg.Split('=');
                    if (parts.Length > 0)
                    {
                        string Key = parts[0].Trim();
                        string Value = parts[1].Trim();
                        //Params.Add(Key, Value);
                        TransactionRequestAPIResponse.Add(Key, Value);
                    }
                }
                var modelviewpay = new PayOnline()
                {
                    TransactionId = TransactionRequestAPIResponse["tracking_id"], //
                    ResponseStatus = TransactionRequestAPIResponse["order_status"],
                    Responsecode = TransactionRequestAPIResponse["status_message"],
                    PaymentRef = !string.IsNullOrEmpty(TransactionRequestAPIResponse["bank_ref_no"]) ? TransactionRequestAPIResponse["bank_ref_no"] : string.Empty,
                    Remark = TransactionRequestAPIResponse.ContainsKey("failure_message") ? TransactionRequestAPIResponse["failure_message"] : string.Empty,
                    OrderId = !string.IsNullOrEmpty(TransactionRequestAPIResponse["order_id"]) ? TransactionRequestAPIResponse["order_id"] : string.Empty,
                    Amount = getAmountfromDB(TransactionRequestAPIResponse["merchant_param1"], TransactionRequestAPIResponse["order_id"]),
                    CustomerID = !string.IsNullOrEmpty(TransactionRequestAPIResponse["merchant_param1"]) ? TransactionRequestAPIResponse["merchant_param1"] : string.Empty, // Account Number
                    LoginName = !string.IsNullOrEmpty(TransactionRequestAPIResponse["merchant_param3"]) ? TransactionRequestAPIResponse["merchant_param3"] : string.Empty, // User Name for Login User
                    PaymentType = !string.IsNullOrEmpty(TransactionRequestAPIResponse["merchant_param4"]) ? TransactionRequestAPIResponse["merchant_param4"] : string.Empty,
                    Message = encResponse,
                    TransactionDate = !string.IsNullOrEmpty(TransactionRequestAPIResponse["trans_date"]) ? TransactionRequestAPIResponse["trans_date"] : System.DateTime.Now.ToString(),
                    PaymentMode = !string.IsNullOrEmpty(TransactionRequestAPIResponse["payment_mode"]) ? TransactionRequestAPIResponse["payment_mode"] : string.Empty
                };

                if (TransactionRequestAPIResponse["order_status"] == Constants.PaymentResponse.Success)
                {
                    if (!ValidatePaymentfromDB(TransactionRequestAPIResponse["merchant_param1"], TransactionRequestAPIResponse["order_id"]))
                    {
                        Sitecore.Diagnostics.Log.Error("HDFC order/customerId missmatch value HDFC_CallBackAdaniGasATGL.", this);

                        //Value didn't match that means some paramter value change between transaction 
                        modelviewpay.Remark = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/Technical Problem Msg", "Technically difficulty in the system. Please contact customer care for more details.");//"Technically difficulty in the system. Please contact customer care for more details.";
                        modelviewpay.Responsecode = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/HDFC CallBack MissMatch", "Return value did not matched");//"Hash value did not matched";
                        TempData["PaymentResponse"] = modelviewpay;
                        this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                        return this.Redirect(FailureUrl);
                    }
                    else
                    {
                        Sitecore.Diagnostics.Log.Error("HDFC Success Response at HDFC_CallBackAdaniGasATGL : " + TransactionRequestAPIResponse["order_status"], this);
                        if (modelviewpay.PaymentType == "Name Transfer")
                        {
                            modelviewpay.IsSuccess = 1;
                        }
                        this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                        if (modelviewpay.PaymentType == "Name Transfer")
                        {
                            //CustomerID = responselist[1].ToString(),
                            // OrderId = responselist[19].ToString(),
                            modelviewpay.NameTransferRequestNumber = this.PaymentService.GetNameTransferRequestNumber(modelviewpay.CustomerID, modelviewpay.OrderId);
                            modelviewpay.IsNameTransfer = true;
                            using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                            {

                                NameTransferRequestDetail obj = dbcontext.NameTransferRequestDetails.Where(x => x.CustomerId == modelviewpay.CustomerID && x.OrderId == modelviewpay.OrderId).FirstOrDefault();


                                if (obj.SAPResponseComment != "S;Complaint Created Sucessfully.")
                                {
                                    string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/SAP Services Message Error ", "Name change request Number Not Generated Please Contact with ATGL." + " Error is  : " + obj.SAPResponseComment);
                                    ViewBag.Message = messagetobedisplayed;
                                    Session["Message"] = messagetobedisplayed;
                                }
                                else
                                {
                                    obj.RequestNumber = modelviewpay.NameTransferRequestNumber;
                                    obj.OrderId = modelviewpay.OrderId;
                                    obj.IsRequestClosed = false;
                                    NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                                    if (obj.Status == "Application_Submited_But_Payment_Required")
                                    {
                                        obj.Status = "AdditionalPaymentDone";
                                        applicationCheckStatus.Id = Guid.NewGuid();
                                        applicationCheckStatus.UserId = obj.Id.ToString();
                                        applicationCheckStatus.Status = obj.Status;
                                        applicationCheckStatus.RequestNumber = obj.RequestNumber;
                                        applicationCheckStatus.CreatedDate = DateTime.Now;
                                        dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                        dbcontext.SubmitChanges();
                                        if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                                            SendNameTransferStatusEmail(obj.CustomerId, obj.CustomerEmailId, obj.Status);
                                    }
                                    else
                                    {
                                        obj.Status = "PaymentDone";
                                        applicationCheckStatus.Id = Guid.NewGuid();
                                        applicationCheckStatus.UserId = obj.Id.ToString();
                                        applicationCheckStatus.Status = obj.Status;
                                        applicationCheckStatus.RequestNumber = obj.RequestNumber;
                                        applicationCheckStatus.CreatedDate = DateTime.Now;
                                        dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                        dbcontext.SubmitChanges();
                                        var urlOptions = new Sitecore.Links.UrlOptions();
                                        urlOptions.AlwaysIncludeServerUrl = true;
                                        //var pageUrl = Sitecore.Links.LinkManager.GetItemUrl(Sitecore.Context.Item, urlOptions);

                                        var startItem = Sitecore.Context.Site.HostName;
                                        var StatusItem = Sitecore.Context.Database.GetItem("{5817D216-CA57-4E5A-9E61-2E17F13E570C}");
                                        var StatusURL = Sitecore.Links.LinkManager.GetItemUrl(StatusItem, urlOptions);

                                        if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                                        {
                                            SendNameTransferStatusEmail(obj.CustomerId, obj.CustomerEmailId, "");
                                        }
                                        if (!string.IsNullOrEmpty(obj.Mobile))
                                        {

                                            Data.Items.Item settingsItem;
                                            settingsItem = Context.Database.GetItem(Templates.MailTemplate.SMSNameTransferRequest);
                                            var mailTemplateItem = settingsItem;
                                            var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                            string bodyText = subject.Value;
                                            bodyText = bodyText.Replace("[RequestNumber]", obj.RequestNumber);
                                            bodyText = bodyText.Replace("[StatusURL]", StatusURL);

                                            SendNameTransferStatusSMS(obj.Mobile, bodyText);
                                        }

                                    }


                                    string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/SAP Services Message Error ", "Your name transfer request #" + obj.RequestNumber + " is generated and will be resolved within 15 days.");
                                    ViewBag.Message = messagetobedisplayed;
                                    Session["Message"] = messagetobedisplayed;
                                }
                            }
                        }
                        TempData["PaymentResponse"] = modelviewpay;
                        return this.Redirect(SuccessUrl);
                    }
                }
                else
                {
                    Sitecore.Diagnostics.Log.Error("HDFC Failure Response at HDFC_CallBackAdaniGasATGL : " + TransactionRequestAPIResponse["failure_message"], this);

                    modelviewpay.Responsecode = TransactionRequestAPIResponse["status_message"];
                    modelviewpay.Remark = TransactionRequestAPIResponse["failure_message"];

                    this.PaymentService.StorePaymentResponseAdaniGas(modelviewpay);
                    TempData["PaymentResponse"] = modelviewpay;
                    return this.Redirect(FailureUrl);
                }
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at HDFC_CallBackAdaniGasATGL:" + ex.Message, this);
                return this.Redirect(FailureUrl);
            }
        }
        public void HDFC_PaymentStatusAPI(string orderId)
        {
            PayOnline t = new PayOnline();
            t.OrderId = orderId;
            PaymentService.HDFCTransactionStatusAPIAdaniGasPost(t);
        }
        #endregion

        #region PaymentSuccessAdaniGasAndPaymentFailure
        public ActionResult PaymentSuccessAdaniGas()
        {
            var model = new PayOnline();
            if (TempData["PaymentResponse"] != null)
            {
                model = (PayOnline)TempData["PaymentResponse"];
                if (SessionHelper.UserSession.AdaniGasUserSessionContext != null && SessionHelper.UserSession.AdaniGasUserSessionContext.IsLoggedIn)
                {

                    ViewBag.IsUserLoggedIn = true;
                    ViewBag.UserType = WebAPIAdaniGas.AnotherPayment(SessionHelper.UserSession.AdaniGasUserSessionContext.userType.ToLower());
                }
                var modeldata = objWebAPIAdaniGas.QuickPay(model.CustomerID);
                model.CustomerName = modeldata.CustomerName;
            }
            System.Web.HttpContext.Current.Session["AfterSalesData"] = null;
            Sitecore.Diagnostics.Log.Info("Payment Success AdaniGas Response", this);
            return this.View(model);
        }

        public ActionResult PaymentFailureAdaniGas()
        {
            var model = new PayOnline();
            if (TempData["PaymentResponse"] != null)
            {
                model = (PayOnline)TempData["PaymentResponse"];
                if (SessionHelper.UserSession.AdaniGasUserSessionContext != null && SessionHelper.UserSession.AdaniGasUserSessionContext.IsLoggedIn)
                {
                    ViewBag.IsUserLoggedIn = true;
                    ViewBag.UserType = WebAPIAdaniGas.AnotherPayment(SessionHelper.UserSession.AdaniGasUserSessionContext.userType.ToLower());
                }

                if (!string.IsNullOrEmpty(model.CustomerID))
                {
                    var modeldata = objWebAPIAdaniGas.QuickPay(model.CustomerID);
                    model.CustomerName = modeldata.CustomerName;
                }
            }
            System.Web.HttpContext.Current.Session["AfterSalesData"] = null;
            Sitecore.Diagnostics.Log.Info("Payment Failure AdaniGas Response", this);
            return this.View(model);
        }

        #endregion

        #endregion

        #region ||** Post FeedBack Adani Gas **||

        [HttpPost]
        public JsonResult GetCustomerInfo(string customerId = null)
        {
            try
            {
                var response = objWebAPIAdaniGas.CustomerInfo(customerId);
                var jsonString = response.Content;
                if (!string.IsNullOrEmpty(jsonString))
                {
                    // convert JSON text contained in string json into an XML node
                    var xml = XDocument.Load(JsonReaderWriterFactory.CreateJsonReader(Encoding.ASCII.GetBytes(jsonString), new XmlDictionaryReaderQuotas()));
                    IEnumerable<XElement> element = xml.Descendants().Where(p => p.Name.LocalName == "d");
                    if (element != null && element.Any())
                    {
                        var data = new
                        {
                            customername = element.FirstOrDefault() != null ? element.Descendants().FirstOrDefault(p => p.Name.LocalName == "Name").Value : string.Empty
                        };
                        return Json(data, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var data = new
                        {
                            customername = string.Empty
                        };
                        return Json(data, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    var data = new
                    {
                        customername = string.Empty
                    };
                    return Json(data, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception)
            {

                var data = new
                {
                    customername = string.Empty
                };
                return Json(data, JsonRequestBehavior.AllowGet);
            }

        }


        public ActionResult CustomerFeedBack()
        {
            CustomerFeedbackAdaniGasModel model = new CustomerFeedbackAdaniGasModel();
            return this.View(model);
        }


        [HttpPost]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        public ActionResult CustomerFeedBack(CustomerFeedbackAdaniGasModel feedback)
        {
            if (!ModelState.IsValid)
            {
                return this.View(feedback);
            }

            if (!this.IsCaptchaValid("Captcha Validation Required."))
            {
                ModelState.AddModelError(nameof(feedback.Captcha), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Captcha required", "Captcha Validation Required."));
                return this.View(feedback);
            }

            try
            {
                IRestResponse response = null;
                WebAPIAdaniGas _webApiAdaniGas = new WebAPIAdaniGas();
                CustomerFeedbackAdaniGasModel existingCusomerDetail = new CustomerFeedbackAdaniGasModel();
                CustomerFeedbackAdaniGasModel newCusomerDetail = new CustomerFeedbackAdaniGasModel();
                if (!string.IsNullOrEmpty(feedback.CustomerID) && !string.Equals("0000000000", feedback.CustomerID))
                {
                    existingCusomerDetail.CustomerID = feedback.CustomerID;
                    existingCusomerDetail.CustomerName = feedback.CustomerName;
                    existingCusomerDetail.Del_Performance = feedback.Del_Performance;
                    existingCusomerDetail.Handl_Cust_Comp = feedback.Handl_Cust_Comp;
                    existingCusomerDetail.Overall_Performance = feedback.Overall_Performance;
                    existingCusomerDetail.Pricing = feedback.Pricing;
                    existingCusomerDetail.Rep_Performance = feedback.Rep_Performance;
                    existingCusomerDetail.Response_CQR = feedback.Response_CQR;

                    response = _webApiAdaniGas.PostFeedback(existingCusomerDetail);
                }
                else
                {
                    if (string.IsNullOrEmpty(feedback.NewCustomerName))
                    {
                        ModelState.AddModelError(nameof(feedback.NewCustomerName), DictionaryPhraseRepository.Current.Get("/Accounts/NewCustomerName", "Please enter Customer Name."));
                        return this.View(feedback);
                    }
                    newCusomerDetail.CustomerName = feedback.NewCustomerName;
                    newCusomerDetail.Address = string.Format("{0},{1},{2},{3}", feedback.Address, feedback.City, feedback.Pincode, feedback.ContactNumber);
                    newCusomerDetail.Del_Performance = feedback.Del_Performance;
                    newCusomerDetail.Handl_Cust_Comp = feedback.Handl_Cust_Comp;
                    newCusomerDetail.Overall_Performance = feedback.Overall_Performance;
                    newCusomerDetail.Pricing = feedback.Pricing;
                    newCusomerDetail.Rep_Performance = feedback.Rep_Performance;
                    newCusomerDetail.Response_CQR = feedback.Response_CQR;
                    response = _webApiAdaniGas.PostFeedback(newCusomerDetail);
                }
                var jsonString = response.Content;

                // convert JSON text contained in string json into an XML node
                var xml = XDocument.Load(JsonReaderWriterFactory.CreateJsonReader(Encoding.ASCII.GetBytes(jsonString), new XmlDictionaryReaderQuotas()));

                IEnumerable<XElement> element = xml.Descendants().Where(p => p.Name.LocalName == "d").ToList();
                string Ev_Message = element.FirstOrDefault() != null ? element.Descendants().FirstOrDefault(p => p.Name.LocalName == "Ev_Message").Value : string.Empty;
                CustomerFeedbackAdaniGasModel model = new CustomerFeedbackAdaniGasModel();
                model.ReturnViewMessage = Ev_Message;
                //return this.View(model);
                Session["UpdateMessage"] = new InfoMessage(Ev_Message);
                return Redirect(Request.RawUrl);
            }
            catch (Exception ex)
            {
                feedback.ReturnViewMessage = ex.Message;
                Log.Error($"Can't post feedback", ex, this);
                return this.View(feedback);
            }
        }
        #endregion


        public ActionResult CustomerFeedBackMain()
        {
            CustomerFeedbackMainAdaniGasModel model = new CustomerFeedbackMainAdaniGasModel();

            try
            {
                if (Request.QueryString["cust_id"] != null && Request.QueryString["comp_no"] != null)
                {
                    string EncryptedCustomerID = Request.QueryString["cust_id"];
                    string EncryptedComplaintID = Request.QueryString["comp_no"];

                    string EncryptionKey = DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/EncryptionKey", "Tl;jld@456763909QPwOeiRuTy873XY7");
                    string EncryptionIV = DictionaryPhraseRepository.Current.Get("/AccountServices/Service URLs/EncryptionIV", "CEIVRAJWquG8iiMw");

                    string DecryptedCustomerID = AES_EncryptDecrypt.DecryptString(EncryptionKey, EncryptedCustomerID, EncryptionIV);
                    string DecryptedComplaintID = AES_EncryptDecrypt.DecryptString(EncryptionKey, EncryptedComplaintID, EncryptionIV);

                    string EncryptedcustomerID_test = AES_EncryptDecrypt.EncryptString(EncryptionKey, EncryptedCustomerID, EncryptionIV);
                    string EncryptedcustomerID_test_encode = HttpUtility.UrlEncode(AES_EncryptDecrypt.EncryptString(EncryptionKey, EncryptedCustomerID, EncryptionIV));

                    string EncryptedComplaintID_test = AES_EncryptDecrypt.EncryptString(EncryptionKey, EncryptedComplaintID, EncryptionIV);
                    string EncryptedComplaintID_test_encode = HttpUtility.UrlEncode(AES_EncryptDecrypt.EncryptString(EncryptionKey, EncryptedComplaintID, EncryptionIV));

                    string DecodedEncryptedcustomerID = HttpUtility.UrlDecode(EncryptedcustomerID_test_encode);
                    string DecryptedcustomerID1 = AES_EncryptDecrypt.DecryptString(EncryptionKey, DecodedEncryptedcustomerID, EncryptionIV);

                    string DecodedEncryptedComplaintID = HttpUtility.UrlDecode(EncryptedComplaintID_test_encode);
                    string DecryptedComplaintID1 = AES_EncryptDecrypt.DecryptString(EncryptionKey, DecodedEncryptedComplaintID, EncryptionIV);

                    if (DecryptedCustomerID == null || DecryptedComplaintID == null)
                    {
                        ViewBag.NoInfo = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time.");
                        return View(model);
                    }
                    model.CustomerID = DecryptedCustomerID.Trim();
                    model.ComplaintNumber = DecryptedComplaintID.Trim();

                    return View(model);
                }
                return this.View(model);
            }
            catch (Exception e)
            {
                Log.Error(e.Message, e.Source);
                return this.View(model);
            }
        }


        [HttpPost]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        public ActionResult CustomerFeedBackMain(CustomerFeedbackMainAdaniGasModel feedback)
        {
            if (!ModelState.IsValid)
            {
                return this.View(feedback);
            }

            if (!this.IsCaptchaValid("Captcha Validation Required."))
            {
                ModelState.AddModelError(nameof(feedback.Captcha), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Captcha required", "Captcha Validation Required."));
                return this.View(feedback);
            }

            try
            {
                IRestResponse response = null;
                WebAPIAdaniGas _webApiAdaniGas = new WebAPIAdaniGas();
                response = _webApiAdaniGas.PostFeedbackMain(feedback);

                var jsonString = response.Content;

                // convert JSON text contained in string json into an XML node
                var xml = XDocument.Load(JsonReaderWriterFactory.CreateJsonReader(Encoding.ASCII.GetBytes(jsonString), new XmlDictionaryReaderQuotas()));

                IEnumerable<XElement> element = xml.Descendants().Where(p => p.Name.LocalName == "d").ToList();
                string Ev_Message = element.FirstOrDefault() != null ? element.Descendants().FirstOrDefault(p => p.Name.LocalName == "Ev_Message").Value : string.Empty;
                CustomerFeedbackAdaniGasModel model = new CustomerFeedbackAdaniGasModel();
                model.ReturnViewMessage = Ev_Message;
                //return this.View(model);
                Session["UpdateMessage"] = new InfoMessage(Ev_Message);
                return Redirect(Request.RawUrl);
            }
            catch (Exception ex)
            {
                feedback.ReturnViewMessage = ex.Message;
                Log.Error($"Can't post feedback", ex, this);
                return this.View(feedback);
            }
        }



        #region ||** Enquiry for New connection **||
        public ActionResult NewConEnquiry()
        {
            NewConnectionEnquiryModel model = new NewConnectionEnquiryModel();
            List<City> cityList = objWebAPIAdaniGas.GetCityList();
            model.CityList = cityList.Select(x => new SelectListItem()
            {
                Text = x.CityName,
                Value = x.CityCode
            }).ToList();

            Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");
            Data.Items.Item PlantCityList = db.GetItem(Templates.PlantCity.Datasource.PlantCityList);
            model.PlantCityList = PlantCityList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();

            Data.Items.Item PartnerTypeList = db.GetItem(Templates.PartnerType.Datasource.PartnerTypeList);
            model.PartnerTypeList = PartnerTypeList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();

            return this.View(model);
        }

        public ActionResult GetAreaByCity(string cityCode)
        {
            JsonResult result = new JsonResult();

            try
            {
                WebAPIAdaniGas _webApiAdaniGas = new WebAPIAdaniGas();
                var products = _webApiAdaniGas.GetAreaOfCity(cityCode).OrderBy(x => x.Text).ToList();
                result = Json(products, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return result;
        }

        [HttpPost]
        [ValidateRenderingId]
        public ActionResult NewConEnquiry(NewConnectionEnquiryModel enquiryModel)
        {
            try
            {
                List<City> cityList = objWebAPIAdaniGas.GetCityList();
                enquiryModel.CityList = cityList.Select(x => new SelectListItem()
                {
                    Text = x.CityName,
                    Value = x.CityCode
                }).ToList();

                Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");
                Data.Items.Item PlantCityList = db.GetItem(Templates.PlantCity.Datasource.PlantCityList);
                enquiryModel.PlantCityList = PlantCityList.GetChildren().ToList().Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();

                Data.Items.Item PartnerTypeList = db.GetItem(Templates.PartnerType.Datasource.PartnerTypeList);
                enquiryModel.PartnerTypeList = PartnerTypeList.GetChildren().ToList().Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();

                if (!ModelState.IsValid)
                {
                    return this.View(enquiryModel);
                }

                if (!this.IsCaptchaValid("Captcha Validation Required."))
                {
                    ModelState.AddModelError(nameof(enquiryModel.Captcha), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Captcha required", "Captcha Validation Required."));
                    return this.View(enquiryModel);
                }
                IRestResponse response = null;
                WebAPIAdaniGas _webApiAdaniGas = new WebAPIAdaniGas();
                string currentcity = enquiryModel.CityList.Where(w => w.Value == enquiryModel.City).Select(s => s.Text).FirstOrDefault();
                enquiryModel.Plant = enquiryModel.PlantCityList.Where(w => w.Text == currentcity).Select(s => s.Value).FirstOrDefault();

                response = _webApiAdaniGas.SubmitInquiry(enquiryModel);
                var jsonString = response.Content;

                // convert JSON text contained in string json into an XML node
                var xml = XDocument.Load(JsonReaderWriterFactory.CreateJsonReader(Encoding.ASCII.GetBytes(jsonString), new XmlDictionaryReaderQuotas()));

                IEnumerable<XElement> element = xml.Descendants().Where(p => p.Name.LocalName == "d").ToList();
                string Ev_Message = element.FirstOrDefault() != null ? element.Descendants().FirstOrDefault(p => p.Name.LocalName == "Message").Value : string.Empty;
                string Ev_Msg_Flag = element.FirstOrDefault() != null ? element.Descendants().FirstOrDefault(p => p.Name.LocalName == "MsgFlag").Value : string.Empty;
                //NewConnectionEnquiryModel model = new NewConnectionEnquiryModel();
                if (Ev_Msg_Flag == "S")
                {
                    string Complaint = element.FirstOrDefault() != null ? element.Descendants().FirstOrDefault(p => p.Name.LocalName == "Complaint").Value : string.Empty;
                    Session["UpdateMessage"] = new InfoMessage(Ev_Message + " Your enquiry number is " + Complaint);
                    return Redirect(Request.RawUrl);
                }
                else
                {
                    enquiryModel.ReturnViewMessage = Ev_Message;
                    return this.View(enquiryModel);
                }
            }
            catch (Exception ex)
            {
                enquiryModel.ReturnViewMessage = ex.Message;
                Log.Error($"Can't submit inquiry", ex, this);
                return this.View(enquiryModel);
            }
        }
        #endregion

        #region ||** Enquiry for New connection **||
        public ActionResult NewConnection()
        {
            NewConnectionModel model = new NewConnectionModel();
            var Type = Sitecore.Mvc.Presentation.RenderingContext.Current.Rendering.Parameters["Type"] ?? "";
            Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");

            if (!string.IsNullOrEmpty(Type) && Type.ToLower() == "residential")
            {
                model.PartnerTypeList = model.PartnerTypeList.Where(w => w.Value == db.GetItem(Templates.PartnerType.Fields.residential).Fields["Value"].Value).ToList();
                model.Partner_Type = db.GetItem(Templates.PartnerType.Fields.residential).Fields["Value"].Value;

            }
            else if (!string.IsNullOrEmpty(Type) && Type.ToLower() == "commercial")
            {
                model.PartnerTypeList = model.PartnerTypeList.Where(w => w.Value == db.GetItem(Templates.PartnerType.Fields.commercial).Fields["Value"].Value).ToList();
                model.Partner_Type = db.GetItem(Templates.PartnerType.Fields.commercial).Fields["Value"].Value;

            }
            else if (!string.IsNullOrEmpty(Type) && Type.ToLower() == "industrial")
            {
                model.PartnerTypeList = model.PartnerTypeList.Where(w => w.Value == db.GetItem(Templates.PartnerType.Fields.industrial).Fields["Value"].Value).ToList();
                model.Partner_Type = db.GetItem(Templates.PartnerType.Fields.industrial).Fields["Value"].Value;
            }
            List<SelectListItem> cityList = objWebAPIAdaniGas.CityList(model.Partner_Type);
            model.CityList = cityList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();
            Data.Items.Item PlantCityList = db.GetItem(Templates.PlantCity.Datasource.PlantCityList);

            Data.Items.Item PartnerTypeList = db.GetItem(Templates.NewConnectionDataSources.Datasource.PartnerTypeList);
            model.PartnerTypeList = PartnerTypeList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            Data.Items.Item HouseTypeList = db.GetItem(Templates.NewConnectionDataSources.Datasource.TypeOfHouse);
            model.HouseTypeList = HouseTypeList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            Data.Items.Item ReferenceSourceList = db.GetItem(Templates.NewConnectionDataSources.Datasource.ReferenceSource);
            model.ReferenceSourceList = ReferenceSourceList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            Data.Items.Item TypeOfCustomerList = db.GetItem(Templates.NewConnectionDataSources.Datasource.TypeOfCustomer);
            model.TypeOfCustomerList = TypeOfCustomerList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            Data.Items.Item ApplicationList = db.GetItem(Templates.NewConnectionDataSources.Datasource.TypeOfApplication);
            model.ApplicationList = ApplicationList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            Data.Items.Item TypeOfIndustryList = db.GetItem(Templates.NewConnectionDataSources.Datasource.TypeOfIndustry);
            model.TypeOfIndustryList = TypeOfIndustryList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            Data.Items.Item CommercialFuelUseList = db.GetItem(Templates.NewConnectionDataSources.Datasource.CommercialFuelUsing);
            Data.Items.Item IndustrialFuelUseList = db.GetItem(Templates.NewConnectionDataSources.Datasource.IndustrialFuelUsing);
            if (model.Partner_Type != null && model.Partner_Type.ToLower() == "9001")
            {
                model.CurrentFuelUseList = IndustrialFuelUseList.GetChildren().Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();
            }
            else
            {
                model.CurrentFuelUseList = CommercialFuelUseList.GetChildren().ToList().Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();
            }
            if (Request.QueryString["cid"] != null)
            {
                model.CampaignID = Request.QueryString["cid"].ToString();
            }
            return this.View(model);
        }

        public ActionResult GetAreaOfCity(string PartnerTypeCode, string cityCode)
        {
            JsonResult result = new JsonResult();
            try
            {
                List<SelectListItem> AreaList = objWebAPIAdaniGas.AreaOfCity(cityCode, PartnerTypeCode);
                var areaList = AreaList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();
                result = Json(areaList, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return result;
        }
        public ActionResult GetSocietyByArea(string AreaCode, string cityCode)
        {
            JsonResult result = new JsonResult();

            try
            {
                WebAPIAdaniGas _webApiAdaniGas = new WebAPIAdaniGas();
                var products = _webApiAdaniGas.SocietyByArea(AreaCode, cityCode);
                result = Json(products, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return result;
        }

        public ActionResult GetHouseNumberBySociety(string SocietyCode)
        {
            JsonResult result = new JsonResult();

            try
            {
                WebAPIAdaniGas _webApiAdaniGas = new WebAPIAdaniGas();
                var products = _webApiAdaniGas.HouseNumberBySociety(SocietyCode);

                result = Json(products, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return result;
        }

        [HttpPost]
        [ValidateRenderingId]
        public ActionResult NewConnection(NewConnectionModel enquiryModel, FormCollection fc)
        {
            try
            {
                Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");

                Data.Items.Item PartnerTypeList = db.GetItem(Templates.NewConnectionDataSources.Datasource.PartnerTypeList);
                enquiryModel.PartnerTypeList = PartnerTypeList.GetChildren().ToList().Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();
                Data.Items.Item HouseTypeList = db.GetItem(Templates.NewConnectionDataSources.Datasource.TypeOfHouse);
                enquiryModel.HouseTypeList = HouseTypeList.GetChildren().ToList().Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();
                Data.Items.Item ReferenceSourceList = db.GetItem(Templates.NewConnectionDataSources.Datasource.ReferenceSource);
                enquiryModel.ReferenceSourceList = ReferenceSourceList.GetChildren().ToList().Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();
                Data.Items.Item TypeOfCustomerList = db.GetItem(Templates.NewConnectionDataSources.Datasource.TypeOfCustomer);
                enquiryModel.TypeOfCustomerList = TypeOfCustomerList.GetChildren().ToList().Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();
                Data.Items.Item ApplicationList = db.GetItem(Templates.NewConnectionDataSources.Datasource.TypeOfApplication);
                enquiryModel.ApplicationList = ApplicationList.GetChildren().ToList().Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();
                Data.Items.Item TypeOfIndustryList = db.GetItem(Templates.NewConnectionDataSources.Datasource.TypeOfIndustry);
                enquiryModel.TypeOfIndustryList = TypeOfIndustryList.GetChildren().ToList().Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();
                Data.Items.Item CommercialFuelUseList = db.GetItem(Templates.NewConnectionDataSources.Datasource.CommercialFuelUsing);
                Data.Items.Item IndustrialFuelUseList = db.GetItem(Templates.NewConnectionDataSources.Datasource.IndustrialFuelUsing);
                if (enquiryModel.Partner_Type != null && enquiryModel.Partner_Type.ToLower() == "9001")
                {
                    enquiryModel.CurrentFuelUseList = IndustrialFuelUseList.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                }
                else
                {
                    enquiryModel.CurrentFuelUseList = CommercialFuelUseList.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                }

                List<SelectListItem> cityList = objWebAPIAdaniGas.CityList(enquiryModel.Partner_Type);
                enquiryModel.CityList = cityList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();
                if (!string.IsNullOrEmpty(enquiryModel.City))
                {
                    List<SelectListItem> AreaList = objWebAPIAdaniGas.AreaOfCity(enquiryModel.City, enquiryModel.Partner_Type);
                    enquiryModel.AreaList = AreaList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();
                }
                if (!string.IsNullOrEmpty(enquiryModel.City) && !string.IsNullOrEmpty(enquiryModel.Partner_Type))
                {
                    List<SelectListItem> AreaList = objWebAPIAdaniGas.AreaOfCity(enquiryModel.City, enquiryModel.Partner_Type);
                    enquiryModel.AreaList = AreaList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).OrderBy(x => x.Text).ToList();
                }
                if (!string.IsNullOrEmpty(enquiryModel.City) && !string.IsNullOrEmpty(enquiryModel.Area))
                {
                    List<SocietyList> SocietyList = objWebAPIAdaniGas.SocietyByArea(enquiryModel.Area, enquiryModel.City);
                    enquiryModel.ApartmentComplexList = SocietyList.OrderBy(x => x.SocietyName).ToList();
                }
                if (!ModelState.IsValid)
                {
                    return this.View(enquiryModel);
                }

                if (!this.IsCaptchaValid("Captcha Validation Required."))
                {
                    ModelState.AddModelError(nameof(enquiryModel.Captcha), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Captcha required", "Captcha Validation Required."));
                    return this.View(enquiryModel);
                }
                try
                {
                    AdaniGasNewConnectionServices services = new AdaniGasNewConnectionServices();
                    AdadniGasDBModelDataContext dbContext = new AdadniGasDBModelDataContext();
                    enquiryModel.EnquiryNo = services.GetUniqueRegNo();
                    string Pref = string.Empty;
                    if (enquiryModel.Partner_Type == "9004")
                    {
                        Pref = "RES";
                    }
                    if (enquiryModel.Partner_Type == "9002")
                    {
                        Pref = "COM";
                    }
                    if (enquiryModel.Partner_Type == "9001")
                    {
                        Pref = "IND";
                    }
                    enquiryModel.EnquiryNo = Pref + enquiryModel.EnquiryNo;
                    while (true)
                    {
                        if ((
                            from a in dbContext.NewConnectionDatas
                            where a.EnquiryNo == enquiryModel.EnquiryNo
                            select a).FirstOrDefault<NewConnectionData>() == null)
                        {
                            break;
                        }
                        enquiryModel.EnquiryNo = services.GetUniqueRegNo();
                        if (enquiryModel.Partner_Type == "9004")
                        {
                            Pref = "RES";
                        }
                        if (enquiryModel.Partner_Type == "9002")
                        {
                            Pref = "COM";
                        }
                        if (enquiryModel.Partner_Type == "9001")
                        {
                            Pref = "IND";
                        }
                        enquiryModel.EnquiryNo = Pref + enquiryModel.EnquiryNo;
                    }
                    enquiryModel.HouseNo = "\"" + enquiryModel.HouseNo + "\"";
                    enquiryModel.OtherApartmentComplex = !string.IsNullOrEmpty(enquiryModel.OtherApartmentComplex) ? "\"" + enquiryModel.OtherApartmentComplex + "\"" : "";
                    enquiryModel.OtherTypeOfCustomer = !string.IsNullOrEmpty(enquiryModel.OtherTypeOfCustomer) ? "\"" + enquiryModel.OtherTypeOfCustomer + "\"" : "";
                    enquiryModel.OtherApplication = !string.IsNullOrEmpty(enquiryModel.OtherApplication) ? "\"" + enquiryModel.OtherApplication + "\"" : "";
                    enquiryModel.OtherCurrentFuelUse = !string.IsNullOrEmpty(enquiryModel.OtherCurrentFuelUse) ? "\"" + enquiryModel.OtherCurrentFuelUse + "\"" : "";
                    enquiryModel.OtherTypeOfIndustry = !string.IsNullOrEmpty(enquiryModel.OtherTypeOfIndustry) ? "\"" + enquiryModel.OtherTypeOfIndustry + "\"" : "";
                    enquiryModel.AddressLine1 = "\"" + enquiryModel.AddressLine1 + "\"";
                    enquiryModel.AddressLine2 = "\"" + enquiryModel.AddressLine2 + "\"";
                    enquiryModel.ApartmentComplex = "\"" + enquiryModel.ApartmentComplex + "\"";
                    enquiryModel.FormURL = "\"" + enquiryModel.FormURL + "\"";

                    services.StoreNewConnectionDataAdaniGas(enquiryModel);
                    Session["UserName"] = enquiryModel.FullName;
                    Session["UpdateMessage"] = enquiryModel.EnquiryNo;
                    return this.Redirect(enquiryModel.ResponseURL);
                }
                catch (Exception ex)
                {
                    enquiryModel.ReturnViewMessage = ex.Message;
                    Log.Error($"Can't submit AdaniGas New Connection Enquiry", ex, this);
                    return this.View(enquiryModel);
                }
            }
            catch (Exception ex)
            {
                enquiryModel.ReturnViewMessage = ex.Message;
                Log.Error($"Can't submit AdaniGas New Connection Enquiry", ex, this);
                return this.View(enquiryModel);
            }
        }

        public ActionResult NewConnectionEnquiryShortForm()
        {
            NewConnectionModel model = new NewConnectionModel();
            Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");


            Data.Items.Item CityTypeList = db.GetItem(Templates.NewConnectionDataSources.Datasource.CityTypeList);
            model.CityList = CityTypeList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            model.Partner_Type = "9004";
            //List<SelectListItem> cityList = objWebAPIAdaniGas.CityList(model.Partner_Type);
            //model.CityList = cityList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();

            if (Request.QueryString["cid"] != null)
            {
                model.CampaignID = Request.QueryString["cid"].ToString();
            }
            return this.View(model);
        }

        [HttpPost]
        [ValidateRenderingId]
        public ActionResult NewConnectionEnquiryShortForm(NewConnectionModel enquiryModel)
        {
            try
            {
                Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");
                enquiryModel.Partner_Type = "9004";
                Data.Items.Item CityTypeList = db.GetItem(Templates.NewConnectionDataSources.Datasource.CityTypeList);
                enquiryModel.CityList = CityTypeList.GetChildren().ToList().Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();


                if (!this.IsCaptchaValid("Captcha Validation Required."))
                {
                    ModelState.AddModelError(nameof(enquiryModel.Captcha), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Captcha required", "Captcha Validation Required."));
                    return this.View(enquiryModel);
                }
                try
                {
                    AdaniGasNewConnectionServices services = new AdaniGasNewConnectionServices();
                    AdadniGasDBModelDataContext dbContext = new AdadniGasDBModelDataContext();
                    enquiryModel.EnquiryNo = services.GetUniqueRegNo();
                    string Pref = "RES";

                    enquiryModel.EnquiryNo = Pref + enquiryModel.EnquiryNo;
                    while (true)
                    {
                        if ((
                            from a in dbContext.NewConnectionDatas
                            where a.EnquiryNo == enquiryModel.EnquiryNo
                            select a).FirstOrDefault<NewConnectionData>() == null)
                        {
                            break;
                        }
                        enquiryModel.EnquiryNo = services.GetUniqueRegNo();
                        enquiryModel.EnquiryNo = Pref + enquiryModel.EnquiryNo;
                    }



                    services.StoreNewConnectionDataShortformAdaniGas(enquiryModel);
                    Session["UserName"] = enquiryModel.FullName;
                    Session["UpdateMessage"] = enquiryModel.EnquiryNo;
                    return this.Redirect(enquiryModel.ResponseURL);
                }
                catch (Exception ex)
                {
                    enquiryModel.ReturnViewMessage = ex.Message;
                    Log.Error($"Can't submit AdaniGas New Connection Enquiry", ex, this);
                    return this.View(enquiryModel);
                }
            }
            catch (Exception ex)
            {
                enquiryModel.ReturnViewMessage = ex.Message;
                Log.Error($"Can't submit AdaniGas New Connection Enquiry", ex, this);
                return this.View(enquiryModel);
            }
        }

        #endregion

        #region ||** Enquiry for CustomerCNGRegistration **||
        public ActionResult CustomerCNGRegistration()
        {
            NewConnectionModel model = new NewConnectionModel();
            var Type = Sitecore.Mvc.Presentation.RenderingContext.Current.Rendering.Parameters["Type"] ?? "";
            Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");

            if (!string.IsNullOrEmpty(Type) && Type.ToLower() == "residential")
            {
                model.PartnerTypeList = model.PartnerTypeList.Where(w => w.Value == db.GetItem(Templates.PartnerType.Fields.residential).Fields["Value"].Value).ToList();
                model.Partner_Type = db.GetItem(Templates.PartnerType.Fields.residential).Fields["Value"].Value;

            }
            else if (!string.IsNullOrEmpty(Type) && Type.ToLower() == "commercial")
            {
                model.PartnerTypeList = model.PartnerTypeList.Where(w => w.Value == db.GetItem(Templates.PartnerType.Fields.commercial).Fields["Value"].Value).ToList();
                model.Partner_Type = db.GetItem(Templates.PartnerType.Fields.commercial).Fields["Value"].Value;

            }
            else if (!string.IsNullOrEmpty(Type) && Type.ToLower() == "industrial")
            {
                model.PartnerTypeList = model.PartnerTypeList.Where(w => w.Value == db.GetItem(Templates.PartnerType.Fields.industrial).Fields["Value"].Value).ToList();
                model.Partner_Type = db.GetItem(Templates.PartnerType.Fields.industrial).Fields["Value"].Value;
            }
            List<SelectListItem> cityList = objWebAPIAdaniGas.CityList(model.Partner_Type);
            model.CityList = cityList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();
            Data.Items.Item PlantCityList = db.GetItem(Templates.PlantCity.Datasource.PlantCityList);

            Data.Items.Item PartnerTypeList = db.GetItem(Templates.NewConnectionDataSources.Datasource.PartnerTypeList);
            model.PartnerTypeList = PartnerTypeList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            Data.Items.Item HouseTypeList = db.GetItem(Templates.NewConnectionDataSources.Datasource.TypeOfHouse);
            model.HouseTypeList = HouseTypeList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            Data.Items.Item ReferenceSourceList = db.GetItem(Templates.NewConnectionDataSources.Datasource.ReferenceSource);
            model.ReferenceSourceList = ReferenceSourceList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            Data.Items.Item TypeOfCustomerList = db.GetItem(Templates.NewConnectionDataSources.Datasource.TypeOfCustomer);
            model.TypeOfCustomerList = TypeOfCustomerList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            Data.Items.Item ApplicationList = db.GetItem(Templates.NewConnectionDataSources.Datasource.TypeOfApplication);
            model.ApplicationList = ApplicationList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            Data.Items.Item TypeOfIndustryList = db.GetItem(Templates.NewConnectionDataSources.Datasource.TypeOfIndustry);
            model.TypeOfIndustryList = TypeOfIndustryList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            Data.Items.Item CommercialFuelUseList = db.GetItem(Templates.NewConnectionDataSources.Datasource.CommercialFuelUsing);
            Data.Items.Item IndustrialFuelUseList = db.GetItem(Templates.NewConnectionDataSources.Datasource.IndustrialFuelUsing);
            if (model.Partner_Type != null && model.Partner_Type.ToLower() == "9001")
            {
                model.CurrentFuelUseList = IndustrialFuelUseList.GetChildren().Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();
            }
            else
            {
                model.CurrentFuelUseList = CommercialFuelUseList.GetChildren().ToList().Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();
            }
            if (Request.QueryString["cid"] != null)
            {
                model.CampaignID = Request.QueryString["cid"].ToString();
            }
            return this.View(model);
        }


        //public ActionResult GetSocietyByArea(string AreaCode, string cityCode)
        //{
        //    JsonResult result = new JsonResult();

        //    try
        //    {
        //        WebAPIAdaniGas _webApiAdaniGas = new WebAPIAdaniGas();
        //        var products = _webApiAdaniGas.SocietyByArea(AreaCode, cityCode);
        //        result = Json(products, JsonRequestBehavior.AllowGet);

        //    }
        //    catch (Exception ex)
        //    {
        //        Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
        //    }
        //    return result;
        //}

        //[HttpPost]
        //[ValidateRenderingId]
        //public ActionResult NewConnection(NewConnectionModel enquiryModel, FormCollection fc)
        //{
        //    try
        //    {
        //        Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");

        //        Data.Items.Item PartnerTypeList = db.GetItem(Templates.NewConnectionDataSources.Datasource.PartnerTypeList);
        //        enquiryModel.PartnerTypeList = PartnerTypeList.GetChildren().ToList().Select(x => new SelectListItem()
        //        {
        //            Text = x.Fields["Text"].Value,
        //            Value = x.Fields["Value"].Value
        //        }).ToList();
        //        Data.Items.Item HouseTypeList = db.GetItem(Templates.NewConnectionDataSources.Datasource.TypeOfHouse);
        //        enquiryModel.HouseTypeList = HouseTypeList.GetChildren().ToList().Select(x => new SelectListItem()
        //        {
        //            Text = x.Fields["Text"].Value,
        //            Value = x.Fields["Value"].Value
        //        }).ToList();
        //        Data.Items.Item ReferenceSourceList = db.GetItem(Templates.NewConnectionDataSources.Datasource.ReferenceSource);
        //        enquiryModel.ReferenceSourceList = ReferenceSourceList.GetChildren().ToList().Select(x => new SelectListItem()
        //        {
        //            Text = x.Fields["Text"].Value,
        //            Value = x.Fields["Value"].Value
        //        }).ToList();
        //        Data.Items.Item TypeOfCustomerList = db.GetItem(Templates.NewConnectionDataSources.Datasource.TypeOfCustomer);
        //        enquiryModel.TypeOfCustomerList = TypeOfCustomerList.GetChildren().ToList().Select(x => new SelectListItem()
        //        {
        //            Text = x.Fields["Text"].Value,
        //            Value = x.Fields["Value"].Value
        //        }).ToList();
        //        Data.Items.Item ApplicationList = db.GetItem(Templates.NewConnectionDataSources.Datasource.TypeOfApplication);
        //        enquiryModel.ApplicationList = ApplicationList.GetChildren().ToList().Select(x => new SelectListItem()
        //        {
        //            Text = x.Fields["Text"].Value,
        //            Value = x.Fields["Value"].Value
        //        }).ToList();
        //        Data.Items.Item TypeOfIndustryList = db.GetItem(Templates.NewConnectionDataSources.Datasource.TypeOfIndustry);
        //        enquiryModel.TypeOfIndustryList = TypeOfIndustryList.GetChildren().ToList().Select(x => new SelectListItem()
        //        {
        //            Text = x.Fields["Text"].Value,
        //            Value = x.Fields["Value"].Value
        //        }).ToList();
        //        Data.Items.Item CommercialFuelUseList = db.GetItem(Templates.NewConnectionDataSources.Datasource.CommercialFuelUsing);
        //        Data.Items.Item IndustrialFuelUseList = db.GetItem(Templates.NewConnectionDataSources.Datasource.IndustrialFuelUsing);
        //        if (enquiryModel.Partner_Type != null && enquiryModel.Partner_Type.ToLower() == "9001")
        //        {
        //            enquiryModel.CurrentFuelUseList = IndustrialFuelUseList.GetChildren().ToList().Select(x => new SelectListItem()
        //            {
        //                Text = x.Fields["Text"].Value,
        //                Value = x.Fields["Value"].Value
        //            }).ToList();
        //        }
        //        else
        //        {
        //            enquiryModel.CurrentFuelUseList = CommercialFuelUseList.GetChildren().ToList().Select(x => new SelectListItem()
        //            {
        //                Text = x.Fields["Text"].Value,
        //                Value = x.Fields["Value"].Value
        //            }).ToList();
        //        }

        //        List<SelectListItem> cityList = objWebAPIAdaniGas.CityList(enquiryModel.Partner_Type);
        //        enquiryModel.CityList = cityList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();
        //        if (!string.IsNullOrEmpty(enquiryModel.City))
        //        {
        //            List<SelectListItem> AreaList = objWebAPIAdaniGas.AreaOfCity(enquiryModel.City, enquiryModel.Partner_Type);
        //            enquiryModel.AreaList = AreaList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();
        //        }
        //        if (!string.IsNullOrEmpty(enquiryModel.City) && !string.IsNullOrEmpty(enquiryModel.Partner_Type))
        //        {
        //            List<SelectListItem> AreaList = objWebAPIAdaniGas.AreaOfCity(enquiryModel.City, enquiryModel.Partner_Type);
        //            enquiryModel.AreaList = AreaList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).OrderBy(x => x.Text).ToList();
        //        }
        //        if (!string.IsNullOrEmpty(enquiryModel.City) && !string.IsNullOrEmpty(enquiryModel.Area))
        //        {
        //            List<SocietyList> SocietyList = objWebAPIAdaniGas.SocietyByArea(enquiryModel.Area, enquiryModel.City);
        //            enquiryModel.ApartmentComplexList = SocietyList.OrderBy(x => x.SocietyName).ToList();
        //        }
        //        if (!ModelState.IsValid)
        //        {
        //            return this.View(enquiryModel);
        //        }

        //        if (!this.IsCaptchaValid("Captcha Validation Required."))
        //        {
        //            ModelState.AddModelError(nameof(enquiryModel.Captcha), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Captcha required", "Captcha Validation Required."));
        //            return this.View(enquiryModel);
        //        }
        //        try
        //        {
        //            AdaniGasNewConnectionServices services = new AdaniGasNewConnectionServices();
        //            AdadniGasDBModelDataContext dbContext = new AdadniGasDBModelDataContext();
        //            enquiryModel.EnquiryNo = services.GetUniqueRegNo();
        //            string Pref = string.Empty;
        //            if (enquiryModel.Partner_Type == "9004")
        //            {
        //                Pref = "RES";
        //            }
        //            if (enquiryModel.Partner_Type == "9002")
        //            {
        //                Pref = "COM";
        //            }
        //            if (enquiryModel.Partner_Type == "9001")
        //            {
        //                Pref = "IND";
        //            }
        //            enquiryModel.EnquiryNo = Pref + enquiryModel.EnquiryNo;
        //            while (true)
        //            {
        //                if ((
        //                    from a in dbContext.NewConnectionDatas
        //                    where a.EnquiryNo == enquiryModel.EnquiryNo
        //                    select a).FirstOrDefault<NewConnectionData>() == null)
        //                {
        //                    break;
        //                }
        //                enquiryModel.EnquiryNo = services.GetUniqueRegNo();
        //                if (enquiryModel.Partner_Type == "9004")
        //                {
        //                    Pref = "RES";
        //                }
        //                if (enquiryModel.Partner_Type == "9002")
        //                {
        //                    Pref = "COM";
        //                }
        //                if (enquiryModel.Partner_Type == "9001")
        //                {
        //                    Pref = "IND";
        //                }
        //                enquiryModel.EnquiryNo = Pref + enquiryModel.EnquiryNo;
        //            }
        //            enquiryModel.HouseNo = "\"" + enquiryModel.HouseNo + "\"";
        //            enquiryModel.OtherApartmentComplex = !string.IsNullOrEmpty(enquiryModel.OtherApartmentComplex) ? "\"" + enquiryModel.OtherApartmentComplex + "\"" : "";
        //            enquiryModel.OtherTypeOfCustomer = !string.IsNullOrEmpty(enquiryModel.OtherTypeOfCustomer) ? "\"" + enquiryModel.OtherTypeOfCustomer + "\"" : "";
        //            enquiryModel.OtherApplication = !string.IsNullOrEmpty(enquiryModel.OtherApplication) ? "\"" + enquiryModel.OtherApplication + "\"" : "";
        //            enquiryModel.OtherCurrentFuelUse = !string.IsNullOrEmpty(enquiryModel.OtherCurrentFuelUse) ? "\"" + enquiryModel.OtherCurrentFuelUse + "\"" : "";
        //            enquiryModel.OtherTypeOfIndustry = !string.IsNullOrEmpty(enquiryModel.OtherTypeOfIndustry) ? "\"" + enquiryModel.OtherTypeOfIndustry + "\"" : "";
        //            enquiryModel.AddressLine1 = "\"" + enquiryModel.AddressLine1 + "\"";
        //            enquiryModel.AddressLine2 = "\"" + enquiryModel.AddressLine2 + "\"";
        //            enquiryModel.ApartmentComplex = "\"" + enquiryModel.ApartmentComplex + "\"";
        //            enquiryModel.FormURL = "\"" + enquiryModel.FormURL + "\"";

        //            services.StoreNewConnectionDataAdaniGas(enquiryModel);
        //            Session["UserName"] = enquiryModel.FullName;
        //            Session["UpdateMessage"] = enquiryModel.EnquiryNo;
        //            return this.Redirect(enquiryModel.ResponseURL);
        //        }
        //        catch (Exception ex)
        //        {
        //            enquiryModel.ReturnViewMessage = ex.Message;
        //            Log.Error($"Can't submit AdaniGas New Connection Enquiry", ex, this);
        //            return this.View(enquiryModel);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        enquiryModel.ReturnViewMessage = ex.Message;
        //        Log.Error($"Can't submit AdaniGas New Connection Enquiry", ex, this);
        //        return this.View(enquiryModel);
        //    }
        //}


        #endregion
        #region Forgot Password

        [HttpGet]
        public ActionResult ForgotPassword()
        {
            ForgotPasswordAdaniGas model = new ForgotPasswordAdaniGas();
            return View(model);
        }

        [HttpPost]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        public ActionResult ForgotPassword(ForgotPasswordAdaniGas model)
        {
            if (!ModelState.IsValid)
            {
                ModelState.AddModelError("ErrorCustomerID", "Please Enter Customer ID");
                return View(model);
            }

            if (!this.IsCaptchaValid("Captcha Validation Required."))
            {
                ModelState.AddModelError(nameof(model.Captcha), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Captcha required", "Captcha Validation Required."));
                return this.View(model);
            }

            model = objWebAPIAdaniGas.ForgotPasswordSendOTP(model);

            if (model.Msg_Flag == "S")
            {
                TempData["ModelMsg"] = model.Message + " Valid For " + model.OTP_Validity_Minutes + " Minutes";
                var url = Sitecore.Context.Database.GetItem(Templates.Pages.GasForgotPassword).Url();
                Session["fpId"] = model.CustomerID;
                return this.Redirect(url);
            }
            else
            {
                model.Message = model.Message;
            }

            return View(model);
        }

        [HttpGet]
        public ActionResult ForgotPasswordValidateOTP()
        {
            ForgotPasswordValidateOTP model = new ForgotPasswordValidateOTP();
            return View(model);
        }
        [HttpPost]
        public ActionResult ForgotPasswordValidateOTP(ForgotPasswordValidateOTP model)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return View(model);
                }
                var id = Session["fpId"];
                if (id != null)
                {
                    var response = objWebAPIAdaniGas.PostOTPForgotPassword(model, id.ToString());
                    if (response.IsSuccessful && !string.IsNullOrEmpty(response.Content))
                    {
                        var jsonString = response.Content;
                        var xml = XDocument.Load(JsonReaderWriterFactory.CreateJsonReader(Encoding.ASCII.GetBytes(jsonString), new XmlDictionaryReaderQuotas()));
                        string Ev_Message = xml.Descendants().FirstOrDefault(p => p.Name.LocalName == "Ev_Message").Value;
                        TempData["ModelMsg"] = Ev_Message;
                        if (Ev_Message.Contains("Password changed successfully"))
                        {
                            TempData["done"] = "Click Here to login";
                        }

                    }
                    else
                    {
                        TempData["ModelMsg"] = string.Concat(response.StatusDescription, ":", response.ErrorMessage);
                    }
                }
                else
                {
                    TempData["ModelMsg"] = "Technical Difficulties Please Try Again!";
                }
                return View(model);
            }
            catch (Exception ex)
            {
                Log.Error($"Error Description : ", ex, this);
                return View(model);
            }
        }


        #endregion

        #region ||** Collection Center **||
        public ActionResult GetAreaByCenterAndCity(string center, string city)
        {
            JsonResult result = new JsonResult();
            try
            {
                WebAPIAdaniGas _webApiAdaniGas = new WebAPIAdaniGas();
                var arealist = _webApiAdaniGas.GetAreaOfCenterAndCity(center, city).OrderBy(x => x.Text).ToList();
                result = Json(arealist, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return result;
        }

        [RedirectAuthenticated]
        public ActionResult CollectionCenter()
        {
            CollectionCenterModel model = new CollectionCenterModel();
            Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");
            Data.Items.Item CityList = db.GetItem(Templates.CenterCity.Datasource.CenterCityList);
            model.CityList = CityList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();

            Data.Items.Item CollectioTypeList = db.GetItem(Templates.CenterType.Datasource.CenterTypeList);
            model.CollectioTypeList = CollectioTypeList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();

            return View(model);
        }

        [HttpPost]
        public ActionResult CollectionCenter(string center, string city, string area)
        {
            JsonResult result = new JsonResult();

            try
            {
                WebAPIAdaniGas _webApiAdaniGas = new WebAPIAdaniGas();
                var collectioncenters = _webApiAdaniGas.GetCenterList(center, city, area);
                result = Json(collectioncenters, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return result;
        }
        #endregion

        #region Print Invoice

        public ActionResult PrintBill(string invoiceId)
        {
            var response = objWebAPIAdaniGas.PrintBill(invoiceId);
            var pdfstring = Convert.ToBase64String(response.RawBytes);
            return Json(pdfstring, JsonRequestBehavior.AllowGet);

        }
        #endregion

        #region Home CNG/PNG

        public ActionResult PNGGasPrice()
        {
            GasPrice model = new GasPrice();

            var getAllCityWisePrice = objWebAPIAdaniGas.GetGasPrice(null);

            model.CityListD = getAllCityWisePrice.Where(p => p.Product.Contains("Domestic")).GroupBy(p => p.City).Select(x => new SelectListItem()
            {
                Text = x.FirstOrDefault().City.Trim(),
                Value = x.FirstOrDefault().City.Trim(),
            }).OrderBy(o => o.Text).ToList();
            model.CityListC = getAllCityWisePrice.Where(p => p.Product.Contains("Commercial")).GroupBy(p => p.City).Select(x => new SelectListItem()
            {
                Text = x.FirstOrDefault().City.Trim(),
                Value = x.FirstOrDefault().City.Trim(),
            }).OrderBy(o => o.Text).ToList();
            model.CityListI = getAllCityWisePrice.Where(p => p.Product.Contains("Industrial")).GroupBy(p => p.City).Select(x => new SelectListItem()
            {
                Text = x.FirstOrDefault().City.Trim(),
                Value = x.FirstOrDefault().City.Trim(),
            }).OrderBy(o => o.Text).ToList();

            if (getAllCityWisePrice != null && getAllCityWisePrice.Any())
            {
                List<CityAndPrice> result = new List<CityAndPrice>();
                foreach (var city in getAllCityWisePrice.Select(s => s.City).Distinct().ToList())
                {
                    CityAndPrice resultObj = new CityAndPrice { City = city };
                    foreach (var price in getAllCityWisePrice.Where(c => c.City == city).ToList())
                    {
                        if (price.Product.Contains("Domestic Slab-1"))
                        {
                            var toBeSearched = "Domestic Slab-1";
                            resultObj.DomesticCityWisePrice.Effectice_Date_2 = price.Eff_date;
                            resultObj.DomesticCityWisePrice.Price_2 = price.MMBTU_Rate;
                            resultObj.DomesticCityWisePrice.Desc_2 = price.Product.Substring(price.Product.IndexOf(toBeSearched) + toBeSearched.Length);
                        }
                        if (price.Product.Contains("Domestic Slab-2"))
                        {
                            var toBeSearched = "Domestic Slab-2";
                            resultObj.DomesticCityWisePrice.Effectice_Date_3 = price.Eff_date;
                            resultObj.DomesticCityWisePrice.Price_3 = price.MMBTU_Rate;
                            resultObj.DomesticCityWisePrice.Desc_3 = price.Product.Substring(price.Product.IndexOf(toBeSearched) + toBeSearched.Length);
                        }
                        switch (price.Product)
                        {
                            case "CNG In Rs./KG":
                                resultObj.CNGCityWisePrice.Effectice_Date_1 = price.Eff_date;
                                resultObj.CNGCityWisePrice.Price_1 = price.MMBTU_Rate;
                                break;
                            case "Commercial":
                                resultObj.CommercialCityWisePrice.Effectice_Date_1 = price.Eff_date;
                                resultObj.CommercialCityWisePrice.Price_1 = price.MMBTU_Rate;
                                break;
                            case "Domestic":
                                resultObj.DomesticCityWisePrice.Effectice_Date_1 = price.Eff_date;
                                resultObj.DomesticCityWisePrice.Price_1 = price.MMBTU_Rate;
                                break;
                            case "Industrial Excess Price":
                                resultObj.IndustrailCityWisePrice.Effectice_Date_3 = price.Eff_date;
                                resultObj.IndustrailCityWisePrice.Price_3 = price.MMBTU_Rate;
                                break;
                            case "Industrial MGO":
                                resultObj.IndustrailCityWisePrice.Effectice_Date_1 = price.Eff_date;
                                resultObj.IndustrailCityWisePrice.Price_1 = price.MMBTU_Rate;
                                break;
                            case "Industrial NON MGO":
                                resultObj.IndustrailCityWisePrice.Effectice_Date_2 = price.Eff_date;
                                resultObj.IndustrailCityWisePrice.Price_2 = price.MMBTU_Rate;
                                break;
                            case "Non Commercial":
                                resultObj.CommercialCityWisePrice.Effectice_Date_2 = price.Eff_date;
                                resultObj.CommercialCityWisePrice.Price_2 = price.MMBTU_Rate;
                                break;
                            default: break;
                        }
                    }
                    model.CityWisePrice.Add(resultObj);
                }
            }
            return View(model);
        }

        public ActionResult PNGIndividualGasPrice()
        {
            GasPrice model = new GasPrice();

            var getAllCityWisePrice = objWebAPIAdaniGas.GetGasPrice(null);

            model.CityListD = getAllCityWisePrice.Where(p => p.Product.Contains("Domestic")).GroupBy(p => p.City).Select(x => new SelectListItem()
            {
                Text = x.FirstOrDefault().City.Trim(),
                Value = x.FirstOrDefault().City.Trim(),
            }).OrderBy(o => o.Text).ToList();
            model.CityListC = getAllCityWisePrice.Where(p => p.Product.Contains("Commercial")).GroupBy(p => p.City).Select(x => new SelectListItem()
            {
                Text = x.FirstOrDefault().City.Trim(),
                Value = x.FirstOrDefault().City.Trim(),
            }).OrderBy(o => o.Text).ToList();
            model.CityListI = getAllCityWisePrice.Where(p => p.Product.Contains("Industrial")).GroupBy(p => p.City).Select(x => new SelectListItem()
            {
                Text = x.FirstOrDefault().City.Trim(),
                Value = x.FirstOrDefault().City.Trim(),
            }).OrderBy(o => o.Text).ToList();

            if (getAllCityWisePrice != null && getAllCityWisePrice.Any())
            {
                List<CityAndPrice> result = new List<CityAndPrice>();
                foreach (var city in getAllCityWisePrice.Select(s => s.City).Distinct().ToList())
                {
                    CityAndPrice resultObj = new CityAndPrice { City = city };
                    foreach (var price in getAllCityWisePrice.Where(c => c.City == city).ToList())
                    {
                        if (price.Product.Contains("Domestic Slab-1"))
                        {
                            var toBeSearched = "Domestic Slab-1";
                            resultObj.DomesticCityWisePrice.Effectice_Date_2 = price.Eff_date;
                            resultObj.DomesticCityWisePrice.Price_2 = price.MMBTU_Rate;
                            resultObj.DomesticCityWisePrice.Desc_2 = price.Product.Substring(price.Product.IndexOf(toBeSearched) + toBeSearched.Length);
                        }
                        if (price.Product.Contains("Domestic Slab-2"))
                        {
                            var toBeSearched = "Domestic Slab-2";
                            resultObj.DomesticCityWisePrice.Effectice_Date_3 = price.Eff_date;
                            resultObj.DomesticCityWisePrice.Price_3 = price.MMBTU_Rate;
                            resultObj.DomesticCityWisePrice.Desc_3 = price.Product.Substring(price.Product.IndexOf(toBeSearched) + toBeSearched.Length);
                        }
                        switch (price.Product)
                        {
                            case "CNG In Rs./KG":
                                resultObj.CNGCityWisePrice.Effectice_Date_1 = price.Eff_date;
                                resultObj.CNGCityWisePrice.Price_1 = price.MMBTU_Rate;
                                break;
                            case "Commercial":
                                resultObj.CommercialCityWisePrice.Effectice_Date_1 = price.Eff_date;
                                resultObj.CommercialCityWisePrice.Price_1 = price.MMBTU_Rate;
                                break;
                            case "Domestic":
                                resultObj.DomesticCityWisePrice.Effectice_Date_1 = price.Eff_date;
                                resultObj.DomesticCityWisePrice.Price_1 = price.MMBTU_Rate;
                                break;
                            case "Industrial Excess Price":
                                resultObj.IndustrailCityWisePrice.Effectice_Date_3 = price.Eff_date;
                                resultObj.IndustrailCityWisePrice.Price_3 = price.MMBTU_Rate;
                                break;
                            case "Industrial MGO":
                                resultObj.IndustrailCityWisePrice.Effectice_Date_1 = price.Eff_date;
                                resultObj.IndustrailCityWisePrice.Price_1 = price.MMBTU_Rate;
                                break;
                            case "Industrial NON MGO":
                                resultObj.IndustrailCityWisePrice.Effectice_Date_2 = price.Eff_date;
                                resultObj.IndustrailCityWisePrice.Price_2 = price.MMBTU_Rate;
                                break;
                            case "Non Commercial":
                                resultObj.CommercialCityWisePrice.Effectice_Date_2 = price.Eff_date;
                                resultObj.CommercialCityWisePrice.Price_2 = price.MMBTU_Rate;
                                break;
                            default: break;
                        }
                    }
                    model.CityWisePrice.Add(resultObj);
                }
            }
            return View(model);
        }

        public ActionResult CNGGasPrice()
        {
            GasPrice model = new GasPrice();
            //Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");
            //Data.Items.Item CityList = db.GetItem(Templates.GasPricesInCity.Datasource.CenterCityList);
            //var _citylist = CityList.GetChildren().ToList().Select(x => new SelectListItem()
            //{
            //    Text = x.Fields["Text"].Value,
            //    Value = x.Fields["Value"].Value
            //}).ToList();
            //model.CityList = _citylist;
            //model.LocateCNGCityList = _citylist;
            //model.SelectedCity = cityList.FirstOrDefault().CityName;
            //if (model.SelectedCity != null && model.SelectedCity.Any())
            //{
            var getAllCityWisePrice = objWebAPIAdaniGas.GetGasPrice(null);
            var cities = getAllCityWisePrice.Where(p => p.Product == "CNG In Rs./KG").Select(s => s.City).Distinct().ToList();
            model.CityList = cities.Select(x => new SelectListItem()
            {
                Text = x,
                Value = x
            }).ToList();

            List<string> locateCNGCityList = objWebAPIAdaniGas.GetCompleteCentersList();

            model.LocateCNGCityList = locateCNGCityList.Select(x => new SelectListItem()
            {
                Text = x,
                Value = x
            }).ToList();

            if (cities != null && cities.Count > 0)
            {
                //model.SelectedCity = cities.FirstOrDefault();
                List<CityAndPrice> result = new List<CityAndPrice>();
                foreach (var city in cities)
                {
                    CityAndPrice resultObj = new CityAndPrice { City = city };
                    foreach (var price in getAllCityWisePrice.Where(c => c.City == city).ToList())
                    {
                        switch (price.Product)
                        {
                            case "CNG In Rs./KG":
                                resultObj.CNGCityWisePrice.Effectice_Date_1 = price.Eff_date;
                                resultObj.CNGCityWisePrice.Price_1 = price.MMBTU_Rate;
                                break;
                            case "Commercial":
                                resultObj.CommercialCityWisePrice.Effectice_Date_1 = price.Eff_date;
                                resultObj.CommercialCityWisePrice.Price_1 = price.MMBTU_Rate;
                                break;
                            case "Domestic":
                                resultObj.DomesticCityWisePrice.Effectice_Date_1 = price.Eff_date;
                                resultObj.DomesticCityWisePrice.Price_1 = price.MMBTU_Rate;
                                break;
                            case "Industrial Excess Price":
                                resultObj.IndustrailCityWisePrice.Effectice_Date_3 = price.Eff_date;
                                resultObj.IndustrailCityWisePrice.Price_3 = price.MMBTU_Rate;
                                break;
                            case "Industrial MGO":
                                resultObj.IndustrailCityWisePrice.Effectice_Date_1 = price.Eff_date;
                                resultObj.IndustrailCityWisePrice.Price_1 = price.MMBTU_Rate;
                                break;
                            case "Industrial NON MGO":
                                resultObj.IndustrailCityWisePrice.Effectice_Date_2 = price.Eff_date;
                                resultObj.IndustrailCityWisePrice.Price_2 = price.MMBTU_Rate;
                                break;
                            case "Non Commercial":
                                resultObj.CommercialCityWisePrice.Effectice_Date_2 = price.Eff_date;
                                resultObj.CommercialCityWisePrice.Price_2 = price.MMBTU_Rate;
                                break;
                            default: break;
                        }
                    }
                    model.CityWisePrice.Add(resultObj);
                }
            }
            return View(model);
        }

        [HttpPost]
        public ActionResult CNGGasPrice(GasPrice model)
        {
            var getAllCityWisePrice = objWebAPIAdaniGas.GetGasPrice(null);
            var cities = getAllCityWisePrice.Where(p => p.Product == "CNG In Rs./KG").Select(s => s.City).Distinct().ToList();
            var _citylist = cities.Select(x => new SelectListItem()
            {
                Text = x,
                Value = x
            }).ToList();

            Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");
            //Data.Items.Item CityList = db.GetItem(Templates.GasPricesInCity.Datasource.CenterCityList);
            //var _citylist = CityList.GetChildren().ToList().Select(x => new SelectListItem()
            //{
            //    Text = x.Fields["Text"].Value,
            //    Value = x.Fields["Value"].Value
            //}).ToList();
            var url = db.GetItem(Templates.Pages.GasCngLocate).Url();
            if (!string.IsNullOrEmpty(url))
            {
                TempData["CollectionCenterModel"] = new CollectionCenterModel()
                {
                    CityList = _citylist,
                    City = model.LocateCNGCity
                };
                return RedirectPermanent(url);
            }
            return View();
        }
        #endregion

        #region Understand You Bill
        [HttpGet]
        [RedirectUnAuthenticatedAdaniGas]
        public ActionResult UnderstandBillAdaniGas()
        {
            TempData["CustomerType"] = SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerType;
            return View();
        }

        #endregion

        #region || ** Locate CNG Station **||
        public ActionResult CngLocateStation()
        {
            Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");
            var collectionCenterModel = new CollectionCenterModel();
            //Data.Items.Item CityList = db.GetItem(Templates.GasPricesInCity.Datasource.CenterCityList);
            List<string> CityList = objWebAPIAdaniGas.GetCompleteCentersList();

            var _citylist = CityList.Select(x => new SelectListItem()
            {
                Text = x,
                Value = x
            }).OrderBy(t => t.Text).ToList();
            if (TempData["CollectionCenterModel"] != null)
            {
                var tempdataModel = (CollectionCenterModel)TempData["CollectionCenterModel"];
                collectionCenterModel = new CollectionCenterModel() { CityList = _citylist, City = tempdataModel.City };
            }
            else
            {
                collectionCenterModel = new CollectionCenterModel() { CityList = _citylist };
            }

            return View(collectionCenterModel);
        }
        public ActionResult CngArea(string city)
        {
            WebAPIAdaniGas _webApiAdaniGas = new WebAPIAdaniGas();
            JsonResult result = new JsonResult();
            try
            {
                var araeList = _webApiAdaniGas.GetAreaOfCenterAndCity("3", city).OrderBy(x => x.Text).ToList();
                result = Json(araeList, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return result;

        }

        [HttpPost]
        public ActionResult CNGStations(string city, string area)
        {
            JsonResult result = new JsonResult();

            try
            {
                WebAPIAdaniGas _webApiAdaniGas = new WebAPIAdaniGas();
                var collectioncenters = _webApiAdaniGas.GetCenterList("3", city, area);
                result = Json(collectioncenters, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return result;
        }

        [HttpGet]
        public ActionResult ContactUsForm()
        {
            return View();
        }
        public bool IsReCaptchValid(string reResponse)
        {

            var result = false;
            // var captchaResponse = Request.Form["g-recaptcha-response"];
            var captchaResponse = reResponse;
            string secretKey = DictionaryPhraseRepository.Current.Get("/CaptachaKey/SecretKey", "");
            //var secretKey = ConfigurationManager.AppSettings["SecretKey"];
            // var secretKey = "6LdkC64UAAAAAJiii15Up9xETgsLuPQnQ1BKZft8";
            var apiUrl = DictionaryPhraseRepository.Current.Get("/CaptachaKey/APIUrl", "https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}");
            var requestUri = string.Format(apiUrl, secretKey, captchaResponse);
            var request = (HttpWebRequest)WebRequest.Create(requestUri);

            using (WebResponse response = request.GetResponse())
            {
                using (StreamReader stream = new StreamReader(response.GetResponseStream()))
                {

                    Newtonsoft.Json.Linq.JObject jResponse = Newtonsoft.Json.Linq.JObject.Parse(stream.ReadToEnd());
                    var isSuccess = jResponse.Value<bool>("success");
                    result = (isSuccess) ? true : false;
                }
            }
            return result;
        }
        [HttpPost]
        public ActionResult InsertContactdetail(GasContactModel m)
        {
            bool validationStatus = true;
            Log.Error("Adani Gas Insertcontactdetailfor ", "Start");
            var getEmailTo = "";
            var getMessage = "";
            var from = "";
            var getEmailSubject = "";
            var result = new { status = "1" };
            var errorResponse = new { FieldName = string.Empty, ErrorMessgae = "" };
            try
            {
                if (string.IsNullOrEmpty(m.reResponse))
                {
                    // ModelState.AddModelError(nameof(m.Name), "Please enter name");
                    errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/Captch", "recaptcha2"), ErrorMessgae = "Please Enter Captch" };
                    return Json(errorResponse, JsonRequestBehavior.AllowGet);
                }

                validationStatus = IsReCaptchValid(m.reResponse);
                //if (Request.Cookies["SIDCC"]!=null)
                //{
                //    if (Session["validate"] == null)
                //    {
                //        validationStatus = true;
                //    }
                //    else
                //    {
                //        if (Session["validate"].ToString() != Request.Cookies["SIDCC"].Value)
                //        {
                //            validationStatus = true;
                //        }
                //    }
                //}
            }
            catch (Exception ex)
            {
                result = new { status = "2" };
                Log.Error("Failed to validate auto script : " + ex.ToString(), "Failed");
            }
            if (!string.IsNullOrEmpty(m.OtherCity))
            {
                m.City = string.Join("|", m.City, m.OtherCity);
            }

            if (validationStatus == true)
            {
                Log.Error("InsertAdaniGasContactFormRecord ", "Start");
                try
                {
                    if (string.IsNullOrEmpty(m.Name))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/EmptyName", "cname"), ErrorMessgae = "Please enter name" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }
                    else if (!string.IsNullOrEmpty(m.Name) && (!Regex.IsMatch(m.Name, (@"^[a-zA-Z][a-zA-Z ]*$"))))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/InvalidName", "cname"), ErrorMessgae = "Please enter valid name" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }
                    else if (!string.IsNullOrEmpty(m.Name) && (m.Name.Length>50))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/InvalidNameLength", "cname"), ErrorMessgae = "!Only 500 characters are allowed" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }

                    if (string.IsNullOrEmpty(m.MessageType))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/MessageType", "cmessageType"), ErrorMessgae = "Please select enquiry type" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }
                    else if (!string.IsNullOrEmpty(m.MessageType) && (!Regex.IsMatch(m.MessageType, (@"^[a-zA-Z][a-zA-Z ]*$"))))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/InvalidMessageType", "cmessageType"), ErrorMessgae = "Please select a valid enquiry type" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }

                    if (string.IsNullOrEmpty(m.Address))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/Address", "address"), ErrorMessgae = "Please enter address" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }
                    else if (!string.IsNullOrEmpty(m.Address) && (!Regex.IsMatch(m.Address, (@"^([a-zA-Z0-9]|[- @/\\.,#&!()])*$"))))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/InvalidAddress", "address"), ErrorMessgae = "Please enter valid address" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }
                    else if (!string.IsNullOrEmpty(m.Address) && (m.Address.Length > 500))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/InvalidAddressLength", "address"), ErrorMessgae = "!Only 500 characters are allowed" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }                    

                    if (string.IsNullOrEmpty(m.Email))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/Email", "cmailid"), ErrorMessgae = "Please enter email" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }
                    else if (!string.IsNullOrEmpty(m.Email) && (!Regex.IsMatch(m.Email, (@"^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}" + @"\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\" + @".)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$"))))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/InvalidEmail", "cmailid"), ErrorMessgae = "Please enter valid email address" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }

                    if (!string.IsNullOrEmpty(m.CustomerId) && (!Regex.IsMatch(m.CustomerId, (@"^([0-9]{10})$"))))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/InvalidCustomerId", "CustomerId"), ErrorMessgae = "Please enter valid 10 digit customer id" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }

                    if (string.IsNullOrEmpty(m.State))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/State", "drpstate"), ErrorMessgae = "Please select State" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }
                    else if (!string.IsNullOrEmpty(m.State) && (!Regex.IsMatch(m.State, (@"^[a-zA-Z][a-zA-Z ]*$"))))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/InvalidState", "drpstate"), ErrorMessgae = "Please select valid State" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }

                    if (string.IsNullOrEmpty(m.City))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/City", "cccity"), ErrorMessgae = "Please select City" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }
                    else if (!string.IsNullOrEmpty(m.City) && (!Regex.IsMatch(m.City, (@"^[a-zA-Z][a-zA-Z ]*$"))))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/InvalidCity", "cccity"), ErrorMessgae = "Please select valid city" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }

                    if (string.IsNullOrEmpty(m.Mobile))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/Mobile", "ccontactno"), ErrorMessgae = "Please enter mobile no" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }
                    else if (!string.IsNullOrEmpty(m.Mobile) && (!Regex.IsMatch(m.Mobile, (@"^([0-9]{10})$"))))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/InvalidMobile", "ccontactno"), ErrorMessgae = "Please enter valid mobile number" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }                                                            

                    if (string.IsNullOrEmpty(m.Message))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/Message", "cmessage"), ErrorMessgae = "This Field is required" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }
                    else if (!string.IsNullOrEmpty(m.Message) && (!Regex.IsMatch(m.Message, (@"^([a-zA-Z0-9]|[- @/\\.,#&!()])*$"))))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/InvalidMessage", "cmessage"), ErrorMessgae = "Please enter valid message" };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }
                    else if (!string.IsNullOrEmpty(m.Message) && (m.Message.Length>2000))
                    {
                        errorResponse = new { FieldName = DictionaryPhraseRepository.Current.Get("/ContactUs/InvalidMessageLength", "cmessage"), ErrorMessgae = "!Only 2000 characters are allowed." };
                        return Json(errorResponse, JsonRequestBehavior.AllowGet);
                    }

                    if (m != null)
                    {
                        AdadniGasDBModelDataContext rdb = new AdadniGasDBModelDataContext();
                        GasFormData r = new GasFormData();

                        r.Name = m.Name;
                        r.Email = m.Email;
                        r.MessageType = m.MessageType;
                        r.Mobile = m.Mobile;
                        r.Address = m.Address;
                        r.City = m.City;
                        r.State = m.State;
                        r.CustomerId = m.CustomerId;
                        r.Message = m.Message;
                        r.FormType = m.FormType;
                        r.PageInfo = m.PageInfo;
                        r.FormSubmitOn = m.FormSubmitOn;

                        #region Insert to DB
                        rdb.GasFormDatas.InsertOnSubmit(r);
                        rdb.SubmitChanges();
                        #endregion
                    }
                }
                catch (Exception ex)
                {
                    result = new { status = "0" };
                    Console.WriteLine(ex);
                }

                try
                {
                    var msgTpye = Sitecore.Context.Database.GetItem("{E3B83B48-4CF0-4541-A9E9-8854FE0B3B4C}");
                    var getfilteredItem = msgTpye.Children.Where(x => x.Fields["Text"].Value.ToLower() == m.MessageType.ToLower());

                    foreach (var itemData in getfilteredItem.ToList())
                    {
                        getEmailTo = itemData.Fields["Value"].Value;
                        getMessage = itemData.Fields["Subject"].Value;
                        getEmailSubject = itemData.Fields["Subject"].Value;
                        from = itemData.Fields["From"].Value;


                    }
                    getMessage = "Hello " + m.Name + ",<br><br>" + getMessage;
                    //string from = DictionaryPhraseRepository.Current.Get("/ContactUs/EmailFrom", "");
                    bool results = sendEmail(m.Email, getEmailSubject, getMessage, from);

                    if (results)
                    {
                        Log.Error("Email Sent to specific Message Subject type- ", "");
                    }

                }
                catch (Exception ex)
                {
                    result = new { status = "1" };
                    Log.Error("Failed to get email from subject", ex.ToString());
                }
                try
                {
                    string emailText = DictionaryPhraseRepository.Current.Get("/ContactFrom/EmailText", "");
                    string message = "";
                    m.CustomerId = !string.IsNullOrEmpty(m.CustomerId) ? m.CustomerId : string.Empty;
                    m.Address = !string.IsNullOrEmpty(m.Address) ? m.Address : string.Empty;
                    message = "Hello<br><br>" + emailText + "<br><br>";
                    message = message + "<br>Name: " + m.Name + "<br>Email-Id: " + m.Email + "<br>Subject of Message: " + m.MessageType + "<br>Customer ID: " + m.CustomerId + "<br>Contact Number: " + m.Mobile + "<br>Address: " + m.Address + "<br>State: " + m.State + "<br>City: " + m.City + "<br>Message: " + m.Message + "<br><br>Thanks";
                    //string to = DictionaryPhraseRepository.Current.Get("/ContactFrom/EmailTo", "");
                    string emailfrom = DictionaryPhraseRepository.Current.Get("/ContactFrom/EmailFrom", "");
                    string emailSubject = DictionaryPhraseRepository.Current.Get("/ContactFrom/EmailSubject", "");
                    bool results = sendEmail(getEmailTo, emailSubject, message, emailfrom);

                    if (results)
                    {
                        Log.Info("Adani Gas Email Sent- ", "");
                    }
                    else
                    {
                        Log.Error("Adani Gas Email Sent failed" + m.FromEmail, "");
                    }
                }
                catch (Exception ex)
                {
                    result = new { status = "1" };
                    Log.Error("Failed to sent Email", ex.ToString());
                }
            }
            else
            {
                result = new { status = "2" };
            }
            #endregion
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult InsertSubscribedetail(GasContactModel m)
        {
            bool validationStatus = true;
            var getEmailTo = "";
            string getMessage = "";
            string getEmailSubject = "";
            string from = "";
            var result = new { status = "1" };
            try
            {
                validationStatus = IsReCaptchValid(m.reResponse);
            }
            catch (Exception ex)
            {
                result = new { status = "2" };
                Log.Error("Failed to validate auto script : " + ex.ToString(), "Failed");
            }

            if (validationStatus == true)
            {
                Log.Error("Adani Gas Insertcontactdetailfor ", "Start");

                try
                {
                    AdadniGasDBModelDataContext rdb = new AdadniGasDBModelDataContext();
                    GasFormData r = new GasFormData();

                    r.Name = m.Name;
                    r.Email = m.Email;
                    r.MessageType = m.MessageType;
                    r.Mobile = m.Mobile;
                    r.Message = m.Message;
                    r.FormType = m.FormType;
                    r.PageInfo = m.PageInfo;
                    r.FormSubmitOn = m.FormSubmitOn;

                    #region Insert to DB
                    rdb.GasFormDatas.InsertOnSubmit(r);
                    rdb.SubmitChanges();
                    #endregion
                }
                catch (Exception ex)
                {
                    result = new { status = "0" };
                    Console.WriteLine(ex);
                }
                try
                {
                    var itemData = Sitecore.Context.Database.GetItem(m.emailMessage);

                    getEmailTo = itemData.Fields["ToEmail"].Value;
                    getMessage = itemData.Fields["Body"].Value;
                    getEmailSubject = itemData.Fields["Subject"].Value;
                    from = itemData.Fields["From"].Value;

                    getMessage = "Hello " + m.Name + ",<br><br>" + getMessage;
                    //string from = DictionaryPhraseRepository.Current.Get("/ContactUs/EmailFrom", "");
                    bool results = sendEmail(m.Email, getEmailSubject, getMessage, from);

                    if (results)
                    {
                        Log.Error("Email Sent to specific Message Subject type- ", "");
                    }

                }
                catch (Exception ex)
                {
                    result = new { status = "0" };
                    Log.Error("Failed to get email from subject", ex.ToString());
                }


                try
                {
                    // string to = DictionaryPhraseRepository.Current.Get("/ContactUs/EmailTo", "");
                    //string from = DictionaryPhraseRepository.Current.Get("/ContactUs/EmailFrom", "");
                    //  string emailSubject = DictionaryPhraseRepository.Current.Get("/ContactUs/EmailSubject", "");
                    string emailText = DictionaryPhraseRepository.Current.Get("/ContactUs/EmailText", "");
                    string message = "";
                    message = "Hello<br><br>" + emailText + "<br><br>Name: " + m.Name;
                    message = message + "<br>Email: " + m.Email + "<br><br>Thanks";

                    bool results = sendEmail(getEmailTo, getEmailSubject, message, from);

                    if (results)
                    {
                        Log.Error("Adani Gas Email Sent- ", "");
                    }
                }
                catch (Exception ex)
                {
                    result = new { status = "1" };
                    Log.Error("Failed to sent Email", ex.ToString());
                }

            }
            else
            {
                result = new { status = "2" };
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public ActionResult InsertMediadetail(GasContactModel m)
        {
            bool validationStatus = true;
            Log.Error("Adani Gas InsertMediadetail ", "Start");
            var getEmailTo = "";
            string getMessage = "";
            string getEmailSubject = "";
            string from = "";
            var result = new { status = "1" };
            try
            {
                validationStatus = IsReCaptchValid(m.reResponse);
                //if (Request.Cookies["SIDCC"]!=null)
                //{
                //    if (Session["validate"] == null)
                //    {
                //        validationStatus = true;
                //    }
                //    else
                //    {
                //        if (Session["validate"].ToString() != Request.Cookies["SIDCC"].Value)
                //        {
                //            validationStatus = true;
                //        }
                //    }
                //}
            }
            catch (Exception ex)
            {
                result = new { status = "2" };
                Log.Error("Failed to validate auto script : " + ex.ToString(), "Failed");
            }

            if (validationStatus == true)
            {
                Log.Error("InsertAdaniGasContactFormRecord ", "Start");

                try
                {
                    AdadniGasDBModelDataContext rdb = new AdadniGasDBModelDataContext();
                    GasFormData r = new GasFormData();

                    r.Name = m.Name;
                    r.Email = m.Email;
                    r.MessageType = m.MessageType;
                    r.Mobile = m.Mobile;
                    r.Message = m.Message;
                    r.FormType = m.FormType;
                    r.PageInfo = m.PageInfo;
                    r.FormSubmitOn = m.FormSubmitOn;

                    #region Insert to DB
                    rdb.GasFormDatas.InsertOnSubmit(r);
                    rdb.SubmitChanges();
                }
                catch (Exception ex)
                {
                    result = new { status = "0" };
                    Console.WriteLine(ex);
                }
                try
                {
                    var msgTpye = Sitecore.Context.Database.GetItem("{E3B83B48-4CF0-4541-A9E9-8854FE0B3B4C}");
                    var getfilteredItem = msgTpye.Children.Where(x => x.Fields["Text"].Value.ToLower() == m.MessageType.ToLower());

                    foreach (var itemData in getfilteredItem.ToList())
                    {
                        getEmailTo = itemData.Fields["Value"].Value;
                        getMessage = itemData.Fields["Body"].Value;
                        getEmailSubject = itemData.Fields["Subject"].Value;
                        from = itemData.Fields["From"].Value;


                    }
                    getMessage = "Hello " + m.Name + ",<br><br>" + getMessage;
                    //string from = DictionaryPhraseRepository.Current.Get("/ContactUs/EmailFrom", "");
                    bool results = sendEmail(m.Email, getEmailSubject, getMessage, from);

                    if (results)
                    {
                        Log.Error("Email Sent to specific Message Subject type- ", "");
                    }

                }
                catch (Exception ex)
                {
                    result = new { status = "1" };
                    Log.Error("Failed to get email from subject", ex.ToString());
                }


                try
                {
                    string emailText = DictionaryPhraseRepository.Current.Get("/ContactFrom/EmailText", "");
                    string message = "";
                    message = "Hello<br><br>" + emailText + "<br><br>";
                    message = message + "<br>Name: " + m.Name + "<br>Email-Id: " + m.Email + "<br>Subject of Message: " + m.MessageType + "<br>Contact Number: " + m.Mobile + "<br>Message: " + m.Message + "<br><br>Thanks";
                    //string to = DictionaryPhraseRepository.Current.Get("/ContactFrom/EmailTo", "");
                    string emailfrom = DictionaryPhraseRepository.Current.Get("/ContactFrom/EmailFrom", "");
                    string emailSubject = DictionaryPhraseRepository.Current.Get("/ContactFrom/EmailSubject", "");
                    bool results = sendEmail(getEmailTo, emailSubject, message, emailfrom);

                    if (results)
                    {
                        Log.Info("Adani Gas Email Sent- ", "");
                    }
                    else
                    {
                        Log.Error("Adani Gas Email Sent failed" + m.FromEmail, "");
                    }
                }
                catch (Exception ex)
                {
                    result = new { status = "1" };
                    Log.Error("Failed to sent Email", ex.ToString());
                }
            }
            else
            {
                result = new { status = "2" };

            }
            #endregion
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public bool sendEmail(string to, string subject, string body, string from)
        {
            bool status = false;
            try
            {
                var mail = new MailMessage();
                mail.From = new MailAddress(from);
                mail.To.Add(to);
                mail.Subject = subject;
                mail.Body = body;
                mail.IsBodyHtml = true;
                var ct = new System.Net.Mime.ContentType(System.Net.Mime.MediaTypeNames.Application.Pdf);
                //mail.From = new MailAddress(Sitecore.Configuration.Settings.MailServerUserName);
                mail.From = new MailAddress(from);
                //System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(ms, ct);
                // attachment.ContentDisposition.FileName = fileName;
                // mail.Attachments.Add(attachment);
                MainUtil.SendMail(mail);
                status = true;
                return status;
            }
            catch (System.Exception ex)
            {
                Console.WriteLine(ex.Message, "sendEmail - ");
                Log.Error(ex.Message, "sendEmail - ");
                Log.Error(ex.InnerException.ToString(), "sendEmail - ");
                return status;
            }
        }

        public ActionResult contactusoffice()
        {
            ContactUsOffice model = new ContactUsOffice();
            var stateitems = RenderingContext.Current.Rendering.Item.Axes.GetDescendants().ToList().Where(x => x.TemplateID == new ID("{3D5DA09E-C122-4549-A7EF-8A768F6955CB}")).ToList();
            model.StateList = stateitems.Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();

            var cityitems = RenderingContext.Current.Rendering.Item.Axes.GetDescendants().ToList().Where(x => x.TemplateID == new ID("{2739F727-C6C1-4546-A932-E08FF0848CEE}")).ToList();
            model.CityList = cityitems.Select(x => new SelectListItem()
            {
                Text = x.Fields["Name"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();

            var companydetails = RenderingContext.Current.Rendering.Item.Axes.GetDescendants().ToList().Where(x => x.TemplateID == new ID("{142AA039-EE23-420B-AE1E-3B04BBADA4EF}")).ToList();
            model.companylist = companydetails.Select(x => new companyDetails()
            {
                Name = x.Fields["Name"].Value,
                Email = x.Fields["Email"].Value,
                Address = x.Fields["Address"].Value,
                city = x.Parent.Fields["Name"].Value,
                state = x.Parent.Fields["Value"].Value
            }).ToList();

            return View(model);
        }


        public ActionResult customercareoffice()
        {
            ContactUsOffice model = new ContactUsOffice();

            var cityitems = RenderingContext.Current.Rendering.Item.Axes.GetDescendants().ToList().Where(x => x.TemplateID == new ID("{2739F727-C6C1-4546-A932-E08FF0848CEE}")).ToList();
            model.CityList = cityitems.Select(x => new SelectListItem()
            {
                Text = x.Fields["Name"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();

            var companydetails = RenderingContext.Current.Rendering.Item.Axes.GetDescendants().ToList().Where(x => x.TemplateID == new ID("{142AA039-EE23-420B-AE1E-3B04BBADA4EF}")).ToList();
            model.companylist = companydetails.Select(x => new companyDetails()
            {
                Name = x.Fields["Name"].Value,
                Email = x.Fields["Email"].Value,
                Address = x.Fields["Address"].Value,
                city = x.Parent.Fields["Name"].Value,
                state = x.Parent.Fields["Value"].Value
            }).ToList();

            return View(model);
        }


        public ActionResult pngNetwork()
        {
            string patnertype = RenderingContext.Current.Rendering.Parameters["PatnerType"];
            ContactUsOffice model = new ContactUsOffice();
            List<City> cityList = objWebAPIAdaniGas.GetCityList().OrderBy(x => x.CityName).ToList();
            model.CityList = cityList.Select(x => new SelectListItem()
            {
                Text = x.CityName,
                Value = x.CityCode
            }).ToList();
            model.selectedState = !string.IsNullOrEmpty(patnertype) ? patnertype : string.Empty;
            return View(model);
        }

        public ActionResult pngNetworklist(string group, string patnertype)
        {
            List<PNGNetwork> modelnetwork = new List<PNGNetwork>();
            var pngnetowrk = objWebAPIAdaniGas.GetPNGNetworkList(group, patnertype);


            if (pngnetowrk != null && pngnetowrk.Count == 1 && string.IsNullOrEmpty(pngnetowrk[0].name))
            {
                modelnetwork.Add(new PNGNetwork() { name = "<div id='mainAddress' class='Hazira d-block'>No Records Found</div>" });
            }
            else
            {
                if (pngnetowrk != null && pngnetowrk.Count > 1)
                {
                    foreach (var item in pngnetowrk.OrderBy(x => x.name))
                    {
                        modelnetwork.Add(new PNGNetwork() { name = "<div id='mainAddress' class='Hazira d-block'>" + item.name + "</div>" });
                    }
                }
                else
                {
                    modelnetwork.Add(new PNGNetwork() { name = "<div id='mainAddress' class='Hazira d-block'>No Records Found</div>" });
                }
            }

            var data = new
            {
                name = modelnetwork.Count > 0 ? modelnetwork.Select(x => x.name) : null
            };
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        #region DODO form download

        public ActionResult CNGDODOFormDownload()
        {
            DodoCNG model = new DodoCNG();
            return View(model);
        }

        [HttpPost]
        public ActionResult CNGDODOFormDownload(DodoCNG model)
        {
            try
            {
                string returnmessage = string.Empty;
                AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext();

                bool isExists = dbcontext.DODOForms.Any(x => x.Mobile.Equals(model.MobileNumber));
                if (isExists)
                {
                    var existingRecord = dbcontext.DODOForms.Where(x => x.Mobile.Equals(model.MobileNumber)).FirstOrDefault();
                    if (existingRecord.IsPaymentDone == true)
                    {
                        if (string.IsNullOrEmpty(existingRecord.SerialNumber))
                        {
                            model.IsDownloadable = false;
                            this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Mobile Number registered number not available", " Thank you for showing interest in Adani Gas CNG Station (DODO). We regret to inform you that your location does not fall in our Geographical Area (GA). Amount deposited by you will be refunded shortly. Thank you for your patience and looking forward to partnering with you in the future."));
                            return View(model);
                        }
                        else
                        {
                            model.IsDownloadable = true;
                            model.DownloadLink = ReplacePdfForm(existingRecord.SerialNumber);
                            if (model.DownloadLink == "fail")
                            {
                                model.IsDownloadable = false;
                                this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Mobile Number registered error", "Failed to get the download link."));
                                return View(model);
                            }
                        }
                    }
                    else
                    {
                        model.IsDownloadable = false;
                        this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Mobile Number registered payment not done", "Mobile Number is registered but payment is not done."));
                        return View(model);
                    }
                }
                else
                {
                    model.IsDownloadable = false;
                    this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Mobile Number not registered", "Mobile Number not registered."));
                    return View(model);
                }
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("CNGDODOFormDownload Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return View(model);
        }

        public string ReplacePdfForm(string serialNumber)
        {
            string fileNameExisting = "DODO_Application_Form_AGL.pdf";// @"C:\Nidhi\DODO Application Form AGL3.pdf";
            string fileNameNew = "DODO_Application_Form_AGL" + "_" + serialNumber + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".pdf";// @"C:\Nidhi\newfile1.pdf";
            string newFilePathToDownload = "/DodoFormDownload/Forms/" + fileNameNew;
            fileNameExisting = Path.Combine(Server.MapPath("~/DodoFormDownload/Forms"), fileNameExisting);
            fileNameNew = Path.Combine(Server.MapPath("~/DodoFormDownload/Forms"), fileNameNew);
            try
            {
                using (var existingFileStream = new FileStream(fileNameExisting, FileMode.Open))
                using (var newFileStream = new FileStream(fileNameNew, FileMode.Create))
                {
                    // Open existing PDF
                    var pdfReader = new PdfReader(existingFileStream);

                    // PdfStamper, which will create
                    var stamper = new PdfStamper(pdfReader, newFileStream);

                    var form = stamper.AcroFields;
                    var fieldKeys = form.Fields.Keys;
                    form.SetField("Text1", serialNumber);
                    stamper.FormFlattening = false;
                    var field = form.SetFieldProperty("Text1", "setfflags", PdfFormField.FF_READ_ONLY, null);
                    stamper.Close();
                    pdfReader.Close();
                }
            }
            catch (Exception e)
            {
                Log.Error("CNGDODOFormDownload " + e.Message, this);
                return "fail";
            }
            return newFilePathToDownload;
        }

        #endregion


        #region CNG DODO
        public ActionResult CNGDODOForm()
        {
            DodoCNG model = new DodoCNG();
            Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");
            Data.Items.Item OccupationList = db.GetItem(Templates.CNG_DODO_Occupation.Datasource.ListItems);
            Data.Items.Item SalutationList = db.GetItem(Templates.CNG_DODO_Salutation.Datasource.ListItems);
            Data.Items.Item SourceList = db.GetItem(Templates.CNG_DODO_Source.Datasource.ListItems);
            Data.Items.Item StateList = db.GetItem(Templates.CNG_DODO_State.Datasource.ListItems);
            Data.Items.Item OMCList = db.GetItem(Templates.CNG_DODO_OMC.Datasource.ListItems);
            Data.Items.Item OMCYearList = db.GetItem(Templates.CNG_DODO_OMCYears.Datasource.ListItems);

            model.OccupationList = OccupationList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();

            model.salutationList = SalutationList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();

            model.DODOformatSourceList = SourceList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();

            model.StateList = StateList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            model.OMCList = OMCList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            model.OMCYearList = OMCYearList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();

            return View(model);
        }

        [HttpPost]
        public ActionResult CNGDODOForm(DodoCNG model)
        {
            Log.Info(" CNGDODOForm Adani Gas CNGDODO Insertion", "Start");
            AdadniGasDBModelDataContext rdb = new AdadniGasDBModelDataContext();
            DODOForm dbcolumns = new DODOForm();
            try
            {
                if (!ModelState.IsValid)
                {
                    Sitecore.Data.Database db1 = Sitecore.Configuration.Factory.GetDatabase("web");
                    Data.Items.Item OccupationList1 = db1.GetItem(Templates.CNG_DODO_Occupation.Datasource.ListItems);
                    Data.Items.Item SalutationList1 = db1.GetItem(Templates.CNG_DODO_Salutation.Datasource.ListItems);
                    Data.Items.Item SourceList1 = db1.GetItem(Templates.CNG_DODO_Source.Datasource.ListItems);
                    Data.Items.Item StateList1 = db1.GetItem(Templates.CNG_DODO_State.Datasource.ListItems);
                    Data.Items.Item OMCList1 = db1.GetItem(Templates.CNG_DODO_OMC.Datasource.ListItems);
                    Data.Items.Item OMCYearList1 = db1.GetItem(Templates.CNG_DODO_OMCYears.Datasource.ListItems);

                    model.OccupationList = OccupationList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();

                    model.salutationList = SalutationList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();

                    model.DODOformatSourceList = SourceList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();

                    model.StateList = StateList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                    model.OMCList = OMCList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                    model.OMCYearList = OMCYearList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();


                    Data.Items.Item GAList1 = db1.GetItem(Templates.CNG_DODO_State.Datasource.ListItems);
                    var stateitem1 = GAList1.Axes.GetDescendants().Where(x => x.Name.Contains(model.StateVal)).FirstOrDefault();
                    model.GeoAreaList = stateitem1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();


                    return View(model);
                }
                if (IsMobileNumberAvailable(model.MobileNumber))
                {
                    this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Mobile Number Exist", "Mobile Number already registered."));

                    Log.Info(" CNGDODOForm Adani Gas CNGDODO Mobile Number already registered", "DODO Subimmision");
                    Sitecore.Data.Database db1 = Sitecore.Configuration.Factory.GetDatabase("web");
                    Data.Items.Item OccupationList1 = db1.GetItem(Templates.CNG_DODO_Occupation.Datasource.ListItems);
                    Data.Items.Item SalutationList1 = db1.GetItem(Templates.CNG_DODO_Salutation.Datasource.ListItems);
                    Data.Items.Item SourceList1 = db1.GetItem(Templates.CNG_DODO_Source.Datasource.ListItems);
                    Data.Items.Item StateList1 = db1.GetItem(Templates.CNG_DODO_State.Datasource.ListItems);
                    Data.Items.Item OMCList1 = db1.GetItem(Templates.CNG_DODO_OMC.Datasource.ListItems);
                    Data.Items.Item OMCYearList1 = db1.GetItem(Templates.CNG_DODO_OMCYears.Datasource.ListItems);

                    model.OccupationList = OccupationList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();

                    model.salutationList = SalutationList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();

                    model.DODOformatSourceList = SourceList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();

                    model.StateList = StateList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                    model.OMCList = OMCList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                    model.OMCYearList = OMCYearList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();

                    Data.Items.Item GAList11 = db1.GetItem(Templates.CNG_DODO_State.Datasource.ListItems);
                    var stateitem11 = GAList11.Axes.GetDescendants().Where(x => x.Name.Contains(model.StateVal)).FirstOrDefault();
                    model.GeoAreaList = stateitem11.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                    return View(model);
                }

                if (IsMobileNumberAvailableButPaymentnotDone(model.MobileNumber))
                {
                    this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Mobile Number Exist", "Mobile Number registered. But Payment is not done."));

                    Log.Info(" CNGDODOForm Adani Gas CNGDODO Mobile Number already registered But Payment is not done.", "DODO Subimmision");

                    Sitecore.Data.Database db1 = Sitecore.Configuration.Factory.GetDatabase("web");
                    Data.Items.Item OccupationList1 = db1.GetItem(Templates.CNG_DODO_Occupation.Datasource.ListItems);
                    Data.Items.Item SalutationList1 = db1.GetItem(Templates.CNG_DODO_Salutation.Datasource.ListItems);
                    Data.Items.Item SourceList1 = db1.GetItem(Templates.CNG_DODO_Source.Datasource.ListItems);
                    Data.Items.Item StateList1 = db1.GetItem(Templates.CNG_DODO_State.Datasource.ListItems);
                    Data.Items.Item OMCList1 = db1.GetItem(Templates.CNG_DODO_OMC.Datasource.ListItems);
                    Data.Items.Item OMCYearList1 = db1.GetItem(Templates.CNG_DODO_OMCYears.Datasource.ListItems);

                    model.OccupationList = OccupationList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();

                    model.salutationList = SalutationList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();

                    model.DODOformatSourceList = SourceList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();

                    model.StateList = StateList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                    model.OMCList = OMCList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                    model.OMCYearList = OMCYearList1.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();

                    Data.Items.Item GALists = db1.GetItem(Templates.CNG_DODO_State.Datasource.ListItems);
                    var stateitems = GALists.Axes.GetDescendants().Where(x => x.Name.Contains(model.StateVal)).FirstOrDefault();
                    model.GeoAreaList = stateitems.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                    return View(model);
                }

                #region Mapping dbcolumns with model properties
                dbcolumns.StateName = model.StateVal;
                dbcolumns.GeographicalArea = model.GeoAreaVal;
                dbcolumns.Salutation = model.salutationVal;
                dbcolumns.FirstName = model.FirstName;
                dbcolumns.MiddleName = model.MiddleName;
                dbcolumns.LastName = model.LastName;
                dbcolumns.Address1 = model.Address1;
                dbcolumns.Address2 = model.Address2;
                dbcolumns.Address3 = model.Address3;
                dbcolumns.City = model.CityOfAddress;
                dbcolumns.District = model.DistrictOfAddress;
                dbcolumns.State = model.StateOfAddress;
                dbcolumns.Pincode = model.PincodeOfAddress;
                dbcolumns.Mobile = model.MobileNumber;
                dbcolumns.LandlineNumber = model.LandlineNumber;
                dbcolumns.Emailid = model.Email;
                dbcolumns.Occupation = model.OccupationVal;
                dbcolumns.OccuptionDetails = model.briefOccupation;
                dbcolumns.LandPlotNo = model.PlotNo;
                dbcolumns.Nearest_Highway_No_Road = model.Road;
                dbcolumns.Near_LandMark = model.Landmark;
                dbcolumns.Road_going_towards = model.RoadGoingTowards;
                dbcolumns.NameOfCity = model.City;
                dbcolumns.NameOfDistrict = model.District;
                dbcolumns.NameofState = model.State;
                dbcolumns.NameofPincode = model.Pincode;
                dbcolumns.PlotSize = model.Plotsize;
                dbcolumns.PlotType = model.PlotType;
                dbcolumns.FrontViewPhoto = ConvertImageToByteArray(model.FrontViewPhoto);
                dbcolumns.LeftSideEntryPhoto = ConvertImageToByteArray(model.LeftsideEntryPlot);
                dbcolumns.RightSideExitPhoto = ConvertImageToByteArray(model.RightsideExitPlot);
                dbcolumns.InsideOutViewPhoto = ConvertImageToByteArray(model.InsideOutViewPlot);
                dbcolumns.Latitude = model.Latitude;
                dbcolumns.Longtitude = model.Longitude;
                dbcolumns.NearestPumpStationName = model.NameoffillingStation;
                dbcolumns.NearestPumpStationDistance = model.DistancefromLandInKM;
                dbcolumns.AnyPreviousExperience = model.PetrolIndustryPrevExp;
                dbcolumns.ProposedEntity = model.ProposedEntity;
                dbcolumns.HowdidYouKnow = model.DODOformatSourceVal;
                dbcolumns.AllowSMSAlert = model.TermCondition1;
                dbcolumns.TermsAndCondition = model.TermCondition2;
                dbcolumns.CreatedDate = System.DateTime.Now;
                dbcolumns.AgreeForPayment = model.TermCondition3;
                dbcolumns.IsPaymentDone = false;
                dbcolumns.CustomerID = "DODO_" + model.MobileNumber;
                dbcolumns.OMC = model.OMCVal;
                dbcolumns.OMCYear = model.OMCYear;
                #endregion

                #region MyRegion
                rdb.DODOForms.InsertOnSubmit(dbcolumns);
                rdb.SubmitChanges();

                model.ReturnViewMessage = "Data submitted successfully.";

                PayOnline objmodel = new PayOnline();
                objmodel.CustomerID = "DODO_" + model.MobileNumber;
                objmodel.PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "DODO Payment");
                objmodel.CustomerType = "CNG User";
                objmodel.UserType = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/RegisteredUser", "Registered");
                objmodel.Amount = 2000;
                objmodel.Email = model.Email;
                objmodel.Mobile = model.MobileNumber;
                objmodel.CustomerName = model.FirstName + " " + model.LastName;
                objmodel.PaymentGateway = 2;
                PaymentService.StorePaymentRequestAdaniGas(objmodel);
                string RequestHTML = PaymentService.BillDeskTransactionRequestAPIRequestAdaniGasPost(objmodel);
                return Content(RequestHTML);
                #endregion
            }
            catch (Exception ex)
            {
                model.ReturnViewMessage = ex.Message;
                Log.Error("DODOSubmission Failed to submit details :", ex.ToString());
            }



            Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");
            Data.Items.Item OccupationList = db.GetItem(Templates.CNG_DODO_Occupation.Datasource.ListItems);
            Data.Items.Item SalutationList = db.GetItem(Templates.CNG_DODO_Salutation.Datasource.ListItems);
            Data.Items.Item SourceList = db.GetItem(Templates.CNG_DODO_Source.Datasource.ListItems);
            Data.Items.Item StateList = db.GetItem(Templates.CNG_DODO_State.Datasource.ListItems);
            Data.Items.Item OMCList = db.GetItem(Templates.CNG_DODO_OMC.Datasource.ListItems);
            Data.Items.Item OMCYearList = db.GetItem(Templates.CNG_DODO_OMCYears.Datasource.ListItems);

            model.OccupationList = OccupationList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();

            model.salutationList = SalutationList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();

            model.DODOformatSourceList = SourceList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();

            model.StateList = StateList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            model.OMCList = OMCList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            model.OMCYearList = OMCYearList.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();

            Data.Items.Item GAList = db.GetItem(Templates.CNG_DODO_State.Datasource.ListItems);
            var stateitem = GAList.Axes.GetDescendants().Where(x => x.Name.Contains(model.StateVal)).FirstOrDefault();
            model.GeoAreaList = stateitem.GetChildren().ToList().Select(x => new SelectListItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            return View(model);
        }


        public ActionResult CngDodoCity(string state)
        {
            JsonResult result = new JsonResult();
            try
            {
                Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");
                Data.Items.Item StateList = db.GetItem(Templates.CNG_DODO_State.Datasource.ListItems);

                var stateitem = StateList.Axes.GetDescendants().Where(x => x.Name.Contains(state)).FirstOrDefault();
                var citylist = stateitem.GetChildren().ToList().Select(x => new SelectListItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();

                result = Json(citylist, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error(" Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return result;
        }
        private byte[] ConvertImageToByteArray(HttpPostedFileBase file)
        {
            byte[] data;
            using (var ms = new MemoryStream())
            {
                var img = System.Drawing.Image.FromStream(file.InputStream);
                img.Save(ms, img.RawFormat);
                data = ms.ToArray();
                return data;
            }
        }

        private bool IsMobileNumberAvailable(string MobileNumber)
        {
            AdadniGasDBModelDataContext rdb = new AdadniGasDBModelDataContext();
            return rdb.DODOForms.Any(x => x.Mobile.Equals(MobileNumber) && x.IsPaymentDone == true);
        }

        private bool IsMobileNumberAvailableButPaymentnotDone(string MobileNumber)
        {
            AdadniGasDBModelDataContext rdb = new AdadniGasDBModelDataContext();
            return rdb.DODOForms.Any(x => x.Mobile.Equals(MobileNumber) && x.IsPaymentDone == false);
        }

        public ActionResult IsMobileValidateforDODO(string MobileNumber)
        {
            JsonResult result = new JsonResult();
            try
            {
                string returnmessage = string.Empty;
                AdadniGasDBModelDataContext rdb = new AdadniGasDBModelDataContext();
                if (rdb.DODOForms.Any(x => x.Mobile.Equals(MobileNumber) && x.IsPaymentDone == true))
                {
                    returnmessage = "Registered";
                }
                else if (rdb.DODOForms.Any(x => x.Mobile.Equals(MobileNumber) && x.IsPaymentDone == false))
                {
                    returnmessage = "PaymentPending";
                }
                result = Json(returnmessage, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error(" Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return result;
        }

        public ActionResult downloaddodoimage(string ID, string imagefield)
        {
            JsonResult result = new JsonResult();
            try
            {
                string returnmessage = string.Empty;
                AdadniGasDBModelDataContext rdb = new AdadniGasDBModelDataContext();
                var ctx1 = rdb.DODOForms.Where(x => x.Id == Convert.ToDouble(ID)).FirstOrDefault();

                if (ctx1 != null && ctx1.LeftSideEntryPhoto != null && imagefield == "FrontViewPhoto")
                {
                    returnmessage = "data:image/jpeg;base64," + ctx1.FrontViewPhoto.ToString();
                }
                else if (ctx1 != null && ctx1.LeftSideEntryPhoto != null && imagefield == "LeftSideEntryPhoto")
                {
                    returnmessage = "data:image/jpeg;base64," + ctx1.LeftSideEntryPhoto.ToString();
                }
                else if (ctx1 != null && ctx1.LeftSideEntryPhoto != null && imagefield == "RightSideExitPhoto")
                {
                    returnmessage = "data:image/jpeg;base64," + ctx1.RightSideExitPhoto.ToString();
                }
                else if (ctx1 != null && ctx1.LeftSideEntryPhoto != null && imagefield == "InsideOutViewPhoto")
                {
                    returnmessage = "data:image/jpeg;base64," + ctx1.InsideOutViewPhoto.ToString();
                }

                result = Json(returnmessage.Replace("\"", ""), JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error(" Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return result;
        }
        #endregion
        public ActionResult paymentfordodo(string mobile)
        {
            JsonResult result = new JsonResult();
            try
            {
                string returnmessage = string.Empty;
                AdadniGasDBModelDataContext rdb = new AdadniGasDBModelDataContext();


                DODOForm ctx1 = rdb.DODOForms.Where(x => x.Mobile == mobile).FirstOrDefault();
                PayOnline objmodel = new PayOnline();
                objmodel.CustomerID = "DODO_" + mobile;
                objmodel.PaymentType = DictionaryPhraseRepository.Current.Get("/Accounts/Payment Type/Bill Paid", "DODO Payment");
                objmodel.CustomerType = "CNG User";
                objmodel.UserType = DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/RegisteredUser", "Registered");
                objmodel.Amount = 2000;
                objmodel.Email = ctx1.Emailid;
                objmodel.Mobile = ctx1.Mobile;
                objmodel.CustomerName = ctx1.FirstName + " " + ctx1.LastName;
                objmodel.PaymentGateway = 2;
                PaymentService.StorePaymentRequestAdaniGas(objmodel);
                string RequestHTML = PaymentService.BillDeskTransactionRequestAPIRequestAdaniGasPost(objmodel);
                return Content(RequestHTML);

            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("paymentfordodo Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return result;
        }

        public ActionResult GetdodoformList()
        {
            List<DODOForm> modallist = new List<DODOForm>();
            try
            {
                AdadniGasDBModelDataContext rdb = new AdadniGasDBModelDataContext();
                modallist = rdb.DODOForms.OrderBy(x => x.CreatedDate).ToList();
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("GetdodoformList Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return View(modallist);
        }

        public ActionResult GetdodoformListv2()
        {
            List<DODOForm> modallist = new List<DODOForm>();
            try
            {
                DateTime v2Date = new DateTime(2019, 12, 1);
                AdadniGasDBModelDataContext rdb = new AdadniGasDBModelDataContext();
                modallist = rdb.DODOForms.Where(d => d.CreatedDate >= v2Date).OrderBy(x => x.CreatedDate).ToList();
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("GetdodoformList Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return View(modallist);
        }

        public ActionResult GetdodoformListv3()
        {
            List<DODOForm> modallist = new List<DODOForm>();
            try
            {
                DateTime v2Date = new DateTime(2020, 11, 1);
                AdadniGasDBModelDataContext rdb = new AdadniGasDBModelDataContext();
                modallist = rdb.DODOForms.Where(d => d.CreatedDate >= v2Date).OrderByDescending(x => x.CreatedDate).ToList();
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("GetdodoformList Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return View(modallist);
        }

        public bool validateCustomerID(string customerID)
        {
            if (SessionHelper.UserSession.AdaniGasUserSessionContext != null && SessionHelper.UserSession.AdaniGasUserSessionContext.CustomerID == customerID)
            {
                return true;
            }
            return false;
        }

        public double getAmountfromDB(string customerID, string orderid)
        {
            double amnt = 0;
            using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
            {
                PaymentHistoryData ctx = dbcontext.PaymentHistoryDatas.Where(x => x.UserId == customerID && x.OrderId == orderid).FirstOrDefault();
                if (ctx.PaymentType == "Advance Bill Paid")
                {
                    amnt = Convert.ToDouble(ctx.AdvanceAmmount);
                }
                else
                {
                    amnt = Convert.ToDouble(ctx.Amount);
                }
            }
            return amnt;
        }
        //HDFC PG Added By KETAN
        public bool ValidatePaymentfromDB(string customerID, string orderid)
        {
            try
            {
                using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                {
                    PaymentHistoryData ctx = dbcontext.PaymentHistoryDatas.Where(x => x.UserId == customerID && x.OrderId == orderid).FirstOrDefault();
                    if (ctx != null)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("Error at StorePaymentResponseAdaniGas :" + ex.Message, this);
                return false;
            }

        }
        public ActionResult paymentreceipt()
        {

            var model = new PayOnline();
            try
            {
                Sitecore.Diagnostics.Log.Info("Payment Receipt for DODO Form AdaniGas", this);
                var mobilenumber = Request.QueryString["mobilenumber"];
                AdadniGasDBModelDataContext rdb = new AdadniGasDBModelDataContext();
                var receipt = rdb.PaymentHistoryDatas.Where(x => x.AccountNumber == "DODO_" + mobilenumber).FirstOrDefault();

                if (receipt != null)
                {
                    model.TransactionId = receipt.TransactionId;
                    model.TransactionDate = receipt.ResponseTime.Value.ToString("dd-MM-yyyy HH:mm:ss");
                    model.OrderId = receipt.OrderId;
                    model.CustomerID = receipt.AccountNumber;
                    model.CustomerName = rdb.DODOForms.Where(x => x.CustomerID == "DODO_" + mobilenumber).FirstOrDefault().FirstName;
                    model.Amount = !string.IsNullOrEmpty(receipt.Amount) ? Convert.ToDouble(receipt.Amount) : 0;
                    model.ResponseStatus = !string.IsNullOrEmpty(receipt.Status) && receipt.Status.ToLower().Contains("Success") ? "Success" : "-";
                    return this.View(model);
                }
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error("paymentreceipt Error at " + MethodBase.GetCurrentMethod().Name + ":" + ex.Message, this);
            }
            return View(model);
        }


        #region NewEnquiry

        public void LoadMaster()
        {
            var CityRegion = Helper.DropDownHelper.GetCityRegion();
            var City = CityRegion.Select(s => new { s.CityName, s.CityId }).Distinct().OrderBy(o => o.CityName);
            ViewBag.City = City;

            var Region = CityRegion.Where(p => p.CityId == CityRegion.FirstOrDefault().CityId).Select(s => new { s.RegionName, RegionId = s.RegionId + "$" + s.PlantId, s.PlantId }).Distinct().OrderBy(o => o.RegionName);
            ViewBag.Region = Region;
            var arr = Region.FirstOrDefault().RegionId.Split('$').ToList();
            ViewBag.Society = Helper.DropDownHelper.GetSociety(arr[0], arr[1]).Distinct().OrderBy(o => o.SocietyName);

            ViewBag.City1 = City.FirstOrDefault().CityName;
            ViewBag.GroupDesc = Region.FirstOrDefault().RegionName;
        }

        public ActionResult NewInquiryCNG(NewInquiryCNG NewInq, string Title, string RealOTP, string OTP, string HouseTypeId, string HouseTypeValue)
        {
            // VALIDATIONS
            if (NewInq.VehilcleType.ToLower() == "car")
            {
                if (string.IsNullOrEmpty(NewInq.VehicleModel) || NewInq.VehicleModel == "Select Value")
                    ModelState.AddModelError("VehicleModel", "Vehicle Model Required");
            }
            if (NewInq.VehicleCatagory.ToLower() == "old")
            {
                if (string.IsNullOrEmpty(NewInq.VehicleNumber))
                    ModelState.AddModelError("VehicleNumber", "Vehicle Number Required");
            }

            if (NewInq.VehicleMake == "Select Value")
                ModelState.AddModelError("VehicleMake", "Vehicle Company Required");


            if (Helper.DropDownHelper.VerifyOTP(NewInq.Mob_number, OTP))
            {
                var arr = NewInq.RegioGroup.Split('$').ToList();
                NewInq.RegioGroup = arr[0];
                string fullname = NewInq.Name_first + " " + NewInq.Name_last;
                NewInq.Bpkind = "9005";
                NewInq.Plant = arr[1];
                NewInq.Name_first = Title + " " + NewInq.Name_first;
                NewInq.Compno = "0000000000";
                NewInq.Qmnum = "00000000000";
                NewInq.Region = "06";
                NewInq.RegioGroup = "6008"; // hard coded as per rajesh email for CNG inquiry creation.
                NewInq.MsgFlag = "S";
                NewInq.Message = "Data Saved Successfully";
                NewInq.Str_suppl2 = NewInq.Str_suppl2 == null ? "" : NewInq.Str_suppl2;
                NewInq.Str_suppl3 = "";
                NewInq.Post_code1 = "";
                NewInq.VehicleNumber = NewInq.VehicleNumber == null ? "" : NewInq.VehicleNumber;
                NewInq.VehicleModel = NewInq.VehicleModel == null ? "" : NewInq.VehicleModel;
                NewInq.Street = "";
                NewInq.House_num1 = "";
                NewInq.Str_suppl1 = "";
                NewInq.Smtp_addr = NewInq.Smtp_addr == null ? "" : NewInq.Smtp_addr;
                //NewInq.SAPINQDT = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                if (ModelState.IsValid)
                {
                    var sMessage = Helper.oDataHelper.SaveEnquiryCNG(NewInq);
                    var EnquiryNo = sMessage.Replace("Thank you for showing interest.Your inquiry no is : ", "");
                    if (EnquiryNo.StartsWith("Q"))
                    {
                        #region Second Call
                        var EnquiryDetails = Helper.RegistrationHelper.GetEnquiry(EnquiryNo);

                        // New Enquiry Second Call.
                        Models.NewInqSecondCNG newInqSecond = new NewInqSecondCNG();
                        newInqSecond.INQDATETM = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                        newInqSecond.FSOID = EnquiryDetails.AGNAM;
                        newInqSecond.TITAL = Title;
                        newInqSecond.CUSTNAME = fullname;
                        newInqSecond.CITY = NewInq.City1;
                        newInqSecond.SOCIETY = NewInq.Street;
                        newInqSecond.AREA = NewInq.GroupDesc;
                        newInqSecond.HFNO = NewInq.House_num1;
                        newInqSecond.ADDR1 = NewInq.Str_suppl1;
                        newInqSecond.ADDR2 = NewInq.Str_suppl2;
                        newInqSecond.ESTATUS = "P";
                        newInqSecond.MOBNO = NewInq.Mob_number;
                        newInqSecond.EMAILID = NewInq.Smtp_addr;
                        newInqSecond.REMARK = "";
                        newInqSecond.SAPINQID = EnquiryNo;
                        newInqSecond.TASKID = 1;
                        newInqSecond.TASKGRP = "CNG";
                        newInqSecond.TYPE = "9005";
                        newInqSecond.VehilcleType = NewInq.VehicleCatagory;
                        newInqSecond.VehicleCatagory = NewInq.VehilcleType;
                        newInqSecond.VehicleMake = NewInq.VehicleMake;
                        newInqSecond.VehicleModel = NewInq.VehicleModel;
                        newInqSecond.VehicleNumber = NewInq.VehicleNumber;
                        newInqSecond.VendorId = "";
                        newInqSecond.POSTCODE = "1";
                        Helper.oDataHelper.SaveEnquirySecondCNG(newInqSecond);
                        #endregion

                        // FOR STATUS UPDATE
                        #region Inquiry Status
                        Models.AddInqStatus addInqStatus = new AddInqStatus();
                        addInqStatus.SAPINQID = EnquiryNo;
                        addInqStatus.SAPINQDT = newInqSecond.INQDATETM;
                        addInqStatus.CREATEDATE = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                        addInqStatus.ISTATUS = "Inquiry Created";
                        addInqStatus.PAID_STATUS = "";
                        Helper.oDataHelper.AddEnquiryStatus(addInqStatus);
                        #endregion

                        // SAVE INQUIRY STATUS 
                        #region SAVE Inquiry Status
                        string Patner = Helper.RegistrationHelper.SetActualBP(EnquiryNo);
                        Models.InquiryStatusSet InquiryStatusSet = new InquiryStatusSet();
                        InquiryStatusSet.InquiryNo = EnquiryNo;
                        InquiryStatusSet.InquiryDate = DateTime.Now.ToString("yyyyMMdd");
                        InquiryStatusSet.ProspectNo = Patner;
                        InquiryStatusSet.ProspectDate = DateTime.Now.ToString("yyyyMMdd");
                        InquiryStatusSet.ActualbpNo = "";
                        InquiryStatusSet.ContractAcc = "";
                        InquiryStatusSet.ActualbpDate = "00000000";
                        InquiryStatusSet.UserID = "";
                        InquiryStatusSet.DocumentUpload = "00000000";
                        InquiryStatusSet.DocumentApproved = "00000000";
                        InquiryStatusSet.AdditionalData = "00000000";
                        InquiryStatusSet.SchemeName = "";
                        InquiryStatusSet.Amount = "";
                        InquiryStatusSet.Payment = "00000000";
                        InquiryStatusSet.InstallationDate = "00000000";
                        InquiryStatusSet.ConnectionDate = "00000000";
                        InquiryStatusSet.Feedback = "00000000";
                        InquiryStatusSet.REMARKDATE = "00000000";
                        InquiryStatusSet.REMARK = "";
                        Helper.oDataHelper.InquiryStatusSetSave(InquiryStatusSet);
                        #endregion

                        string smsMessage = "Your inquiry number is " + EnquiryNo + ". Thank you for showing interest in Adani Gas.";
                        Helper.DropDownHelper.SendSMS(NewInq.Mob_number, "INQ", EnquiryNo);
                        ViewBag.CustomerTitle = Title;
                        ViewBag.Message = sMessage;
                        Session["EnquiryMessage"] = sMessage;
                        string redirectUrl = GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated);
                        return Redirect(redirectUrl);
                    }
                    else
                    {
                        ViewBag.CustomerTitle = Title;
                        ViewBag.Message = sMessage;
                        LoadMasterCNG(NewInq.VehilcleType, NewInq.VehicleMake);
                        return View(NewInq);
                    }
                }
            }
            else ModelState.AddModelError("OTP", "Invalid OTP");
            ViewBag.CustomerTitle = Title;
            LoadMasterCNG(NewInq.VehilcleType, NewInq.VehicleMake);
            return View(NewInq);
        }


        [HttpGet]
        public ActionResult SelectEnquiryType(string EnquiryType)
        {
            if (EnquiryType == "CNG")
            {
                var NewInquiryCNGURL = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.NewInquiryCNG);
                return this.Redirect(NewInquiryCNGURL);
                //return RedirectToAction("NewInquiryCNG");
            }
            else
            {
                var NewEnquiryDemesticURL = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.NewEnquiry);
                return this.Redirect(NewEnquiryDemesticURL);
                //return RedirectToAction("NewEnquiry");
            }
        }

        [HttpGet]
        public ActionResult NewEnquiry()
        {
            LoadMaster();
            ViewBag.Message = "";
            return View();
        }

        [HttpGet]
        public ActionResult GetRegion(string CityId)
        {
            var regiondata = Helper.DropDownHelper.GetCityRegion().Where(p => p.CityId == CityId).Select(s => new { RegionId = s.RegionId + "$" + s.PlantId, s.RegionName }).Distinct().OrderBy(o => o.RegionName);
            return Json(regiondata, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult GetSociety(string AreaId)
        {
            var arr = AreaId.Split('$').ToList();

            var regiondata = Helper.DropDownHelper.GetSociety(arr[0], arr[1]).Distinct().OrderBy(o => o.SocietyName);
            return Json(regiondata, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult GetOTP(string MobileNo)
        {
            var otp = Helper.DropDownHelper.GetOTP(MobileNo);
            return Json(otp, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult NewEnquiry(NewInq NewInq, string Title, string RealOTP, string OTP, string HouseTypeId, string HouseTypeValue)
        {
            if (Helper.DropDownHelper.VerifyOTP(NewInq.Mob_number, OTP))
            {
                var arr = NewInq.RegioGroup.Split('$').ToList();
                NewInq.RegioGroup = arr[0];
                string fullname = NewInq.Name_first + " " + NewInq.Name_last;
                NewInq.Bpkind = "9004";
                NewInq.Plant = arr[1];
                NewInq.Name_first = Title + " " + NewInq.Name_first;
                NewInq.Compno = "0000000000";
                NewInq.Qmnum = "00000000000";
                NewInq.Region = "06";
                NewInq.MsgFlag = "S";
                NewInq.Message = "Data Saved Successfully";
                NewInq.Str_suppl2 = NewInq.Str_suppl2 == null ? "" : NewInq.Str_suppl2;
                NewInq.Str_suppl3 = "";
                NewInq.Smtp_addr = NewInq.Smtp_addr == null ? "" : NewInq.Smtp_addr;
                //NewInq.SAPINQDT = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                if (ModelState.IsValid)
                {
                    var sMessage = Helper.oDataHelper.SaveEnquiry(NewInq);
                    var EnquiryNo = sMessage.Replace("Thank you for showing interest.Your inquiry no is : ", "");
                    if (EnquiryNo.StartsWith("Q"))
                    {
                        #region Second Call
                        var EnquiryDetails = Helper.RegistrationHelper.GetEnquiry(EnquiryNo);

                        // New Enquiry Second Call.
                        Models.NewEnquirySecond newInqSecond = new NewEnquirySecond();
                        newInqSecond.INQDATETM = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                        newInqSecond.FSOID = EnquiryDetails.AGNAM;
                        newInqSecond.TITAL = Title;
                        newInqSecond.CUSTNAME = fullname;
                        newInqSecond.CITY = NewInq.City1;
                        newInqSecond.POSTCODE = NewInq.Post_code1;
                        newInqSecond.SOCIETY = NewInq.Street;
                        newInqSecond.AREA = NewInq.GroupDesc;
                        newInqSecond.HFNO = NewInq.House_num1;
                        newInqSecond.ADDR1 = NewInq.Str_suppl1;
                        newInqSecond.ADDR2 = NewInq.Str_suppl2;
                        newInqSecond.ESTATUS = "P";
                        newInqSecond.INQTYPE = "CV";
                        newInqSecond.MOBNO = NewInq.Mob_number;
                        newInqSecond.EMAILID = NewInq.Smtp_addr;
                        newInqSecond.REMARK = "";
                        newInqSecond.SAPINQID = EnquiryNo;
                        newInqSecond.TASKID = 1;
                        newInqSecond.TASKNAME = "Customer Visit";
                        newInqSecond.TASKGRP = "Domestic";

                        Helper.oDataHelper.SaveEnquirySecond(newInqSecond);
                        #endregion

                        // FOR STATUS UPDATE
                        #region Inquiry Status
                        Models.AddInqStatus addInqStatus = new AddInqStatus();
                        addInqStatus.SAPINQID = EnquiryNo;
                        addInqStatus.SAPINQDT = newInqSecond.INQDATETM;
                        addInqStatus.CREATEDATE = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                        addInqStatus.ISTATUS = "Inquiry Created";
                        addInqStatus.PAID_STATUS = "";
                        Helper.oDataHelper.AddEnquiryStatus(addInqStatus);
                        #endregion

                        // FOR HOUSE TYPE
                        #region House Type Save
                        //string Patner = Helper.RegistrationHelper.SetActualBP(EnquiryNo);

                        //DomesticAdditionData additionaldata = new DomesticAdditionData();
                        //additionaldata.Partner = Patner;
                        //additionaldata.Number = HouseTypeId;
                        //additionaldata.Value = HouseTypeValue;
                        //additionaldata.MsgFlag = "S";
                        //additionaldata.Message = "Data Saved Successfully";

                        //Helper.oDataHelper.SaveDomesticAdditionalData(additionaldata);

                        #endregion

                        // SAVE INQUIRY STATUS 
                        #region SAVE Inquiry Status
                        string Patner = Helper.RegistrationHelper.SetActualBP(EnquiryNo);
                        Models.InquiryStatusSet InquiryStatusSet = new InquiryStatusSet();
                        InquiryStatusSet.InquiryNo = EnquiryNo;
                        InquiryStatusSet.InquiryDate = DateTime.Now.ToString("yyyyMMdd");
                        InquiryStatusSet.ProspectNo = Patner;
                        InquiryStatusSet.ProspectDate = DateTime.Now.ToString("yyyyMMdd");
                        InquiryStatusSet.ActualbpNo = "";
                        InquiryStatusSet.ContractAcc = "";
                        InquiryStatusSet.ActualbpDate = "00000000";
                        InquiryStatusSet.UserID = "";
                        InquiryStatusSet.DocumentUpload = "00000000";
                        InquiryStatusSet.DocumentApproved = "00000000";
                        InquiryStatusSet.AdditionalData = "00000000";
                        InquiryStatusSet.SchemeName = "";
                        InquiryStatusSet.Amount = "";
                        InquiryStatusSet.Payment = "00000000";
                        InquiryStatusSet.InstallationDate = "00000000";
                        InquiryStatusSet.ConnectionDate = "00000000";
                        InquiryStatusSet.Feedback = "00000000";
                        InquiryStatusSet.REMARKDATE = "00000000";
                        InquiryStatusSet.REMARK = "";
                        Helper.oDataHelper.InquiryStatusSetSave(InquiryStatusSet);
                        #endregion

                        string smsMessage = "Your inquiry number is " + EnquiryNo + ". Thank you for showing interest in Adani Gas.";
                        Helper.DropDownHelper.SendSMS(NewInq.Mob_number, "INQ", EnquiryNo);

                        ViewBag.Message = sMessage;
                        Session["EnquiryMessage"] = sMessage;
                        string redirectUrl = GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated);
                        return Redirect(redirectUrl);/*RedirectToAction("Login", "AdaniGas", new { @sMessage = sMessage });*/
                    }
                    else
                    {
                        ViewBag.Message = sMessage;
                        LoadMaster();
                        return View(NewInq);
                    }
                }
            }
            else ModelState.AddModelError("OTP", "Invalid OTP");
            LoadMaster();
            return View(NewInq);
        }


        [HttpGet]
        public ActionResult CheckInquiryForERegistration(string EnquiryNo)
        {
            var enquiry = Helper.RegistrationHelper.GetEnquiry(EnquiryNo);
            if (enquiry.NAME_FIRST == null || enquiry.NAME_FIRST == "")
            {
                Session["EnquiryMessage"] = "Invalid Enquiry No.";
                return Redirect(GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated));
            }


            if (enquiry.BPKIND == "9005")
            {
                Session["EnquiryMessage"] = "CNG";
                Session["InquiryNo"] = "EnquiryNo";
                Session["CustomerName"] = enquiry.NAME_FIRST + " " + enquiry.NAME_LAST;
                string redirectUrl = GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated);
                return Redirect(redirectUrl);
            }

            var currentStatus = Helper.oDataHelper.GetEnquiryStatus(EnquiryNo);
            var IsPaid = Helper.oDataHelper.IsPaidEnquiryStatus(EnquiryNo);

            Session["EnquiryNo"] = EnquiryNo;
            if (IsPaid)
            {
                if (currentStatus == "Document Uploaded")
                    return RedirectToAction("InstallationInProgress", "AdaniGas", new { @EnquiryNo = EnquiryNo });
                else if (currentStatus == "Document Rejected")
                    return RedirectToAction("DocumentVerification", "AdaniGas", new { @EnquiryNo = EnquiryNo });
                else if (currentStatus == "Document Approved")
                    return RedirectToAction("InstallationInProgress", "AdaniGas", new { @EnquiryNo = EnquiryNo });
                else if (currentStatus == "Installation Completed")
                    return RedirectToAction("ConnectionComepleted", "AdaniGas", new { @EnquiryNo = EnquiryNo });
                else if (currentStatus == "Connection Completed")
                    return RedirectToAction("Feedback", "AdaniGas", new { @EnquiryNo = EnquiryNo });
                else if (currentStatus == "Application Rejected")
                    return RedirectToAction("Login", "AdaniGas", new { @sMessage = "Your Application against inquiry No " + EnquiryNo + " is Rejected" });
            }
            else
            {
                if (currentStatus == "Document Uploaded")
                    return RedirectToAction("GetSchemes", "AdaniGas", new { @EnquiryNo = EnquiryNo });
                else if (currentStatus == "Document Rejected")
                    return RedirectToAction("DocumentVerification", "AdaniGas", new { @EnquiryNo = EnquiryNo });
                else if (currentStatus == "Document Approved")
                    return RedirectToAction("GetSchemes", "AdaniGas", new { @EnquiryNo = EnquiryNo });
                else if (currentStatus == "Installation Completed")
                    return RedirectToAction("InstallationInProgress", "AdaniGas", new { @EnquiryNo = EnquiryNo });
                else if (currentStatus == "Connection Completed")
                    return RedirectToAction("Feedback", "AdaniGas", new { @EnquiryNo = EnquiryNo });
                else if (currentStatus == "Application Rejected")
                    return RedirectToAction("Login", "AdaniGas", new { @sMessage = "Your Application against inquiry No " + EnquiryNo + " is Rejected" });
            }
            var NewInquiryCNGURL = this.UserProfileService.GetPageURL(Templates.AdaniGasPages.ERegistration);
            return this.Redirect(NewInquiryCNGURL);
        }

        [HttpGet]
        public ActionResult ERegistration(string EnquiryNo)
        {
            if (Session["EnquiryNo"] == null)
            {
                return Redirect(GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated));
            }
            EnquiryNo = Session["EnquiryNo"].ToString();
            var enquiry = Helper.RegistrationHelper.GetEnquiry(EnquiryNo);
            return View(enquiry);

        }

        [HttpGet]
        public ActionResult CreateUser(string UserName, string Password, string EnquiryNo, string CustomerNo, string Company, string Patner, string BathroomPints, string KitchenPoints, string HouseType)
        {
            Models.CreateUserSet CreateUser = new CreateUserSet();
            CreateUser.UserID = UserName;
            CreateUser.New_Password = Password;
            CreateUser.InquiryNo = EnquiryNo;
            CreateUser.Ev_Msg_Flag = "";
            CreateUser.Ev_Message = "";
            var enquiry = Helper.RegistrationHelper.CreateUser(CreateUser);

            if (string.IsNullOrEmpty(Patner))
                Patner = Helper.RegistrationHelper.SetActualBP(EnquiryNo);

            Models.AdditionDataSave AdditionalDataSave = Helper.oDataHelper.AdditionalDataGet(EnquiryNo);
            var isUpdate = false;
            if (AdditionalDataSave == null)
            {
                isUpdate = true;
                AdditionalDataSave = new AdditionDataSave();
            }

            AdditionalDataSave.SAPINQID = EnquiryNo;

            if (HouseType == "Builder")
            {
                AdditionalDataSave.BUILDER = "9023";
                AdditionalDataSave.BUILDERVALUE = "Builder";

                AdditionalDataSave.INDIVIDUAL = "";
                AdditionalDataSave.INDIVIDUALVALUE = "";

                AdditionalDataSave.BULK = "";
                AdditionalDataSave.BULKVALUE = "";
            }
            else if (HouseType == "Individual")
            {
                AdditionalDataSave.INDIVIDUAL = "9024";
                AdditionalDataSave.INDIVIDUALVALUE = "Individual";

                AdditionalDataSave.BUILDER = "";
                AdditionalDataSave.BUILDERVALUE = "";

                AdditionalDataSave.BULK = "";
                AdditionalDataSave.BULKVALUE = "";
            }
            else if (HouseType == "Bulk")
            {
                AdditionalDataSave.BULK = "9025";
                AdditionalDataSave.BULKVALUE = "Bulk";

                AdditionalDataSave.INDIVIDUAL = "";
                AdditionalDataSave.INDIVIDUALVALUE = "";

                AdditionalDataSave.BUILDER = "";
                AdditionalDataSave.BUILDERVALUE = "";
            }
            if (!string.IsNullOrEmpty(CustomerNo))
            {
                AdditionalDataSave.LPGCONSNO = "9020";
                AdditionalDataSave.LPGCONSVALUE = CustomerNo;

                //DomesticAdditionData additionaldata = new DomesticAdditionData();
                //additionaldata.Partner = Patner;
                //additionaldata.Number = "9020";
                //additionaldata.Value = CustomerNo;
                //additionaldata.MsgFlag = "S";
                //additionaldata.Message = "Data Saved Successfully";

                //Helper.oDataHelper.SaveDomesticAdditionalData(additionaldata);
            }
            else
            {
                AdditionalDataSave.LPGCONSNO = "";
                AdditionalDataSave.LPGCONSVALUE = "";
            }

            if (!string.IsNullOrEmpty(Company))
            {
                AdditionalDataSave.COMPANYNO = "9022";
                AdditionalDataSave.COMPANYVALUE = Company;

                //DomesticAdditionData additionaldata = new DomesticAdditionData();
                //additionaldata.Partner = Patner;
                //additionaldata.Number = "9022";
                //additionaldata.Value = Company;
                //additionaldata.MsgFlag = "S";
                //additionaldata.Message = "Data Saved Successfully";

                //Helper.oDataHelper.SaveDomesticAdditionalData(additionaldata);
            }
            else
            {
                AdditionalDataSave.COMPANYNO = "";
                AdditionalDataSave.COMPANYVALUE = "";
            }

            if (!string.IsNullOrEmpty(BathroomPints))
            {
                AdditionalDataSave.BATHROOMPOINT = "4000";
                AdditionalDataSave.BATHROOMPOINTVALUE = BathroomPints;
                //DomesticAdditionData additionaldata = new DomesticAdditionData();
                //additionaldata.Partner = Patner;
                //additionaldata.Number = "4000";
                //additionaldata.Value = BathroomPints;
                //additionaldata.MsgFlag = "S";
                //additionaldata.Message = "Data Saved Successfully";

                //Helper.oDataHelper.SaveDomesticAdditionalData(additionaldata);
            }
            else
            {
                AdditionalDataSave.BATHROOMPOINT = "";
                AdditionalDataSave.BATHROOMPOINTVALUE = "";
            }
            if (!string.IsNullOrEmpty(KitchenPoints))
            {
                AdditionalDataSave.KITCHENPOINT = "4001";
                AdditionalDataSave.KITCHENPOINTVALUE = KitchenPoints;

                //DomesticAdditionData additionaldata = new DomesticAdditionData();
                //additionaldata.Partner = Patner;
                //additionaldata.Number = "4001";
                //additionaldata.Value = KitchenPoints;
                //additionaldata.MsgFlag = "S";
                //additionaldata.Message = "Data Saved Successfully";

                //Helper.oDataHelper.SaveDomesticAdditionalData(additionaldata);
            }
            else
            {
                AdditionalDataSave.KITCHENPOINT = "";
                AdditionalDataSave.KITCHENPOINTVALUE = "";
            }


            AdditionalDataSave.REAMRK = "";
            AdditionalDataSave.CREATEDATE = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            if (isUpdate)
                Helper.oDataHelper.SaveAdditionalData(AdditionalDataSave);
            else
                Helper.oDataHelper.UpdateAdditionalData(AdditionalDataSave);
            return RedirectToAction("NewRegistrationDomesticSecond", "AdaniGas", new { @EnquiryNo = EnquiryNo, @CustomerNo = CustomerNo, @Company = Company, @BathroomPints = BathroomPints, @KitchenPoints = KitchenPoints, @HouseType = HouseType });
        }

        [HttpGet]
        public ActionResult RegistrationDetails(string EnquiryNo)
        {
            return View();
        }

        [HttpGet]
        public ActionResult VerifyUser(string username)
        {
            var verifyuserdata = Helper.RegistrationHelper.VerifyUser(username);
            return Json(verifyuserdata, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult VerifyPassword(string username, string password)
        {
            var verifyuserdata = Helper.RegistrationHelper.VerifyPassword(username, password);
            return Json(verifyuserdata, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult NewRegistrationDomesticSecond(string EnquiryNo, string CustomerNo, string Company, string BathroomPints, string KitchenPoints, string HouseType)
        {
            TempData["CustomerNo"] = CustomerNo;
            TempData["Company"] = Company;
            TempData["BathroomPints"] = BathroomPints;
            TempData["KitchenPoints"] = KitchenPoints;
            TempData["HouseType"] = HouseType;
            //var DomesticSecond = Helper.RegistrationHelper.GetEnquiry(EnquiryNo);
            Item item = Sitecore.Context.Database.GetItem(Sitecore.Data.ID.Parse("{B2C9A0DE-E439-498E-A798-465D86A83FFC}"));
            Session["EnquiryNo"] = EnquiryNo;
            var pathInfo = LinkManager.GetItemUrl(item, UrlOptions.DefaultOptions);
            return RedirectToRoute(MvcSettings.SitecoreRouteName, new { pathInfo = pathInfo.TrimStart(new char[] { '/' }) });//View("/",DomesticSecond);
        }

        public ActionResult NewRegistrationDomesticSecondPage()
        {
            if (Session["EnquiryNo"] == null)
            {
                return Redirect(GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated));
            }
            ViewBag.CustomerNo = TempData["CustomerNo"];
            ViewBag.Company = TempData["Company"];
            ViewBag.BathroomPints = TempData["BathroomPints"];
            ViewBag.KitchenPoints = TempData["KitchenPoints"];
            ViewBag.HouseType = TempData["HouseType"];
            var EnquiryNo = (string)Session["EnquiryNo"];
            var DomesticSecond = Helper.RegistrationHelper.GetEnquiry(EnquiryNo);
            return View(DomesticSecond);

        }

        [HttpGet]
        public ActionResult DocumentUpload(string EnquiryNo)
        {
            Item item = Sitecore.Context.Database.GetItem(Sitecore.Data.ID.Parse("{5B9AC2CC-5D4E-4AAD-9E02-2DFC40403BC4}"));
            Session["EnquiryNo"] = EnquiryNo;
            var pathInfo = LinkManager.GetItemUrl(item, UrlOptions.DefaultOptions);
            return RedirectToRoute(MvcSettings.SitecoreRouteName, new { pathInfo = pathInfo.TrimStart(new char[] { '/' }) });
        }

        public ActionResult DocumentUploadPage()
        {
            if (Session["EnquiryNo"] == null)
            {
                return Redirect(GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated));
            }
            var EnquiryNo = (string)Session["EnquiryNo"];
            ViewBag.EnquiryNo = EnquiryNo;
            var DocumentList = Helper.RegistrationHelper.GetDocumentList().Where(p => p.Catagory == "DOMESTIC");
            var DomesticSecond = Helper.RegistrationHelper.GetEnquiry(EnquiryNo);
            ViewBag.DocumentList = DocumentList;
            return View(DomesticSecond);
        }

        [HttpGet]
        public ActionResult DownloadFile(string FilePath, string FileName)
        {
            byte[] fileBytes = System.IO.File.ReadAllBytes(FilePath);

            var extension = Path.GetExtension(FilePath);

            return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, FileName + extension);
        }

        public ActionResult SaveDocuments(string EnquiryNo)
        {
            var enquirydetails = Helper.RegistrationHelper.GetEnquiry(EnquiryNo);
            var DocumentList = Helper.RegistrationHelper.GetNewDocumentList();

            Models.DocumentUpload documentupload = new DocumentUpload();
            documentupload.SAPINQID = EnquiryNo;
            documentupload.SAPTRANSID = EnquiryNo;
            documentupload.AVLFLAG = "TRUE";
            documentupload.STATUS = "Pending";
            documentupload.FSOID = enquirydetails.AGNAM;
            documentupload.PAIDFLAG = "";
            documentupload.UPLOADFLAG = "TRUE";
            documentupload.CREATEDATE = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            documentupload.SAPINQDT = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");


            documentupload.sap_inq_attch = new List<sap_inq_attch>();
            int rowId = 1;
            foreach (var item in DocumentList)
            {
                Models.sap_inq_attch doc = new sap_inq_attch();
                var filename = Request.Form[item + "_FilePath"];
                var docNo = Request.Form[item + "_DocNo"];
                var docType = Request.Form[item + "_DocType"];

                if (!string.IsNullOrEmpty(docType))
                {
                    var fileextension = "";
                    var filepath = "";
                    if (filename != "#")
                    {
                        fileextension = Path.GetExtension(filename).Replace('.', ' ').Trim();
                        filepath = Helper.RegistrationHelper.InvokeService(filename, EnquiryNo, item, fileextension);
                    }

                    doc.ROWID = rowId.ToString();
                    doc.DocType = item;
                    doc.DocName = item;
                    doc.FILENAME = docNo;
                    doc.Documnet = filepath;
                    doc.FileExt = fileextension;
                    doc.SAPINQID = EnquiryNo;
                    doc.CREATEDATE = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

                    documentupload.sap_inq_attch.Add(doc);
                    rowId++;
                }
            }

            Helper.RegistrationHelper.SaveInqDocuments(documentupload);


            //CREATE NEW TASK FOR DOCUMENT VERIFICATION
            var enquirydetailSecond = Helper.oDataHelper.SecondEnquiryDetails(EnquiryNo);
            enquirydetailSecond.INQID = 0;
            enquirydetailSecond.TASKID = 1;
            enquirydetailSecond.TASKNAME = "Document Verification";
            enquirydetailSecond.INQTYPE = "DV";
            Helper.oDataHelper.SaveEnquirySecond(enquirydetailSecond);

            // FOR STATUS UPDATE
            Models.AddInqStatus addInqStatus = new AddInqStatus();
            addInqStatus.SAPINQID = EnquiryNo;
            addInqStatus.SAPINQDT = enquirydetailSecond.INQDATETM;
            addInqStatus.CREATEDATE = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            addInqStatus.ISTATUS = "Document Uploaded";
            addInqStatus.PAID_STATUS = "";
            Helper.oDataHelper.AddEnquiryStatus(addInqStatus);

            var enquirydetailSecond1 = Helper.oDataHelper.SecondEnquiryDetails(EnquiryNo);

            return RedirectToAction("GetSchemes", "AdaniGas", new { EnquiryNo = EnquiryNo });
        }


        public JsonResult GetFormData(HttpPostedFileBase File1)
        {
            if (File1 != null)
            {
                var extension = Path.GetExtension(File1.FileName);

                var path = Server.MapPath(Helper.ConfigurationHelper.UploadFileLocalPath + "/" + Guid.NewGuid().ToString() + extension);
                File1.SaveAs(path);

                return Json(path);
            }
            else return Json("#");
        }

        public ActionResult ViewDocument(string FilePath, string FileName)
        {
            var extension = Path.GetExtension(FilePath);
            return File(new FileStream(FilePath, FileMode.Open), "content-dispostion", FileName + extension);
        }

        public ActionResult Schemes(string EnquiryNo)
        {
            var DomesticSecond = Helper.RegistrationHelper.GetEnquiry(EnquiryNo);
            return View(DomesticSecond);
        }

        [HttpGet]
        public ActionResult GetSchemes(string EnquiryNo)
        {
            Item item = Sitecore.Context.Database.GetItem(Sitecore.Data.ID.Parse("{D482F39E-4EF8-4CC6-AE25-77BCA3D1A0EE}"));
            var pathInfo = LinkManager.GetItemUrl(item, UrlOptions.DefaultOptions);
            return RedirectToRoute(MvcSettings.SitecoreRouteName, new { pathInfo = pathInfo.TrimStart(new char[] { '/' }), EnquiryNo = EnquiryNo });
            //return View(DomesticSecond);
        }
        public ActionResult GetSchemesPage(string EnquiryNo)
        {
            var Schemedata = Helper.RegistrationHelper.GetSchemes();
            ViewBag.SchemeList = Schemedata;
            ViewBag.EnquiryNo = EnquiryNo;
            var DomesticSecond = Helper.RegistrationHelper.GetEnquiry(EnquiryNo);
            return View(DomesticSecond);
        }

        [HttpPost]
        public ActionResult GetSchemes(string EnquiryNo, string OutstandingAmountPost, string FName, string Email, string txnid, string SchemeId, string PaymentOption)
        {
            txnid = DateTime.Now.ToString("yyyyddMMHHmmss");
            Email = "-";
            var Patner = Helper.RegistrationHelper.SetActualBP(EnquiryNo);
            OutstandingAmountPost = OutstandingAmountPost + ".00";
            var actualBpDetails = Helper.RegistrationHelper.GetActualBP(SchemeId, Patner);
            var ActualBpNo = actualBpDetails.ActualBpNo;

            // FOR UPDATE INQUIRY STATUS
            #region UPDATE INQUIRY STATUS
            var InquiryStatus = Helper.oDataHelper.InquiryStatusSetGet(EnquiryNo);
            InquiryStatus.ActualbpNo = ActualBpNo;
            InquiryStatus.ContractAcc = actualBpDetails.ContractAcc;
            InquiryStatus.ActualbpDate = DateTime.Now.ToString("yyyyMMdd");
            InquiryStatus.SchemeName = SchemeId;
            InquiryStatus.Amount = OutstandingAmountPost;
            Helper.oDataHelper.InquiryStatusSetSave(InquiryStatus);
            #endregion

            Session["EnquiryNo"] = EnquiryNo;
            Session["ContractAccNo"] = actualBpDetails.ContractAcc;
            if (PaymentOption == "PayuMoney")
            {
                var PaymentData = Helper.RegistrationHelper.InvokePaymentScheme(EnquiryNo, FName, Email, txnid, OutstandingAmountPost, ActualBpNo);
                ViewBag.PaymentDataList = PaymentData;
                return RedirectToAction("Payment", "AdaniGas", new { HashValue = PaymentData, FName = FName, Email = Email, txnid = txnid, OutstandingAmountPost = OutstandingAmountPost, ActualBpNo = ActualBpNo });
            }
            else if (PaymentOption == "BillDesk")
            {
                return RedirectToAction("BillDesk", "AdaniGas", new { OutstandingAmountPost = OutstandingAmountPost });
            }
            else
            {
                Session["EnquiryNo"] = EnquiryNo;
                return RedirectToAction("PayTMRequest", "AdaniGas", new { OutstandingAmountPost = OutstandingAmountPost });
            }
        }

        public ActionResult Payment(string HashValue, string FName, string Email, string txnid, string OutstandingAmountPost, string ActualBpNo)
        {
            ViewBag.HashValue = HashValue.ToLower();
            ViewBag.FName = FName;
            ViewBag.Email = Email;
            ViewBag.txnid = txnid;
            ViewBag.OutstandingAmountPost = OutstandingAmountPost;
            ViewBag.ActualBpNo = ActualBpNo;

            return View("/Views/AdaniGas/PaymentPage.cshtml");
        }

        [HttpPost]
        public ActionResult PaymentSuccess()
        {
            TempData["payStatus"] = Request["STATUS"] != null ? Request["STATUS"].ToString() : "";
            if (Session["EnquiryNo"] != null)
            {
                //return View(DomesticSecond);
                Item item = Sitecore.Context.Database.GetItem(Sitecore.Data.ID.Parse("{F415DE8A-2640-48E8-A890-80A067CD0256}"));
                var pathInfo = LinkManager.GetItemUrl(item, UrlOptions.DefaultOptions);
                return RedirectToRoute(MvcSettings.SitecoreRouteName, new { pathInfo = pathInfo.TrimStart(new char[] { '/' }) });
            }
            return Redirect(GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated));
        }

        public ActionResult PaymentSuccessPage()
        {

            if (Session["EnquiryNo"] != null)
            {
                ViewBag.payStatus = TempData["payStatus"];
                var EnquiryNo = Session["EnquiryNo"] != null ? Session["EnquiryNo"].ToString() : "";

                var enquirydetailSecond = Helper.oDataHelper.SecondEnquiryDetails(EnquiryNo);
                Models.AddInqStatus addInqStatus = new AddInqStatus();
                addInqStatus.SAPINQID = EnquiryNo;
                addInqStatus.SAPINQDT = enquirydetailSecond.INQDATETM;
                addInqStatus.CREATEDATE = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                addInqStatus.ISTATUS = "Document Uploaded";
                addInqStatus.PAID_STATUS = "PAID";
                Helper.oDataHelper.AddEnquiryStatus(addInqStatus);

                // FOR UPDATE INQUIRY STATUS
                #region UPDATE INQUIRY STATUS
                //var InquiryStatus = Helper.oDataHelper.InquiryStatusSetGet(EnquiryNo);
                var UpdatePaymentStatus = new Models.UpdatePaymentStatus();
                UpdatePaymentStatus.InquiryNo = EnquiryNo;
                UpdatePaymentStatus.Payment = "X";
                Helper.oDataHelper.UpdatePaymentStatus(UpdatePaymentStatus);
                #endregion

                var DomesticSecond = Helper.RegistrationHelper.GetEnquiry(EnquiryNo);
                string ContractAccNo = Session["ContractAccNo"] != null ? Session["ContractAccNo"].ToString() : "";

                if (ContractAccNo.StartsWith("00"))
                    ContractAccNo = ContractAccNo.Remove(0, 2);
                string sMessage = "Welcome to Adani Gas Family. Your Customer ID is " + ContractAccNo + " Keep this with you for future reference. Thank you for showing interest in Adani Gas.";
                Helper.DropDownHelper.SendSMS(DomesticSecond.MOBILE, sMessage);

                ViewBag.CustomerNo = ContractAccNo;

                return View(DomesticSecond);
            }

            return Redirect(GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated));
        }

        [HttpPost]
        public ActionResult PaymentFail()
        {
            if (Session["EnquiryNo"] != null)
            {
                var EnquiryNo = Session["EnquiryNo"].ToString();
                var DomesticSecond = Helper.RegistrationHelper.GetEnquiry(EnquiryNo);
                return View(DomesticSecond);
            }
            return Redirect(GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated));
        }

        [HttpGet]
        public ActionResult Feedback(string EnquiryNo)
        {
            var DomesticSecond = Helper.RegistrationHelper.GetEnquiry(EnquiryNo);
            return View(DomesticSecond);
        }

        [HttpGet]
        public ActionResult DocumentVerification(string EnquiryNo = "")
        {
            Item item = Sitecore.Context.Database.GetItem(Sitecore.Data.ID.Parse("{59C7593B-F449-440B-A09B-F11F3B756722}"));
            Session["EnquiryNo"] = EnquiryNo;
            var pathInfo = LinkManager.GetItemUrl(item, UrlOptions.DefaultOptions);
            return RedirectToRoute(MvcSettings.SitecoreRouteName, new { pathInfo = pathInfo.TrimStart(new char[] { '/' }) });
        }

        public ActionResult DocumentVerificationPage()
        {
            if (Session["EnquiryNo"] == null)
            {
                return Redirect(GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated));
            }
            var EnquiryNo = (string)Session["EnquiryNo"];
            ViewBag.EnquiryNo = EnquiryNo;
            ViewBag.UploadedDocuments = Helper.oDataHelper.GetUploadedDocuments(EnquiryNo);
            var DomesticSecond = Helper.RegistrationHelper.GetEnquiry(EnquiryNo);
            return View(DomesticSecond);
        }

        [HttpPost]
        public ActionResult VerifyDocuments(string EnquiryNo)
        {
            var UploadedDocuments = Helper.oDataHelper.GetUploadedDocuments(EnquiryNo);
            var DocumentList = Helper.RegistrationHelper.GetNewDocumentList().ToList();

            var enquirydetailSecond = Helper.oDataHelper.SecondEnquiryDetails(EnquiryNo);

            // DELETE REJECTED DOCUMENTS

            foreach (var item in UploadedDocuments.Where(p => p.DocStatus.ToLower().Equals("rejected")).ToList())
            {
                DeleteDocument deleteDocument = new DeleteDocument();
                deleteDocument.ROWID = item.ROWID;
                deleteDocument.INQID = enquirydetailSecond.INQID;
                deleteDocument.SAPINQID = EnquiryNo;
                deleteDocument.UPDATEFLAG = "D";

                Helper.RegistrationHelper.DeleteDocument(deleteDocument);
            }

            int rowId = 1;
            bool isSave = false;
            foreach (var item in DocumentList)
            {
                Models.AddDocumentInExistingEnquiry doc = new AddDocumentInExistingEnquiry();
                var filename = Request.Form[item + "_FilePath"];
                var docNo = Request.Form[item + "_DocNo"];
                var docType = Request.Form[item + "_DocType"];

                if (!string.IsNullOrEmpty(docType))
                {
                    isSave = true;
                    var fileextension = "";
                    var filepath = "";
                    if (filename != "#")
                    {
                        fileextension = Path.GetExtension(filename).Replace('.', ' ').Trim();
                        filepath = Helper.RegistrationHelper.InvokeService(filename, EnquiryNo, item, fileextension);
                    }

                    doc.ROWID = rowId;
                    doc.DocType = item;
                    doc.DocName = item;
                    doc.FILENAME = docNo;
                    doc.Documnet = filepath;
                    doc.FileExt = fileextension;
                    doc.SAPINQID = EnquiryNo;
                    doc.INQID = enquirydetailSecond.INQID;
                    doc.CREATEDATE = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                    doc.UPDATEFLAG = "A";
                    doc.DocStatus = "Pending";
                    doc.Remark = "";
                    doc.DocNum = "";
                    doc.ExpDate = DateTime.Now.AddYears(5).ToString("yyyy-MM-dd HH:mm:ss");

                    Helper.RegistrationHelper.AddDocumentsInExistingEnquiry(doc);
                    rowId++;
                }
            }

            if (isSave)
            {
                Models.AddInqStatus addInqStatus = new AddInqStatus();
                addInqStatus.SAPINQID = EnquiryNo;
                addInqStatus.SAPINQDT = enquirydetailSecond.INQDATETM;
                addInqStatus.CREATEDATE = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                addInqStatus.ISTATUS = "Document Uploaded";
                addInqStatus.PAID_STATUS = "";
                Helper.oDataHelper.AddEnquiryStatus(addInqStatus);
            }

            if (Helper.oDataHelper.IsPaidEnquiryStatus(EnquiryNo))
                return RedirectToAction("InstallationInProgress", "AdaniGas", new { EnquiryNo = EnquiryNo });
            else
                return RedirectToAction("GetSchemes", "AdaniGas", new { EnquiryNo = EnquiryNo });
        }

        public ActionResult InstallationInProgress(string EnquiryNo)
        {
            Item item = Sitecore.Context.Database.GetItem(Sitecore.Data.ID.Parse("{BC8BB6A5-A6AD-4554-A454-B5A1535F3F16}"));
            Session["EnquiryNo"] = EnquiryNo;
            var pathInfo = LinkManager.GetItemUrl(item, UrlOptions.DefaultOptions);
            return RedirectToRoute(MvcSettings.SitecoreRouteName, new { pathInfo = pathInfo.TrimStart(new char[] { '/' }) });
        }
        public ActionResult InstallationInProgressPage()
        {
            if (Session["EnquiryNo"] == null)
            {
                return Redirect(GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated));
            }
            var EnquiryNo = (string)Session["EnquiryNo"];
            var DomesticSecond = Helper.RegistrationHelper.GetEnquiry(EnquiryNo);
            return View(DomesticSecond);
        }

        public ActionResult ConnectionComepleted(string EnquiryNo)
        {
            ViewBag.EnquiryNo = EnquiryNo;
            var DomesticSecond = Helper.RegistrationHelper.GetEnquiry(EnquiryNo);
            return View(DomesticSecond);
        }


        [HttpGet]
        public ActionResult PaymentPaytm(string HashValue, string FName, string txnid, string OutstandingAmountPost)
        {
            ViewBag.HashValue = HashValue.ToLower();
            ViewBag.txnid = txnid;
            ViewBag.ORDER_ID = DateTime.Now.TimeOfDay.ToString();
            ViewBag.CUST_ID = FName;
            ViewBag.TXN_AMOUNT = OutstandingAmountPost;
            return View();
        }
        public ActionResult PayTMRequest()
        {
            return View();
        }

        [HttpGet]
        public ActionResult BillDesk(string OutStandingAmount)
        {
            var hashkey = Helper.RegistrationHelper.BillDeskCheckSum();
            return View();
        }

        [HttpGet]
        public ActionResult PayTMRequest(string OutstandingAmountPost)
        {
            //string marchantkey = "KCwHt6rVV46ol#73";
            Dictionary<String, String> paytmParams = new Dictionary<String, String>();
            paytmParams.Add("MID", "ADANIA30158054352006");
            paytmParams.Add("CHANNEL_ID", "WEB");
            paytmParams.Add("WEBSITE", "WEBSTAGING");
            paytmParams.Add("CUST_ID", (string)Session["EnquiryNo"]);
            paytmParams.Add("MOBILE_NO", "");
            paytmParams.Add("EMAIL", "");
            paytmParams.Add("MERC_UNQ_REF", (string)Session["EnquiryNo"]);
            paytmParams.Add("ORDER_ID", DateTime.Now.ToString("yyyyMMddhhmmss"));
            paytmParams.Add("INDUSTRY_TYPE_ID", "Retail");
            paytmParams.Add("TXN_AMOUNT", OutstandingAmountPost);
            paytmParams.Add("CALLBACK_URL", "http://adanigas.dev.local/api/Sitecore/AdaniGas/paytmResponse");
            string paytmChecksum = paytm.CheckSum.generateCheckSum("KCwHt6rVV46ol#73", paytmParams);
            string transactionURL = "https://securegw-stage.paytm.in/theia/processTransaction";

            try
            {
                string outputHTML = "<html>";
                outputHTML += ("<head>");
                outputHTML += ("<title>Merchant Checkout Page</title>");
                outputHTML += ("</head>");
                outputHTML += ("<body>");
                outputHTML += "<center><h1>Please do not refresh this page...</h1></center>";
                outputHTML += "<form method='post' action='" + transactionURL + "' name='f1'>";
                outputHTML += "<table border='1'>";
                outputHTML += "<tbody>";
                foreach (string key in paytmParams.Keys)
                {
                    outputHTML += "<input type='hidden' name='" + key + "' value='" + paytmParams[key] + "'>'";
                }
                outputHTML += "<input type='hidden' name='CHECKSUMHASH' value='" + paytmChecksum + "'>";
                outputHTML += "</tbody>";
                outputHTML += "</table>";
                outputHTML += "<script type='text/javascript'>";
                outputHTML += "document.f1.submit();";
                outputHTML += "</script>";
                outputHTML += "</form>";
                outputHTML += "</body>";
                outputHTML += "</html>";

                ViewBag.list = outputHTML;
                return View("PaymentPagePayTm");
            }
            catch (Exception ex)
            {
                Response.Write("Exception message: " + ex.Message.ToString());
            }
            return View();

        }

        [HttpPost]
        public ActionResult paytmResponse(PaytmResponse response)
        {
            String merchantKey = "KCwHt6rVV46ol#73"; // Replace the with the Merchant Key provided by Paytm at the time of registration.

            Dictionary<string, string> parameters = new Dictionary<string, string>();
            string paytmChecksum = "";
            foreach (string key in Request.Form.Keys)
            {
                parameters.Add(key.Trim(), Request.Form[key].Trim());
            }

            if (parameters.ContainsKey("CHECKSUMHASH"))
            {
                paytmChecksum = parameters["CHECKSUMHASH"];
                parameters.Remove("CHECKSUMHASH");
            }

            if (CheckSum.verifyCheckSum(merchantKey, parameters, paytmChecksum))
            {
                Session["EnquiryNo"] = parameters["MERC_UNQ_REF"];
                TempData["payStatus"] = Request["STATUS"] != null ? Request["STATUS"].ToString() : "";
                Item item = Sitecore.Context.Database.GetItem(Sitecore.Data.ID.Parse("{F415DE8A-2640-48E8-A890-80A067CD0256}"));
                var pathInfo = LinkManager.GetItemUrl(item, UrlOptions.DefaultOptions);
                return RedirectToRoute(MvcSettings.SitecoreRouteName, new { pathInfo = pathInfo.TrimStart(new char[] { '/' }) });
            }
            else
            {
                var EnqNo = Session["EnquiryNo"];
                Session["EnquiryMessage"] = "Your Payment againt Enquiry No: " + EnqNo + " is Failed.";
                return Redirect(GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.Unauthenticated));
            }
        }

        [HttpGet]
        public ActionResult NewInquiryCNG()
        {
            NewInquiryCNG NewInqCNG = new Models.NewInquiryCNG();
            NewInqCNG.VehicleCatagory = "New";
            LoadMasterCNG();
            return View(NewInqCNG);
        }

        [HttpGet]
        public ActionResult GetVehicleMake(string VehicleType)
        {
            var regiondata = Helper.oDataHelper.GetVehicleMake(VehicleType).Distinct().OrderBy(o => o.ID);
            return Json(regiondata, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult GetVehicleModel(string VehicleType = "", string VehicleMake = "")
        {
            var regiondata = Helper.oDataHelper.GetVehicleModel(VehicleType, VehicleMake).Distinct().OrderBy(o => o.Vehical_Type1);
            return Json(regiondata, JsonRequestBehavior.AllowGet);
        }

        public void LoadMasterCNG(string selectedvehicleType = "", string selectedVehicleMake = "")
        {
            var CityRegion = Helper.DropDownHelper.GetCityRegion();
            var City = CityRegion.Select(s => new { s.CityName, s.CityId }).Distinct().OrderBy(o => o.CityName);
            ViewBag.City = City;

            var Region = CityRegion.Where(p => p.CityId == CityRegion.FirstOrDefault().CityId).Select(s => new { s.RegionName, RegionId = s.RegionId + "$" + s.PlantId, s.PlantId }).Distinct().OrderBy(o => o.RegionName);
            ViewBag.Region = Region;

            ViewBag.City1 = City.FirstOrDefault().CityName;
            ViewBag.GroupDesc = Region.FirstOrDefault().RegionName;

            ViewBag.VehicleType = Helper.oDataHelper.GetVehicleType().Select(s => new { s.Vehical_Type1, s.ID }).Distinct().ToList();
            if (selectedvehicleType == "")
                ViewBag.VehicleMake = new List<VehicleType>();
            else
                ViewBag.VehicleMake = Helper.oDataHelper.GetVehicleMake(selectedvehicleType).Select(s => new { s.Vehical_Type1, s.ID }).Distinct().ToList();
            if (selectedVehicleMake == "")
                ViewBag.VehicleModel = new List<VehicleType>();
            else
                ViewBag.VehicleModel = Helper.oDataHelper.GetVehicleModel(selectedvehicleType, selectedVehicleMake).Select(s => new { s.Vehical_Type1, s.ID }).Distinct().ToList();
        }

        //[HttpGet]
        //public ActionResult GetCNGInquiryStatus(string InquiryNo)
        //{
        //    var regiondata = Helper.oDataHelper.InquiryStatusSetGet(InquiryNo);
        //    return Json(regiondata, JsonRequestBehavior.AllowGet);
        //}

        #endregion

        #region AdaniGAS CNG Registration

        AdaniGasDBservice adaniGasDBservice = new AdaniGasDBservice();
        public ActionResult CNGcustomerRegistration()
        {
            AdaniGasCNG_CustomerRegistration model = new AdaniGasCNG_CustomerRegistration();
            //var Type = Sitecore.Mvc.Presentation.RenderingContext.Current.Rendering.Parameters["Type"] ?? "";
            Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");
            Data.Items.Item StateList = db.GetItem(Templates.CNGcustomerRegistration.Datasource.States);
            model.StateList = StateList.GetChildren().ToList().Select(x => new TextValueItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            //Data.Items.Item CityList = db.GetItem(Templates.CNGcustomerRegistration.Datasource.Cities);
            //model.CityList = CityList.GetChildren().ToList().Select(x => new SelectListItem()
            //{
            //    Text = x.Fields["Text"].Value,
            //    Value = x.Fields["Value"].Value
            //}).ToList();
            Data.Items.Item VehicleTypeList = db.GetItem(Templates.CNGcustomerRegistration.Datasource.VehicleTypes);
            model.VehicleTypeList = VehicleTypeList.GetChildren().ToList().Select(x => new TextValueItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            Data.Items.Item YearList = db.GetItem(Templates.CNGcustomerRegistration.Datasource.Years);
            model.YearList = YearList.GetChildren().ToList().Select(x => new TextValueItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            return this.View(model);
        }
        [HttpPost]
        public ActionResult CNGcustomerRegistration(AdaniGasCNG_CustomerRegistration model, string SubmitBtn, string ValidateOTP)
        {
            Database db = Sitecore.Configuration.Factory.GetDatabase("web");
            Data.Items.Item StateList = db.GetItem(Templates.CNGcustomerRegistration.Datasource.States);
            model.StateList = StateList.GetChildren().ToList().Select(x => new TextValueItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();

            Data.Items.Item VehicleTypeList = db.GetItem(Templates.CNGcustomerRegistration.Datasource.VehicleTypes);
            model.VehicleTypeList = VehicleTypeList.GetChildren().ToList().Select(x => new TextValueItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            Data.Items.Item YearList = db.GetItem(Templates.CNGcustomerRegistration.Datasource.Years);
            model.YearList = YearList.GetChildren().ToList().Select(x => new TextValueItem()
            {
                Text = x.Fields["Text"].Value,
                Value = x.Fields["Value"].Value
            }).ToList();
            if (!string.IsNullOrEmpty(model.CurrentCity) && !string.IsNullOrEmpty(model.CurrentState))
            {
                foreach (Item eachstate in StateList.GetChildren())
                {
                    if (eachstate.Fields["value"].Value == model.CurrentState)
                    {
                        model.CityList = eachstate.GetChildren().ToList().Select(x => new TextValueItem()
                        {
                            Text = x.Fields["Text"].Value,
                            Value = x.Fields["Value"].Value
                        }).ToList();
                    }
                }
            }
            if (!string.IsNullOrEmpty(model.RegisteredCity) && !string.IsNullOrEmpty(model.RegisteredState))
            {
                foreach (Item eachstate in StateList.GetChildren())
                {
                    if (eachstate.Fields["value"].Value == model.RegisteredState)
                    {
                        model.CityList = eachstate.GetChildren().ToList().Select(x => new TextValueItem()
                        {
                            Text = x.Fields["Text"].Value,
                            Value = x.Fields["Value"].Value
                        }).ToList();
                    }
                }
            }
            Data.Items.Item ThreeWVehicleCompany = db.GetItem(Templates.CNGcustomerRegistration.Datasource.ThreeW_VehicleCompanyModel);
            Data.Items.Item FourWVehicleCompany = db.GetItem(Templates.CNGcustomerRegistration.Datasource.FourW_VehicleCompanyModel);
            if (model.VehicleType == "3-Wheeler")
            {
                if (ThreeWVehicleCompany.HasChildren)
                {
                    model.VehicleCompanyList = ThreeWVehicleCompany.GetChildren().ToList().Select(x => new TextValueItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                }
            }
            if (model.VehicleType == "4-Wheeler")
            {
                if (FourWVehicleCompany.HasChildren)
                {
                    model.VehicleCompanyList = FourWVehicleCompany.GetChildren().ToList().Select(x => new TextValueItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                }
            }

            if (!string.IsNullOrEmpty(model.VehicleCompany) && !string.IsNullOrEmpty(model.VehicleModel))
            {
                Item VehicleComList = null;
                if (model.VehicleType == "3-Wheeler")
                {
                    VehicleComList = ThreeWVehicleCompany;
                }
                else
                {
                    VehicleComList = FourWVehicleCompany;
                }
                foreach (Item eachModel in VehicleComList.GetChildren())
                {
                    if (eachModel.Fields["value"].Value == model.RegisteredState)
                    {
                        model.VehicleModelList = eachModel.GetChildren().ToList().Select(x => new TextValueItem()
                        {
                            Text = x.Fields["Text"].Value,
                            Value = x.Fields["Value"].Value
                        }).ToList();
                    }
                }
            }
            bool Validated = false;
            Log.Info("Insert AdaniGas CNGcustomerRegistration", "Start");
            try
            {
                if (!string.IsNullOrEmpty(SubmitBtn) && SubmitBtn == "CNGRegSubmitBtn")
                {
                    try
                    {
                        Validated = this.IsReCaptchValid(model.Captcha);
                    }
                    catch (Exception ex)
                    {
                        Exception exception = ex;
                        Log.Info(string.Concat("AdaniGas CNGcustomerRegistration Failed to validate auto script : ", ex.ToString()), this);
                        return View(model);
                    }
                    if (!Validated)
                    {
                        if (!model.IsBSVI)
                        {
                            if (!ModelState.IsValid)
                            {
                                Log.Info("Failed to Submit AdaniGas CNGcustomerRegistration form as Invalid values entered", this);
                                return View(model);
                            }
                            AdaniGasNewConnectionServices services = new AdaniGasNewConnectionServices();
                            //AdadniGasDBModelDataContext dbContext = new AdadniGasDBModelDataContext();
                            //dbContext.CNG_CustomerRegistrations dbModel = new 
                            model.RegistrationNo = services.GetUniqueRegNo();
                            model.RegistrationNo = "CNG" + model.RegistrationNo;
                            adaniGasDBservice.StoreCNGcustomerRegistrationAdaniGas(model);
                            return View("CNGcustomerRegistrationThankyou", model);
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(model.VehicleType.Trim()) || string.IsNullOrEmpty(model.Year.Trim()) || string.IsNullOrEmpty(model.FirstName.Trim()) || string.IsNullOrEmpty(model.LastName.Trim()) || string.IsNullOrEmpty(model.Mobile.Trim()) || string.IsNullOrEmpty(model.OTP.Trim()))
                            {
                                var t = ModelState.IsValid;
                                Log.Info("Failed to Submit AdaniGas CNGcustomerRegistration form as Invalid values entered", this);
                                return View(model);
                            }
                            var FirstNameToValidate = ModelState["FirstName"];
                            if (FirstNameToValidate == null || //exclude if this could not happen or not to be counted as error
                                (FirstNameToValidate != null && FirstNameToValidate.Errors.Any())
                               )
                            {
                                return View(model);
                            }
                            var LastNameToValidate = ModelState["LastName"];
                            if (LastNameToValidate == null || //exclude if this could not happen or not to be counted as error
                                (LastNameToValidate != null && LastNameToValidate.Errors.Any())
                               )
                            {
                                return View(model);
                            }

                            AdaniGasNewConnectionServices services = new AdaniGasNewConnectionServices();
                            model.RegistrationNo = services.GetUniqueRegNo();
                            model.RegistrationNo = "CNG" + model.RegistrationNo;
                            adaniGasDBservice.StoreCNGcustomerRegistrationAdaniGas(model);
                            return View("CNGcustomerRegistrationThankyou", model);
                        }
                    }
                    else
                    {
                        ModelState.AddModelError(nameof(model.Captcha), DictionaryPhraseRepository.Current.Get("/Controller/Messages/CaptchaError", "Captcha is Invalid"));
                        return View(model);
                    }
                }
                else if (!string.IsNullOrEmpty(ValidateOTP) && ValidateOTP == "validateOTP")
                {
                    if (!string.IsNullOrEmpty(model.OTP.Trim()))
                    {
                        var OTPToValidate = ModelState["OTP"];
                        if (OTPToValidate == null || //exclude if this could not happen or not to be counted as error
                            (OTPToValidate != null && OTPToValidate.Errors.Any())
                           )
                        {
                            model.IsOTPValid = false;
                            ModelState.AddModelError(nameof(model.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTPerror", "Invalid OTP"));
                            return View(model);
                        }
                        var MobileToValidate = ModelState["Mobile"];
                        if (MobileToValidate == null || //exclude if this could not happen or not to be counted as error
                            (MobileToValidate != null && MobileToValidate.Errors.Any())
                           )
                        {
                            model.IsOTPValid = false;
                            ModelState.AddModelError(nameof(model.Mobile), DictionaryPhraseRepository.Current.Get("/Controller/Messages/MobileError", "Invalid Mobile No"));
                            return View(model);
                        }
                        var OTPvalidResp = objWebAPIAdaniGas.ValidateOtp(model.Mobile, model.OTP);
                        if (OTPvalidResp != null)
                        {
                            if (OTPvalidResp.Msg_Flag == "S")
                            {
                                model.IsOTPValid = true;
                                ModelState.Clear();
                                return View(model);
                            }
                            else if (OTPvalidResp.Msg_Flag == "F")
                            {
                                model.IsOTPValid = false;
                                ModelState.AddModelError(nameof(model.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTPerror", "Invalid OTP"));
                                return View(model);
                            }
                            else
                            {
                                model.ReturnViewMessage = DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTPvalidationError", "Error occured while validating OTP");
                                return View(model);
                            }
                        }
                        else
                        {
                            model.ReturnViewMessage = DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTPvalidfailed", "OTP validation failed");
                            return View(model);
                        }
                    }
                    else
                    {
                        ModelState.AddModelError(nameof(model.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTPerror", "Invalid OTP"));
                        return View(model);
                    }
                }
                else
                {
                    ModelState.Clear();
                    return View(model);
                }
            }
            catch (Exception ex)
            {
                Log.Error(string.Concat("Failed to Submit AdaniGas CNGcustomerRegistration Form : ", ex.ToString()), this);
                return View(model);
            }

        }
        public ActionResult GetCNGCity(string state)
        {
            List<SelectListItem> cityList = new List<SelectListItem>();
            Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");
            Data.Items.Item StateList = db.GetItem(Templates.CNGcustomerRegistration.Datasource.States);
            foreach (Item eachstate in StateList.GetChildren())
            {
                if (eachstate.Fields["value"].Value == state)
                {
                    cityList = eachstate.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                    return Json(cityList, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(cityList, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetCNGVehicleModel(string VehicleComp, string VehicleType)
        {
            List<SelectListItem> vehicleModelList = new List<SelectListItem>();
            Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");
            Data.Items.Item ThreeWVehicleCompany = db.GetItem(Templates.CNGcustomerRegistration.Datasource.ThreeW_VehicleCompanyModel);
            Data.Items.Item FourWVehicleCompany = db.GetItem(Templates.CNGcustomerRegistration.Datasource.FourW_VehicleCompanyModel);
            Item VehicleComList = null;
            if (VehicleType == "3-Wheeler")
            {
                VehicleComList = ThreeWVehicleCompany;
            }
            else
            {
                VehicleComList = FourWVehicleCompany;
            }
            foreach (Item eachModel in VehicleComList.GetChildren())
            {
                if (eachModel.Fields["value"].Value == VehicleComp)
                {
                    vehicleModelList = eachModel.GetChildren().ToList().Select(x => new SelectListItem()
                    {
                        Text = x.Fields["Text"].Value,
                        Value = x.Fields["Value"].Value
                    }).ToList();
                    return Json(vehicleModelList, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(vehicleModelList, JsonRequestBehavior.AllowGet);
        }

        public ActionResult CNGSendOTP(string mobile)
        {
            AdaniGasOTPModel model = new AdaniGasOTPModel();
            Log.Info("Adani Gas CNG Registration Send OTP Start:" + mobile, this);
            model.MobileNo = mobile;
            model.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");
            var OTPresponse = objWebAPIAdaniGas.SendOtp(model);
            return Json(OTPresponse, JsonRequestBehavior.AllowGet);
        }

        #region CNG Dealer Login
        #region Login


        private AdaniGasCNG_DealerLoginInfo CreateCNGDealerLoginInfo(string returnUrl = null)
        {
            return new AdaniGasCNG_DealerLoginInfo
            {
                ReturnUrl = returnUrl,
                //LoginButtons = this.FedAuthLoginRepository.GetAll()
            };
        }
        public ActionResult CNGDealerLogin(string returnUrl = null)
        {
            if (TempData["LoginModel"] != null)
            {
                SessionHelper.UserSession.CNGDealerUserSessionContext = null;
                AdaniGasCNG_DealerLoginInfo Rmodel = TempData["LoginModel"] as AdaniGasCNG_DealerLoginInfo;
                if (!string.IsNullOrEmpty(Rmodel.Message))
                {
                    ModelState.AddModelError(nameof(Rmodel.DealerId), Rmodel.Message);
                }
                return View(Rmodel);
            }
            AdaniGasCNG_DealerLoginInfo model = CreateCNGDealerLoginInfo(returnUrl);
            var currentVisiterIP = WebAPIAdaniGas.GetIPAddress();

            if (WebAPIAdaniGas.IsCNGDealerUserLoggedIn() && SessionHelper.UserSession.CNGDealerUserSessionContext != null && SessionHelper.UserSession.CNGDealerUserSessionContext.UserIP != null && currentVisiterIP != null && currentVisiterIP != SessionHelper.UserSession.CNGDealerUserSessionContext.UserIP)
            {
                model.DealerId = SessionHelper.UserSession.CNGDealerUserSessionContext.DealerId;
                model.MobileNo = SessionHelper.UserSession.CNGDealerUserSessionContext.MobileNo;
            }
            else
            {
                SessionHelper.UserSession.CNGDealerUserSessionContext = null;
                //Session.Clear();
                //Session.Abandon();
                //Session.RemoveAll();
                //if (Request.Cookies["AuthToken"] != null)
                //{
                //    Response.Cookies["AuthToken"].Value = string.Empty;
                //    Response.Cookies["AuthToken"].Expires = DateTime.Now.AddMonths(-20);
                //}
            }

            return View(model);
        }

        [HttpPost]
        //[ValidateModel]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        public ActionResult CNGDealerLogin(AdaniGasCNG_DealerLoginInfo model, string sendOTP, string signIn, string ResendOTP)
        {
            Log.Info("Insert AdaniHousingLogin", "Start");
            try
            {
                model.PageInfo = Request.RawUrl;
                if ((sendOTP != null && sendOTP == DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/sendOTP", "sendOTP")) || (ResendOTP != null && ResendOTP == DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/ResendOTP", "ResendOTP")))
                {
                    if (string.IsNullOrEmpty(model.DealerId))
                    {
                        this.ModelState.AddModelError(nameof(model.DealerId), DictionaryPhraseRepository.Current.Get("/Controller/Messages/EmptyDealerId", "Please enter Dealer Id"));
                        return this.View(model);
                    }
                    using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                    {
                        if (dbcontext.CNG_RegisteredDealerInfos.Any(a => a.DealerId == model.DealerId))
                        {
                            var DealerInfo = dbcontext.CNG_RegisteredDealerInfos.Where(a => a.DealerId == model.DealerId).FirstOrDefault();
                            AdaniGasOTPModel OTPmodel = new AdaniGasOTPModel();
                            Log.Info("Adani Gas CNG Dealer Login Send OTP Start:" + DealerInfo.DealerMobile, this);
                            OTPmodel.MobileNo = DealerInfo.DealerMobile;
                            OTPmodel.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");
                            var OTPresponse = objWebAPIAdaniGas.SendOtp(OTPmodel);
                            if (OTPresponse.MessageFlag == "S")
                            {
                                model.IsOTPSend = true;
                                ModelState.AddModelError(nameof(model.OTP), OTPresponse.Message);
                                return this.View(model);
                            }
                            else
                            {
                                model.Message = OTPresponse.Message;
                                TempData["LoginModel"] = model;
                                return Redirect(Request.RawUrl);
                            }
                        }
                        else
                        {
                            model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/Invalid DealerId Msg", "Dealer not found.");
                            TempData["LoginModel"] = model;
                            return Redirect(Request.RawUrl);
                        }
                    }
                }
                else if (signIn != null && signIn == DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/signIn", "signIn"))
                {
                    string OTPValidation = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/OtpRegexValidation", @"^\d{4}$");
                    Regex OTPregex = new Regex(OTPValidation);
                    if (string.IsNullOrEmpty(model.DealerId))
                    {
                        this.ModelState.AddModelError(nameof(model.DealerId), DictionaryPhraseRepository.Current.Get("/Controller/Messages/EmptyDealerId", "Please enter Dealer Id"));
                        return this.View(model);
                    }
                    if (string.IsNullOrEmpty(model.OTP))
                    {
                        ModelState.AddModelError(nameof(model.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/EmptyOTP", "Please enter OTP."));
                        model.IsOTPSend = true;
                        return View(model);
                    }
                    if (!string.IsNullOrEmpty(model.OTP) && !string.IsNullOrWhiteSpace(model.OTP))
                    {
                        model.OTP = model.OTP.Trim();
                        var OTPToValidate = ModelState["OTP"];
                        if (OTPToValidate == null || //exclude if this could not happen or not to be counted as error
                            (OTPToValidate != null && OTPToValidate.Errors.Any())
                           )
                        {
                            model.IsOTPSend = true;
                            ModelState.AddModelError(nameof(model.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTPerror", "Invalid OTP"));
                            return View(model);
                        }
                        //var MobileToValidate = ModelState["Mobile"];
                        //if (MobileToValidate == null || //exclude if this could not happen or not to be counted as error
                        //    (MobileToValidate != null && MobileToValidate.Errors.Any())
                        //   )
                        //{
                        //    model.IsOTPSend = false;
                        //    ModelState.AddModelError(nameof(model.MobileNo), DictionaryPhraseRepository.Current.Get("/Controller/Messages/MobileError", "Invalid Mobile No"));
                        //    return View(model);
                        //}
                        using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                        {
                            if (dbcontext.CNG_RegisteredDealerInfos.Any(a => a.DealerId == model.DealerId))
                            {
                                var DealerInfo = dbcontext.CNG_RegisteredDealerInfos.Where(a => a.DealerId == model.DealerId).FirstOrDefault();
                                model.UserName = DealerInfo.DealerName;
                                model.MobileNo = DealerInfo.DealerMobile;
                            }
                            else
                            {
                                model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/Invalid DealerId Msg", "Dealer not found.");
                                TempData["LoginModel"] = model;
                                return Redirect(Request.RawUrl);
                            }
                        }
                        var OTPvalidResp = objWebAPIAdaniGas.ValidateOtp(model.MobileNo, model.OTP);
                        if (OTPvalidResp != null)
                        {
                            if (OTPvalidResp.Msg_Flag == "S")
                            {
                                model.IsOTPValid = true;
                                return CNGDealerLogin(model, redirectUrl => new RedirectResult(redirectUrl));
                            }
                            else if (OTPvalidResp.Msg_Flag == "F")
                            {
                                model.IsOTPValid = false;
                                model.IsOTPSend = true;
                                ModelState.AddModelError(nameof(model.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTPerror", "Invalid OTP"));
                                return View(model);
                            }
                        }
                        else
                        {
                            model.IsOTPSend = true;
                            ModelState.AddModelError(nameof(model.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTP validation error", "OTP validation error. Please contact to administrator"));
                            return View(model);
                        }
                        return View(model);
                    }
                    else
                    {
                        ModelState.AddModelError(nameof(model.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTPerror", "Invalid OTP"));
                        return View(model);
                    }
                }
                else
                {
                    string errormsg = !string.IsNullOrEmpty(model.Message) ? model.Message : DictionaryPhraseRepository.Current.Get("/Controller/Messages/SystemError", "Something has been wrong, Please try again later");
                    model.Message = errormsg;
                    TempData["LoginModel"] = model;
                    return Redirect(Request.RawUrl);
                }
            }
            catch (Exception e)
            {
                Log.Error("Error in CNGDealerLogin - login :" + model.DealerId + e.Message, this);
                string errormsg = !string.IsNullOrEmpty(model.Message) ? model.Message : DictionaryPhraseRepository.Current.Get("/Controller/Messages/SystemError", "Something has been wrong, Please try again later");
                model.Message = errormsg;
                TempData["LoginModel"] = model;
                return Redirect(Request.RawUrl);
            }
        }

        protected virtual ActionResult CNGDealerLogin(AdaniGasCNG_DealerLoginInfo loginInfo, Func<string, ActionResult> redirectAction)
        {
            try
            {
                //string loginType = WebAPIAdaniGas.LoginModuleType(System.Web.HttpContext.Current.Request.Url.AbsolutePath.ToLower());

                //AdaniGasCNG_DealerLoginInfo loginDetails = objWebAPIAdaniGas.Login(loginInfo.LoginName, loginInfo.Password);
                //if (string.IsNullOrEmpty(loginDetails.CustomerID))
                //{
                //    this.ModelState.AddModelError(nameof(loginInfo.Password), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/API Not Valid", "Unable to fetch data from PI Service."));
                //    return this.View(loginInfo);
                //}
                if (string.IsNullOrEmpty(loginInfo.DealerId))
                {
                    this.ModelState.AddModelError(nameof(loginInfo.DealerId), DictionaryPhraseRepository.Current.Get("/Controller/Messages/EmptyDealerId", "Please enter Dealer Id"));
                    return this.View(loginInfo);
                }
                using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                {
                    if (dbcontext.CNG_RegisteredDealerInfos.Any(a => a.DealerId == loginInfo.DealerId))
                    {
                        var DealerInfo = dbcontext.CNG_RegisteredDealerInfos.Where(a => a.DealerId == loginInfo.DealerId).FirstOrDefault();
                        loginInfo.MobileNo = DealerInfo.DealerMobile;
                    }
                    else
                    {
                        loginInfo.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/Invalid DealerId Msg", "Dealer not found.");
                        TempData["LoginModel"] = loginInfo;
                        return Redirect(loginInfo.PageInfo);
                    }
                }
                if (!loginInfo.IsOTPValid) // unauthorized
                {
                    loginInfo.IsOTPSend = true;
                    ModelState.AddModelError(nameof(loginInfo.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTPerror", "Invalid OTP"));
                    return View(loginInfo);
                }
                else
                {
                    using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                    {
                        if (dbcontext.CNG_RegisteredDealerInfos.Any(a => a.DealerId == loginInfo.DealerId))
                        {
                            var DealerInfo = dbcontext.CNG_RegisteredDealerInfos.Where(a => a.DealerId == loginInfo.DealerId).FirstOrDefault();
                            loginInfo.UserName = DealerInfo.DealerName;
                        }
                        else
                        {
                            loginInfo.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/Invalid DealerId Msg", "Dealer not found.");
                            TempData["LoginModel"] = loginInfo;
                            return Redirect(loginInfo.PageInfo);
                        }
                    }
                    string guid = Guid.NewGuid().ToString();
                    //Creating second session for the same user and assigning a randmon GUID

                    SessionHelper.UserSession.CNGDealerUserSessionContext = new AdaniGasCNG_DealerLoginModel
                    {
                        UserIP = WebAPIAdaniGas.GetIPAddress(),
                        IsLoggedIn = true,
                        LoginName = loginInfo.UserName,
                        OTP = loginInfo.OTP,
                        DealerId = loginInfo.DealerId,
                        MobileNo = loginInfo.MobileNo,
                        AuthToken = guid
                    };
                    Response.Cookies.Add(new System.Web.HttpCookie("AuthToken", guid));
                }

                string redirectUrl = loginInfo.ReturnUrl;
                if (string.IsNullOrEmpty(redirectUrl))
                {
                    redirectUrl = GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.CNGDealerAuthenticated);
                }

                return redirectAction(redirectUrl);
            }
            catch (Exception ex)
            {
                Log.Error("CNGDealer LoginAdaniGas Method Error - for User - " + loginInfo.UserName + " , " + loginInfo.MobileNo, ex.Message);
                loginInfo.Message = ex.Message;
                TempData["LoginModel"] = loginInfo;
                return Redirect(loginInfo.PageInfo);
            }
        }

        [RedirectUnAuthenticatedAdaniGasCNGDealerLogin]
        public ActionResult CNGDealerDashboard()
        {
            AdaniGasCNG_DealerLoginInfo loginInfo = new AdaniGasCNG_DealerLoginInfo();
            AdaniGasCNG_DealerDashboardModel model = new AdaniGasCNG_DealerDashboardModel();
            if (TempData["DealerFormModel"] != null)
            {
                String Rmodel = TempData["LoginModel"] as String;
                if (!string.IsNullOrEmpty(Rmodel))
                {
                    model.Message = Rmodel;
                }
            }
            model.DealerMobileNo = SessionHelper.UserSession.CNGDealerUserSessionContext.MobileNo;
            model.DealerName = SessionHelper.UserSession.CNGDealerUserSessionContext.LoginUser;
            model.DealerId = SessionHelper.UserSession.CNGDealerUserSessionContext.DealerId;
            using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
            {
                if (dbcontext.CNG_RegisteredDealerInfos.Any(a => a.DealerId == model.DealerId))
                {
                    var InquiryInfo = dbcontext.CNG_DealerEnquiryRegistrationHistories.Where(a => a.DealerCode == model.DealerId);
                    if (InquiryInfo != null)
                    {
                        foreach (var Inquery in InquiryInfo)
                        {
                            RegisteredInquiryDetails details = new RegisteredInquiryDetails();

                            details.EnquiryNoForDealer = Inquery.EnquiryNo;
                            details.CustomerRegnNo = Inquery.EnquiryNo;
                            details.CNG_KitNumber = Inquery.CNGKitNumber;
                            details.CustomerGUID = Guid.Parse(Inquery.CustomerRegistrationId.ToString());
                            details.VehicleInsureanceFileLink = Inquery.VehicleInsuranceFile;
                            details.RC_BookFileLink = Inquery.RC_bookFile;
                            details.AadharCardFileLink = Inquery.AadharCardFile;
                            details.PAN_CardFileLink = Inquery.PanCardFile;
                            details.CurrentStatus = Inquery.CurrentStatus;
                            details.UpdatedOn = DateTime.Parse(Inquery.UpdatedOn.ToString());
                            model.RegisteredInquiryList.Add(details);
                        }
                        return this.View(model);
                    }
                    else
                    {
                        return this.View(model);
                    }
                }
                else
                {
                    loginInfo.PageInfo = GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.CNGDealerAuthenticated);
                    loginInfo.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/Invalid DealerId Msg", "Dealer not found.");
                    TempData["LoginModel"] = loginInfo;
                    return Redirect(loginInfo.PageInfo);
                }
            }
        }
        [RedirectUnAuthenticatedAdaniGasCNGDealerLogin]
        public ActionResult CNGDealerForm()
        {
            if (TempData["DealerFormModel"] != null)
            {
                AdaniGasCNG_DealerRegisterModel Rmodel = TempData["DealerFormModel"] as AdaniGasCNG_DealerRegisterModel;
                if (!string.IsNullOrEmpty(Rmodel.Message))
                {
                    ModelState.AddModelError(nameof(Rmodel.CustomerRegistrationNo), Rmodel.Message);
                }
                return View(Rmodel);
            }
            AdaniGasCNG_DealerLoginInfo loginInfo = new AdaniGasCNG_DealerLoginInfo();
            AdaniGasCNG_DealerRegisterModel model = new AdaniGasCNG_DealerRegisterModel();
            model.DealerMobileNo = SessionHelper.UserSession.CNGDealerUserSessionContext.MobileNo;
            model.DealerName = SessionHelper.UserSession.CNGDealerUserSessionContext.LoginUser;
            model.DealerId = SessionHelper.UserSession.CNGDealerUserSessionContext.DealerId;
            using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
            {
                if (dbcontext.CNG_RegisteredDealerInfos.Any(a => a.DealerId == model.DealerId))
                {
                    if (Request.QueryString["RID"] != null)
                    {
                        var CustDetails = dbcontext.CNG_DealerEnquiryRegistrationHistories.Where(x => x.CustomerRegistrationId == Guid.Parse(Request.QueryString["RID"]) && x.DealerCode == model.DealerId).FirstOrDefault();
                        if (CustDetails != null)
                        {
                            if (dbcontext.CNG_CustomerRegistrations.Any(a => a.RegistrationNo == CustDetails.EnquiryNo))
                            {
                                var CustomerDetails = dbcontext.CNG_CustomerRegistrations.Where(a => a.RegistrationNo == CustDetails.EnquiryNo).FirstOrDefault();
                                RegisteredInquiryDetails registered = new RegisteredInquiryDetails();
                                registered.Name = CustomerDetails.FirstName + " " + CustomerDetails.LastName;
                                registered.MobileNo = CustomerDetails.MobileNo;
                                registered.VehicleCompany = CustomerDetails.VehicleCompany;
                                registered.vehicleModel = CustomerDetails.VehicleModel;
                                registered.VehicleNo = CustomerDetails.VehicleNumber;
                                registered.VehicleType = CustomerDetails.VehicleType;
                                registered.YearOfPurchase = CustomerDetails.YearOfPurchase;
                                registered.IsBSVI = bool.Parse(CustomerDetails.IsBS_VI.ToString());
                                model.RegisteredInquiryList.Add(registered);
                                model.IsValidRegistrationNo = true;
                                model.AadharCardFileLink = CustDetails.AadharCardFile;
                                model.CNG_CylinderCertiFileLink = CustDetails.CNG_CylinderCertifFile;
                                model.InvoiceFileLink = CustDetails.InvoiceCopyFile;
                                model.PAN_CardFileLink = CustDetails.PanCardFile;
                                model.RC_BookFileLink = CustDetails.RC_bookFile;
                                model.RTO_App_ReceiptFileLink = CustDetails.RTO_ApplicationReceipt;
                                model.RTO_CertiFileLink = CustDetails.RTO_CertificateCopy;
                                model.SignedSchemeDocFileLink = CustDetails.CustSignedSchemeDoc;
                                model.VehicleInsureanceFileLink = CustDetails.VehicleInsuranceFile;
                                model.CNG_KitNumber = CustDetails.CNGKitNumber;
                                model.CurrentStatus = CustDetails.CurrentStatus;
                                model.CustomerGUID = Guid.Parse(Request.QueryString["RID"]);
                                model.CustomerRegistrationNo = CustDetails.EnquiryNo;
                                model.IsVerifiedByDealer = bool.Parse(CustDetails.DocumentsVerified.ToString());
                                model.VerifiedBy = CustDetails.DocumentsVerifiedBy;
                                return this.View(model);
                            }
                            else
                            {
                                model.PageInfo = Request.RawUrl;
                                model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/Invalid Customer Msg", "No record found.");
                                ModelState.AddModelError(nameof(model.CustomerRegistrationNo), model.Message);
                                return View(model);
                                //TempData["DealerFormModel"] = model;
                                //return Redirect(model.PageInfo);
                            }
                        }
                    }
                    return this.View(model);
                }
                else
                {
                    loginInfo.PageInfo = GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.CNGDealerAuthenticated);
                    loginInfo.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/Invalid DealerId Msg", "Dealer not found.");
                    ViewBag.Message = loginInfo.Message;
                    return Redirect(GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.CNGDealerAuthenticated));
                }
            }
        }
        [RedirectUnAuthenticatedAdaniGasCNGDealerLogin]
        [HttpPost]
        public ActionResult CNGDealerForm(AdaniGasCNG_DealerRegisterModel model, string Submit)
        {
            try
            {
                AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext();
                AdaniGasCNG_DealerLoginInfo loginInfo = new AdaniGasCNG_DealerLoginInfo();
                model.DealerMobileNo = SessionHelper.UserSession.CNGDealerUserSessionContext.MobileNo;
                model.DealerName = SessionHelper.UserSession.CNGDealerUserSessionContext.LoginUser;
                model.DealerId = SessionHelper.UserSession.CNGDealerUserSessionContext.DealerId;
                if (Submit != null && Submit == DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerForm/Search", "CNGDealerSearchBtn"))
                {
                    if (string.IsNullOrEmpty(model.CustomerRegistrationNo))
                    {
                        Log.Info("Adani Gas CNG Dealer Form Customer Registration form is empty", this);
                        model.Message = DictionaryPhraseRepository.Current.Get("/Controller/Messages/Empty Registration No", "Please enter customer registration no");
                        ModelState.AddModelError(nameof(model.CustomerRegistrationNo), model.Message);
                        return View(model);
                    }
                    if (dbcontext.CNG_CustomerRegistrations.Any(a => a.RegistrationNo == model.CustomerRegistrationNo))
                    {
                        var CustomerDetails = dbcontext.CNG_CustomerRegistrations.Where(a => a.RegistrationNo == model.CustomerRegistrationNo).FirstOrDefault();
                        RegisteredInquiryDetails registered = new RegisteredInquiryDetails();
                        registered.Name = CustomerDetails.FirstName + " " + CustomerDetails.LastName;
                        registered.MobileNo = CustomerDetails.MobileNo;
                        registered.VehicleCompany = CustomerDetails.VehicleCompany;
                        registered.vehicleModel = CustomerDetails.VehicleModel;
                        registered.VehicleNo = CustomerDetails.VehicleNumber;
                        registered.VehicleType = CustomerDetails.VehicleType;
                        registered.YearOfPurchase = CustomerDetails.YearOfPurchase;
                        registered.IsBSVI = bool.Parse(CustomerDetails.IsBS_VI.ToString());
                        model.RegisteredInquiryList.Add(registered);
                        model.CustomerGUID = CustomerDetails.Id;
                        model.IsValidRegistrationNo = true;
                        return this.View(model);
                    }
                    else
                    {
                        model.PageInfo = Request.RawUrl;
                        model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/Invalid Customer Msg", "No record found.");
                        TempData["DealerFormModel"] = model;
                        return Redirect(model.PageInfo);
                    }
                }
                else if (Submit != null && Submit == DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerForm/Search", "CNGDealerSaveBtn"))
                {
                    if (!ModelState.IsValid)
                    {
                        return View(model);
                    }
                    model.CurrentStatus = "Saved by Dealer";
                    model.PageInfo = Request.RawUrl;
                    var CustomerInfo = dbcontext.CNG_CustomerRegistrations.Where(a => a.RegistrationNo == model.CustomerRegistrationNo).FirstOrDefault();
                    model.CustomerGUID = CustomerInfo.Id;
                    if (model.VehicleInsuranceFile != null && model.VehicleInsuranceFile.ContentLength > 0)
                    {
                        byte[] bytes;

                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.VehicleInsuranceFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.VehicleInsuranceFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.VehicleInsuranceFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.VehicleInsuranceFile), errorMsg);
                            model.hasError = true;
                        }

                        using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                        {
                            bytes = br.ReadBytes(doc.DocFile.ContentLength);
                        }
                        if (!model.hasError)
                        {
                            doc.DocData = bytes;
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.VehicleInsureanceFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "VehicleInsuranceCopy_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/Vehicle Insurance", "Vehicle Insurance");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.VehicleInsuranceFile), errorMsg);
                                model.hasError = true;
                            }
                        }
                    }
                    if (model.AadharCardFile != null && model.AadharCardFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.AadharCardFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.AadharCardFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.AadharCardFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.AadharCardFile), errorMsg);
                            model.hasError = true;
                        }
                        if (!model.hasError)
                        {
                            using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                            {
                                bytes = br.ReadBytes(doc.DocFile.ContentLength);
                                doc.DocData = bytes;
                            }
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.AadharCardFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "Aadhar_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/Aadhar Card", "Aadhar Card");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.AadharCardFile), errorMsg);
                                model.hasError = true;
                            }
                        }

                    }
                    if (model.PAN_CardFile != null && model.PAN_CardFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.PAN_CardFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.PAN_CardFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.PAN_CardFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.PAN_CardFile), errorMsg);
                            model.hasError = true;
                        }
                        if (!model.hasError)
                        {
                            using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                            {
                                bytes = br.ReadBytes(doc.DocFile.ContentLength);
                            }

                            doc.DocData = bytes;
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.PAN_CardFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "Pancard_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/Pan Card", "Pan Card");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.PAN_CardFile), errorMsg);
                                model.hasError = true;
                            }
                        }
                    }
                    if (model.RC_BookFile != null && model.RC_BookFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.RC_BookFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.RC_BookFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.RC_BookFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.RC_BookFile), errorMsg);
                            model.hasError = true;
                        }
                        if (!model.hasError)
                        {
                            using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                            {
                                bytes = br.ReadBytes(doc.DocFile.ContentLength);
                            }

                            doc.DocData = bytes;
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.RC_BookFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "VehicleRC_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/Vehicle RC", "Vehicle RC");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.RC_BookFile), errorMsg);
                                model.hasError = true;
                            }
                        }

                    }
                    if (model.CNG_CylinderCertiFile != null && model.CNG_CylinderCertiFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.CNG_CylinderCertiFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.CNG_CylinderCertiFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.CNG_CylinderCertiFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.CNG_CylinderCertiFile), errorMsg);
                            model.hasError = true;
                        }
                        if (!model.hasError)
                        {
                            using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                            {
                                bytes = br.ReadBytes(doc.DocFile.ContentLength);
                            }

                            doc.DocData = bytes;
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.CNG_CylinderCertiFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "CNG_CylinderCertificate_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/CNG Cylinder Certificate", "CNG Cylinder Certificate");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.CNG_CylinderCertiFile), errorMsg);
                                model.hasError = true;
                            }
                        }
                    }
                    if (model.InvoiceFileFile != null && model.InvoiceFileFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.InvoiceFileFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.InvoiceFileFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.InvoiceFileFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.InvoiceFileFile), errorMsg);
                            model.hasError = true;
                        }
                        if (!model.hasError)
                        {
                            using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                            {
                                bytes = br.ReadBytes(doc.DocFile.ContentLength);
                            }

                            doc.DocData = bytes;
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.InvoiceFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "Invoice_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/Invoice Copy", "Invoice Copy");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.InvoiceFileFile), errorMsg);
                                model.hasError = true;
                            }
                        }

                    }
                    if (model.RTO_App_ReceiptFile != null && model.RTO_App_ReceiptFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.RTO_App_ReceiptFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.RTO_App_ReceiptFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.RTO_App_ReceiptFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.RTO_App_ReceiptFile), errorMsg);
                            model.hasError = true;
                        }
                        if (!model.hasError)
                        {
                            using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                            {
                                bytes = br.ReadBytes(doc.DocFile.ContentLength);
                            }

                            doc.DocData = bytes;
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.RTO_App_ReceiptFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "RTO_App_Receipt_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/RTO Application Receipt", "RTO Application Receipt");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.RTO_App_ReceiptFile), errorMsg);
                                model.hasError = true;
                            }
                        }

                    }
                    if (model.RTO_CertiFile != null && model.RTO_CertiFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.RTO_CertiFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.RTO_CertiFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.RTO_CertiFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.RTO_CertiFile), errorMsg);
                            model.hasError = true;
                        }
                        if (!model.hasError)
                        {
                            using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                            {
                                bytes = br.ReadBytes(doc.DocFile.ContentLength);
                            }

                            doc.DocData = bytes;
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.RTO_CertiFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "RTO_Certificate_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/RTO Certificate", "RTO Certificate");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.RTO_CertiFile), errorMsg);
                                model.hasError = true;
                            }
                        }

                    }
                    if (model.SignedSchemeDocFile != null && model.SignedSchemeDocFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.SignedSchemeDocFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.SignedSchemeDocFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.SignedSchemeDocFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.SignedSchemeDocFile), errorMsg);
                            model.hasError = true;
                        }
                        if (!model.hasError)
                        {
                            using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                            {
                                bytes = br.ReadBytes(doc.DocFile.ContentLength);
                            }

                            doc.DocData = bytes;
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.SignedSchemeDocFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "VehicleInsuranceCopy_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/Signed Scheme Document", "Signed Scheme Document");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.SignedSchemeDocFile), errorMsg);
                                model.hasError = true;
                            }
                        }
                    }
                    if (model.hasError)
                    {
                        if (model.CustomerGUID != null)
                        {
                            var CustDetails = dbcontext.CNG_DealerEnquiryRegistrationHistories.Where(x => x.CustomerRegistrationId == model.CustomerGUID && x.DealerCode == model.DealerId).FirstOrDefault();
                            if (CustDetails != null)
                            {
                                if (dbcontext.CNG_CustomerRegistrations.Any(a => a.RegistrationNo == CustDetails.EnquiryNo))
                                {
                                    var CustomerDetails = dbcontext.CNG_CustomerRegistrations.Where(a => a.RegistrationNo == CustDetails.EnquiryNo).FirstOrDefault();
                                    RegisteredInquiryDetails registered = new RegisteredInquiryDetails();
                                    registered.Name = CustomerDetails.FirstName + " " + CustomerDetails.LastName;
                                    registered.MobileNo = CustomerDetails.MobileNo;
                                    registered.VehicleCompany = CustomerDetails.VehicleCompany;
                                    registered.vehicleModel = CustomerDetails.VehicleModel;
                                    registered.VehicleNo = CustomerDetails.VehicleNumber;
                                    registered.VehicleType = CustomerDetails.VehicleType;
                                    registered.YearOfPurchase = CustomerDetails.YearOfPurchase;
                                    registered.IsBSVI = bool.Parse(CustomerDetails.IsBS_VI.ToString());
                                    model.RegisteredInquiryList.Add(registered);
                                    model.IsValidRegistrationNo = true;
                                    model.AadharCardFileLink = CustDetails.AadharCardFile;
                                    model.CNG_CylinderCertiFileLink = CustDetails.CNG_CylinderCertifFile;
                                    model.InvoiceFileLink = CustDetails.InvoiceCopyFile;
                                    model.PAN_CardFileLink = CustDetails.PanCardFile;
                                    model.RC_BookFileLink = CustDetails.RC_bookFile;
                                    model.RTO_App_ReceiptFileLink = CustDetails.RTO_ApplicationReceipt;
                                    model.RTO_CertiFileLink = CustDetails.RTO_CertificateCopy;
                                    model.SignedSchemeDocFileLink = CustDetails.CustSignedSchemeDoc;
                                    model.VehicleInsureanceFileLink = CustDetails.VehicleInsuranceFile;
                                    model.CNG_KitNumber = CustDetails.CNGKitNumber;
                                    model.CurrentStatus = CustDetails.CurrentStatus;
                                    model.CustomerRegistrationNo = CustDetails.EnquiryNo;
                                    return this.View(model);
                                }
                                else
                                {
                                    model.PageInfo = Request.RawUrl;
                                    model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/Invalid Customer Msg", "No record found.");
                                    ModelState.AddModelError(nameof(model.CustomerRegistrationNo), model.Message);
                                    return View(model);
                                    //TempData["DealerFormModel"] = model;
                                    //return Redirect(model.PageInfo);
                                }
                            }
                        }
                        else
                        {
                            model.PageInfo = Request.RawUrl;
                            model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/Invalid Customer Msg", "No record found.");
                            TempData["DealerFormModel"] = model;
                            return Redirect(model.PageInfo);
                        }
                    }
                    adaniGasDBservice.StoreCNGDealerFormAdaniGas(model);
                    if (model.IsSavedIntoDatabase)
                    {
                        model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerForm/DealerFormSuccess", "Data saved successfully for Customer Registration No: " + model.CustomerRegistrationNo);
                        ViewBag.Message = model.Message;
                        return Redirect(GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.CNGDealerAuthenticated));
                    }
                    else
                    {
                        model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerForm/DealerFormSuccess", "Failed to save data for Customer Registration No: " + model.CustomerRegistrationNo);
                        TempData["DealerFormModel"] = model.Message;
                        return Redirect(GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.CNGDealerAuthenticated));
                    }
                }
                else if (Submit != null && Submit == DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerForm/SubmitForm", "CNGDealerSubmitBtn"))
                {
                    if (!ModelState.IsValid)
                    {
                        return View(model);
                    }
                    model.CurrentStatus = "Submitted by Dealer";
                    model.PageInfo = Request.RawUrl;
                    var CustomerInfo = dbcontext.CNG_CustomerRegistrations.Where(a => a.RegistrationNo == model.CustomerRegistrationNo).FirstOrDefault();
                    model.CustomerGUID = CustomerInfo.Id;
                    if (model.VehicleInsuranceFile != null && model.VehicleInsuranceFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.VehicleInsuranceFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.VehicleInsuranceFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.VehicleInsuranceFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.VehicleInsuranceFile), errorMsg);
                            model.hasError = true;
                        }

                        using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                        {
                            bytes = br.ReadBytes(doc.DocFile.ContentLength);
                        }
                        if (!model.hasError)
                        {
                            doc.DocData = bytes;
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.VehicleInsureanceFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "VehicleInsuranceCopy_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/Vehicle Insurance", "Vehicle Insurance");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.VehicleInsuranceFile), errorMsg);
                                model.hasError = true;
                            }
                        }
                    }
                    else
                    {
                        if (!dbcontext.CNG_Documents.Any(x => x.CreatedBy == model.DealerId && x.CustRegistrationNo == model.CustomerGUID && x.DocumentType == "Vehicle Insurance"))
                        {
                            Log.Error("File is not uploaded by" + model.DealerId, this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/required File", "File is required");
                            ModelState.AddModelError(nameof(model.VehicleInsuranceFile), errorMsg);
                            model.hasError = true;
                        }
                    }
                    if (model.AadharCardFile != null && model.AadharCardFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.AadharCardFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.AadharCardFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.AadharCardFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.AadharCardFile), errorMsg);
                            model.hasError = true;
                        }
                        if (!model.hasError)
                        {
                            using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                            {
                                bytes = br.ReadBytes(doc.DocFile.ContentLength);
                                doc.DocData = bytes;
                            }
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.AadharCardFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "Aadhar_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/Aadhar Card", "Aadhar Card");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.AadharCardFile), errorMsg);
                                model.hasError = true;
                            }
                        }

                    }
                    else
                    {
                        if (!dbcontext.CNG_Documents.Any(x => x.CreatedBy == model.DealerId && x.CustRegistrationNo == model.CustomerGUID && x.DocumentType == "Aadhar Card"))
                        {
                            Log.Error("File is not uploaded by" + model.DealerId, this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/required File", "File is required");
                            ModelState.AddModelError(nameof(model.AadharCardFile), errorMsg);
                            model.hasError = true;
                        }
                    }
                    if (model.PAN_CardFile != null && model.PAN_CardFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.PAN_CardFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.PAN_CardFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.PAN_CardFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.PAN_CardFile), errorMsg);
                            model.hasError = true;
                        }
                        if (!model.hasError)
                        {
                            using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                            {
                                bytes = br.ReadBytes(doc.DocFile.ContentLength);
                            }

                            doc.DocData = bytes;
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.PAN_CardFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "Pancard_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/Pan Card", "Pan Card");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.PAN_CardFile), errorMsg);
                                model.hasError = true;
                            }
                        }
                    }
                    else
                    {
                        if (!dbcontext.CNG_Documents.Any(x => x.CreatedBy == model.DealerId && x.CustRegistrationNo == model.CustomerGUID && x.DocumentType == "Pan Card"))
                        {
                            Log.Error("File is not uploaded by" + model.DealerId, this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/required File", "File is required");
                            ModelState.AddModelError(nameof(model.PAN_CardFile), errorMsg);
                            model.hasError = true;
                        }
                    }
                    if (model.RC_BookFile != null && model.RC_BookFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.RC_BookFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.RC_BookFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.RC_BookFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.RC_BookFile), errorMsg);
                            model.hasError = true;
                        }
                        if (!model.hasError)
                        {
                            using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                            {
                                bytes = br.ReadBytes(doc.DocFile.ContentLength);
                            }

                            doc.DocData = bytes;
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.RC_BookFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "VehicleRC_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/Vehicle RC", "Vehicle RC");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.RC_BookFile), errorMsg);
                                model.hasError = true;
                            }
                        }

                    }
                    else
                    {
                        if (!dbcontext.CNG_Documents.Any(x => x.CreatedBy == model.DealerId && x.CustRegistrationNo == model.CustomerGUID && x.DocumentType == "Vehicle RC"))
                        {
                            Log.Error("File is not uploaded by" + model.DealerId, this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/required File", "File is required");
                            ModelState.AddModelError(nameof(model.RC_BookFile), errorMsg);
                            model.hasError = true;
                        }
                    }
                    if (model.CNG_CylinderCertiFile != null && model.CNG_CylinderCertiFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.CNG_CylinderCertiFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.CNG_CylinderCertiFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.CNG_CylinderCertiFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.CNG_CylinderCertiFile), errorMsg);
                            model.hasError = true;
                        }
                        if (!model.hasError)
                        {
                            using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                            {
                                bytes = br.ReadBytes(doc.DocFile.ContentLength);
                            }

                            doc.DocData = bytes;
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.CNG_CylinderCertiFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "CNG_CylinderCertificate_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/CNG Cylinder Certificate", "CNG Cylinder Certificate");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.CNG_CylinderCertiFile), errorMsg);
                                model.hasError = true;
                            }
                        }
                    }
                    else
                    {
                        if (!dbcontext.CNG_Documents.Any(x => x.CreatedBy == model.DealerId && x.CustRegistrationNo == model.CustomerGUID && x.DocumentType == "CNG Cylinder Certificate"))
                        {
                            Log.Error("File is not uploaded by" + model.DealerId, this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/required File", "File is required");
                            ModelState.AddModelError(nameof(model.CNG_CylinderCertiFile), errorMsg);
                            model.hasError = true;
                        }
                    }
                    if (model.InvoiceFileFile != null && model.InvoiceFileFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.InvoiceFileFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.InvoiceFileFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.InvoiceFileFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.InvoiceFileFile), errorMsg);
                            model.hasError = true;
                        }
                        if (!model.hasError)
                        {
                            using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                            {
                                bytes = br.ReadBytes(doc.DocFile.ContentLength);
                            }

                            doc.DocData = bytes;
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.InvoiceFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "Invoice_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/Invoice Copy", "Invoice Copy");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.InvoiceFileFile), errorMsg);
                                model.hasError = true;
                            }
                        }

                    }
                    else
                    {
                        if (!dbcontext.CNG_Documents.Any(x => x.CreatedBy == model.DealerId && x.CustRegistrationNo == model.CustomerGUID && x.DocumentType == "Invoice Copy"))
                        {
                            Log.Error("File is not uploaded by" + model.DealerId, this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/required File", "File is required");
                            ModelState.AddModelError(nameof(model.InvoiceFileFile), errorMsg);
                            model.hasError = true;
                        }
                    }
                    if (model.RTO_App_ReceiptFile != null && model.RTO_App_ReceiptFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.RTO_App_ReceiptFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.RTO_App_ReceiptFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.RTO_App_ReceiptFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.RTO_App_ReceiptFile), errorMsg);
                            model.hasError = true;
                        }
                        if (!model.hasError)
                        {
                            using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                            {
                                bytes = br.ReadBytes(doc.DocFile.ContentLength);
                            }

                            doc.DocData = bytes;
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.RTO_App_ReceiptFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "RTO_App_Receipt_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/RTO Application Receipt", "RTO Application Receipt");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.RTO_App_ReceiptFile), errorMsg);
                                model.hasError = true;
                            }
                        }

                    }
                    else
                    {
                        if (!dbcontext.CNG_Documents.Any(x => x.CreatedBy == model.DealerId && x.CustRegistrationNo == model.CustomerGUID && x.DocumentType == "RTO Application Receipt"))
                        {
                            Log.Error("File is not uploaded by" + model.DealerId, this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/required File", "File is required");
                            ModelState.AddModelError(nameof(model.RTO_App_ReceiptFile), errorMsg);
                            model.hasError = true;
                        }
                    }
                    if (model.RTO_CertiFile != null && model.RTO_CertiFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.RTO_CertiFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.RTO_CertiFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.RTO_CertiFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.RTO_CertiFile), errorMsg);
                            model.hasError = true;
                        }
                        if (!model.hasError)
                        {
                            using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                            {
                                bytes = br.ReadBytes(doc.DocFile.ContentLength);
                            }

                            doc.DocData = bytes;
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.RTO_CertiFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "RTO_Certificate_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/RTO Certificate", "RTO Certificate");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.RTO_CertiFile), errorMsg);
                                model.hasError = true;
                            }
                        }

                    }
                    else
                    {
                        if (!dbcontext.CNG_Documents.Any(x => x.CreatedBy == model.DealerId && x.CustRegistrationNo == model.CustomerGUID && x.DocumentType == "RTO Certificate"))
                        {
                            Log.Error("File is not uploaded by" + model.DealerId, this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/required File", "File is required");
                            ModelState.AddModelError(nameof(model.RTO_CertiFile), errorMsg);
                            model.hasError = true;
                        }
                    }
                    if (model.SignedSchemeDocFile != null && model.SignedSchemeDocFile.ContentLength > 0)
                    {
                        byte[] bytes;
                        CNGDocuments doc = new CNGDocuments();
                        doc.DocFile = model.SignedSchemeDocFile;
                        var supportedTypes = new[] { "pdf", "jpg", "jpeg" };
                        AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                        var fileExt = System.IO.Path.GetExtension(doc.DocFile.FileName).Substring(1);
                        if (!supportedTypes.Contains(fileExt.ToLower()))
                        {
                            Log.Error("File is invalid - Only Upload PDF/JPG/JPEG File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File is invalid - Only Upload PDF/JPG/JPEG File");
                            ModelState.AddModelError(nameof(model.SignedSchemeDocFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (doc.DocFile.ContentLength > ((4 * 1024) * 1024))
                        {
                            Log.Error("File size Should Be UpTo 4 MB", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB");
                            ModelState.AddModelError(nameof(model.SignedSchemeDocFile), errorMsg);
                            model.hasError = true;
                        }
                        else if (!fu.FileMIMEisValid(doc.DocFile))
                        {
                            Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File");
                            ModelState.AddModelError(nameof(model.SignedSchemeDocFile), errorMsg);
                            model.hasError = true;
                        }
                        if (!model.hasError)
                        {
                            using (BinaryReader br = new BinaryReader(doc.DocFile.InputStream))
                            {
                                bytes = br.ReadBytes(doc.DocFile.ContentLength);
                            }

                            doc.DocData = bytes;
                            doc.Id = Guid.NewGuid();
                            doc.CustomerGUID = model.CustomerGUID;
                            doc.DocDownloadLink = "/" +
                                "api/AdaniGas/DownloadCNGdoc?Id=" + doc.Id + "&CID=" + model.CustomerGUID;
                            model.SignedSchemeDocFileLink = doc.DocDownloadLink;
                            doc.DocContentType = doc.DocFile.ContentType;
                            doc.DocName = "VehicleInsuranceCopy_" + model.CustomerRegistrationNo + "_" + DateTime.Now;
                            doc.CreatedOn = DateTime.Now;
                            doc.CreatedBy = model.DealerId;
                            doc.DocType = DictionaryPhraseRepository.Current.Get("/Controller/CNGDocumentTypes/Signed Scheme Document", "Signed Scheme Document");
                            adaniGasDBservice.StoreCNGUploadedDocument(doc);
                            if (!doc.SavedIntoDB)
                            {
                                string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Unable to save File", "Unable to save file");
                                ModelState.AddModelError(nameof(model.SignedSchemeDocFile), errorMsg);
                                model.hasError = true;
                            }
                        }
                    }
                    else
                    {
                        if (!dbcontext.CNG_Documents.Any(x => x.CreatedBy == model.DealerId && x.CustRegistrationNo == model.CustomerGUID && x.DocumentType == "Signed Scheme Document"))
                        {
                            Log.Error("File is not uploaded by" + model.DealerId, this);
                            string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/required File", "File is required");
                            ModelState.AddModelError(nameof(model.SignedSchemeDocFile), errorMsg);
                            model.hasError = true;
                        }
                    }
                    if (!model.IsVerifiedByDealer)
                    {
                        string errorMsg = DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/required check", "Verification by dealer is required");
                        ModelState.AddModelError(nameof(model.IsVerifiedByDealer), errorMsg);
                        model.hasError = true;
                    }
                    if (model.hasError)
                    {
                        if (model.CustomerGUID != null)
                        {
                            var CustDetails = dbcontext.CNG_DealerEnquiryRegistrationHistories.Where(x => x.CustomerRegistrationId == model.CustomerGUID && x.DealerCode == model.DealerId).FirstOrDefault();
                            if (CustDetails != null)
                            {
                                if (dbcontext.CNG_CustomerRegistrations.Any(a => a.RegistrationNo == CustDetails.EnquiryNo))
                                {
                                    var CustomerDetails = dbcontext.CNG_CustomerRegistrations.Where(a => a.RegistrationNo == CustDetails.EnquiryNo).FirstOrDefault();
                                    RegisteredInquiryDetails registered = new RegisteredInquiryDetails();
                                    registered.Name = CustomerDetails.FirstName + " " + CustomerDetails.LastName;
                                    registered.MobileNo = CustomerDetails.MobileNo;
                                    registered.VehicleCompany = CustomerDetails.VehicleCompany;
                                    registered.vehicleModel = CustomerDetails.VehicleModel;
                                    registered.VehicleNo = CustomerDetails.VehicleNumber;
                                    registered.VehicleType = CustomerDetails.VehicleType;
                                    registered.YearOfPurchase = CustomerDetails.YearOfPurchase;
                                    registered.IsBSVI = bool.Parse(CustomerDetails.IsBS_VI.ToString());
                                    model.RegisteredInquiryList.Add(registered);
                                    model.IsValidRegistrationNo = true;
                                    model.AadharCardFileLink = CustDetails.AadharCardFile;
                                    model.CNG_CylinderCertiFileLink = CustDetails.CNG_CylinderCertifFile;
                                    model.InvoiceFileLink = CustDetails.InvoiceCopyFile;
                                    model.PAN_CardFileLink = CustDetails.PanCardFile;
                                    model.RC_BookFileLink = CustDetails.RC_bookFile;
                                    model.RTO_App_ReceiptFileLink = CustDetails.RTO_ApplicationReceipt;
                                    model.RTO_CertiFileLink = CustDetails.RTO_CertificateCopy;
                                    model.SignedSchemeDocFileLink = CustDetails.CustSignedSchemeDoc;
                                    model.VehicleInsureanceFileLink = CustDetails.VehicleInsuranceFile;
                                    model.CNG_KitNumber = CustDetails.CNGKitNumber;
                                    model.CurrentStatus = CustDetails.CurrentStatus;
                                    model.CustomerRegistrationNo = CustDetails.EnquiryNo;
                                    return this.View(model);
                                }
                                else
                                {
                                    model.PageInfo = Request.RawUrl;
                                    model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/Invalid Customer Msg", "No record found.");
                                    ModelState.AddModelError(nameof(model.CustomerRegistrationNo), model.Message);
                                    return View(model);
                                    //TempData["DealerFormModel"] = model;
                                    //return Redirect(model.PageInfo);
                                }
                            }
                        }
                        else
                        {
                            model.PageInfo = Request.RawUrl;
                            model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/Invalid Customer Msg", "No record found.");
                            TempData["DealerFormModel"] = model;
                            return Redirect(model.PageInfo);
                        }
                    }
                    adaniGasDBservice.StoreCNGDealerFormAdaniGas(model);
                    if (model.IsSavedIntoDatabase)
                    {
                        model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerForm/DealerFormSuccess", "Data saved successfully for Customer Registration No: " + model.CustomerRegistrationNo);
                        ViewBag.Message = model.Message;
                        return Redirect(GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.CNGDealerAuthenticated));
                    }
                    else
                    {
                        model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerForm/DealerFormSuccess", "Failed to save data for Customer Registration No: " + model.CustomerRegistrationNo);
                        TempData["DealerFormModel"] = model.Message;
                        return Redirect(GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.CNGDealerAuthenticated));
                    }
                }
                else
                {
                    model.Message = DictionaryPhraseRepository.Current.Get("/Controller/Messages/SystemError", "Something has been wrong, Please try again later");
                    TempData["DealerFormModel"] = model;
                    return Redirect(Request.RawUrl);
                }
            }
            catch (Exception e)
            {
                Log.Error("Error at Adani Gas CNG Dealer Inquiry form:" + e.Message, this);
            }
            return View();
        }
        #endregion

        #region Admin Login


        private AdaniGasCNG_AdminLoginInfo CreateCNGAdminLoginInfo(string returnUrl = null)
        {
            return new AdaniGasCNG_AdminLoginInfo
            {
                ReturnUrl = returnUrl,
                //LoginButtons = this.FedAuthLoginRepository.GetAll()
            };
        }
        public ActionResult CNGAdminLogin(string returnUrl = null)
        {
            if (TempData["LoginModel"] != null)
            {
                SessionHelper.UserSession.CNGDealerUserSessionContext = null;
                AdaniGasCNG_AdminLoginInfo Rmodel = TempData["LoginModel"] as AdaniGasCNG_AdminLoginInfo;
                if (!string.IsNullOrEmpty(Rmodel.Message))
                {
                    ModelState.AddModelError(nameof(Rmodel.AdminUserId), Rmodel.Message);
                }
                return View(Rmodel);
            }
            AdaniGasCNG_AdminLoginInfo model = CreateCNGAdminLoginInfo(returnUrl);
            var currentVisiterIP = WebAPIAdaniGas.GetIPAddress();

            if (WebAPIAdaniGas.IsCNGAdminUserLoggedIn() && SessionHelper.UserSession.CNGAdminUserSessionContext != null && SessionHelper.UserSession.CNGAdminUserSessionContext.UserIP != null && currentVisiterIP != null && currentVisiterIP != SessionHelper.UserSession.CNGAdminUserSessionContext.UserIP)
            {
                model.AdminUserId = SessionHelper.UserSession.CNGAdminUserSessionContext.AdminUserId;
                model.MobileNo = SessionHelper.UserSession.CNGAdminUserSessionContext.MobileNo;
            }
            else
            {
                SessionHelper.UserSession.CNGAdminUserSessionContext = null;
                //Session.Clear();
                //Session.Abandon();
                //Session.RemoveAll();
                //if (Request.Cookies["AuthToken"] != null)
                //{
                //    Response.Cookies["AuthToken"].Value = string.Empty;
                //    Response.Cookies["AuthToken"].Expires = DateTime.Now.AddMonths(-20);
                //}
            }

            return View(model);
        }

        [HttpPost]
        //[ValidateModel]
        [ValidateRenderingId]
        [ValidateAntiForgeryToken]
        public ActionResult CNGAdminLogin(AdaniGasCNG_AdminLoginInfo model, string sendOTP, string signIn, string ResendOTP)
        {
            Log.Info("Insert AdaniHousingAdminLogin", "Start");
            try
            {
                model.PageInfo = Request.RawUrl;
                if ((sendOTP != null && sendOTP == DictionaryPhraseRepository.Current.Get("/Controller/CNGAdminLogin/sendOTP", "sendOTP")) || (ResendOTP != null && ResendOTP == DictionaryPhraseRepository.Current.Get("/Controller/CNGAdminLogin/ResendOTP", "ResendOTP")))
                {
                    if (string.IsNullOrEmpty(model.AdminUserId))
                    {
                        this.ModelState.AddModelError(nameof(model.AdminUserId), DictionaryPhraseRepository.Current.Get("/Controller/Messages/EmptyAdminId", "Please enter User Id"));
                        return this.View(model);
                    }
                    using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                    {
                        if (dbcontext.CNG_AdminUserDetails.Any(a => a.UserID == model.AdminUserId))
                        {
                            var AdminUserInfo = dbcontext.CNG_AdminUserDetails.Where(a => a.UserID == model.AdminUserId).FirstOrDefault();
                            AdaniGasOTPModel OTPmodel = new AdaniGasOTPModel();
                            Log.Info("Adani Gas CNG Admin User Login Send OTP Start:" + AdminUserInfo.UserMobileNo, this);
                            OTPmodel.MobileNo = AdminUserInfo.UserMobileNo;
                            OTPmodel.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");
                            var OTPresponse = objWebAPIAdaniGas.SendOtp(OTPmodel);
                            if (OTPresponse.MessageFlag == "S")
                            {
                                model.IsOTPSend = true;
                                ModelState.AddModelError(nameof(model.OTP), OTPresponse.Message);
                                return this.View(model);
                            }
                            else
                            {
                                model.Message = OTPresponse.Message;
                                TempData["LoginModel"] = model;
                                return Redirect(Request.RawUrl);
                            }
                        }
                        else
                        {
                            model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/Invalid UserId Msg", "User not found.");
                            TempData["LoginModel"] = model;
                            return Redirect(Request.RawUrl);
                        }
                    }
                }
                else if (signIn != null && signIn == DictionaryPhraseRepository.Current.Get("/Controller/CNGAdminLogin/signIn", "signIn"))
                {
                    string OTPValidation = DictionaryPhraseRepository.Current.Get("/Controller/CNGAdminLogin/OtpRegexValidation", @"^\d{4}$");
                    Regex OTPregex = new Regex(OTPValidation);
                    if (string.IsNullOrEmpty(model.AdminUserId))
                    {
                        this.ModelState.AddModelError(nameof(model.AdminUserId), DictionaryPhraseRepository.Current.Get("/Controller/Messages/EmptyUserId", "Please enter User Id"));
                        return this.View(model);
                    }
                    if (string.IsNullOrEmpty(model.OTP))
                    {
                        ModelState.AddModelError(nameof(model.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/EmptyOTP", "Please enter OTP."));
                        model.IsOTPSend = true;
                        return View(model);
                    }
                    if (!string.IsNullOrEmpty(model.OTP) && !string.IsNullOrWhiteSpace(model.OTP))
                    {
                        model.OTP = model.OTP.Trim();
                        var OTPToValidate = ModelState["OTP"];
                        if (OTPToValidate == null || //exclude if this could not happen or not to be counted as error
                            (OTPToValidate != null && OTPToValidate.Errors.Any())
                           )
                        {
                            model.IsOTPSend = true;
                            ModelState.AddModelError(nameof(model.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTPerror", "Invalid OTP"));
                            return View(model);
                        }
                        //var MobileToValidate = ModelState["Mobile"];
                        //if (MobileToValidate == null || //exclude if this could not happen or not to be counted as error
                        //    (MobileToValidate != null && MobileToValidate.Errors.Any())
                        //   )
                        //{
                        //    model.IsOTPSend = false;
                        //    ModelState.AddModelError(nameof(model.MobileNo), DictionaryPhraseRepository.Current.Get("/Controller/Messages/MobileError", "Invalid Mobile No"));
                        //    return View(model);
                        //}
                        using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                        {
                            if (dbcontext.CNG_AdminUserDetails.Any(a => a.UserID == model.AdminUserId))
                            {
                                var DealerInfo = dbcontext.CNG_AdminUserDetails.Where(a => a.UserID == model.AdminUserId).FirstOrDefault();
                                model.MobileNo = DealerInfo.UserMobileNo;
                                model.UserName = DealerInfo.UserName;
                            }
                            else
                            {
                                model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/Invalid AdminUserId Msg", "User not found.");
                                TempData["LoginModel"] = model;
                                return Redirect(Request.RawUrl);
                            }
                        }
                        var OTPvalidResp = objWebAPIAdaniGas.ValidateOtp(model.MobileNo, model.OTP);
                        if (OTPvalidResp != null)
                        {
                            if (OTPvalidResp.Msg_Flag == "S")
                            {
                                model.IsOTPValid = true;
                                return CNGAdminLogin(model, redirectUrl => new RedirectResult(redirectUrl));
                            }
                            else if (OTPvalidResp.Msg_Flag == "F")
                            {
                                model.IsOTPValid = false;
                                model.IsOTPSend = true;
                                ModelState.AddModelError(nameof(model.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTPerror", "Invalid OTP"));
                                return View(model);
                            }
                        }
                        else
                        {
                            model.IsOTPSend = true;
                            ModelState.AddModelError(nameof(model.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTP validation error", "OTP validation error. Please contact to administrator"));
                            return View(model);
                        }
                        return View(model);
                    }
                    else
                    {
                        ModelState.AddModelError(nameof(model.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTPerror", "Invalid OTP"));
                        return View(model);
                    }
                }
                else
                {
                    string errormsg = !string.IsNullOrEmpty(model.Message) ? model.Message : DictionaryPhraseRepository.Current.Get("/Controller/Messages/SystemError", "Something has been wrong, Please try again later");
                    model.Message = errormsg;
                    TempData["LoginModel"] = model;
                    return Redirect(Request.RawUrl);
                }
            }
            catch (Exception e)
            {
                Log.Error("Error in CNGAdminLogin - login :" + model.AdminUserId + e.Message, this);
                string errormsg = !string.IsNullOrEmpty(model.Message) ? model.Message : DictionaryPhraseRepository.Current.Get("/Controller/Messages/SystemError", "Something has been wrong, Please try again later");
                model.Message = errormsg;
                TempData["LoginModel"] = model;
                return Redirect(Request.RawUrl);
            }
        }

        protected virtual ActionResult CNGAdminLogin(AdaniGasCNG_AdminLoginInfo loginInfo, Func<string, ActionResult> redirectAction)
        {
            try
            {
                //string loginType = WebAPIAdaniGas.LoginModuleType(System.Web.HttpContext.Current.Request.Url.AbsolutePath.ToLower());

                //AdaniGasCNG_DealerLoginInfo loginDetails = objWebAPIAdaniGas.Login(loginInfo.LoginName, loginInfo.Password);
                //if (string.IsNullOrEmpty(loginDetails.CustomerID))
                //{
                //    this.ModelState.AddModelError(nameof(loginInfo.Password), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/API Not Valid", "Unable to fetch data from PI Service."));
                //    return this.View(loginInfo);
                //}
                if (string.IsNullOrEmpty(loginInfo.AdminUserId))
                {
                    this.ModelState.AddModelError(nameof(loginInfo.AdminUserId), DictionaryPhraseRepository.Current.Get("/Controller/Messages/EmptyDealerId", "Please enter Dealer Id"));
                    return this.View(loginInfo);
                }
                using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                {
                    if (dbcontext.CNG_AdminUserDetails.Any(a => a.UserID == loginInfo.AdminUserId))
                    {
                        var UserInfo = dbcontext.CNG_AdminUserDetails.Where(a => a.UserID == loginInfo.AdminUserId).FirstOrDefault();
                        loginInfo.MobileNo = UserInfo.UserMobileNo;
                    }
                    else
                    {
                        loginInfo.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGAdminLogin/Invalid UserId Msg", "User not found.");
                        TempData["LoginModel"] = loginInfo;
                        return Redirect(loginInfo.PageInfo);
                    }
                }
                if (!loginInfo.IsOTPValid) // unauthorized
                {
                    loginInfo.IsOTPSend = true;
                    ModelState.AddModelError(nameof(loginInfo.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTPerror", "Invalid OTP"));
                    return View(loginInfo);
                }
                else
                {
                    using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                    {
                        if (dbcontext.CNG_AdminUserDetails.Any(a => a.UserID == loginInfo.AdminUserId))
                        {
                            var UserInfo = dbcontext.CNG_AdminUserDetails.Where(a => a.UserID == loginInfo.AdminUserId).FirstOrDefault();
                            loginInfo.UserName = UserInfo.UserName;
                        }
                        else
                        {
                            loginInfo.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGAdminLogin/Invalid UserId Msg", "User not found.");
                            TempData["LoginModel"] = loginInfo;
                            return Redirect(loginInfo.PageInfo);
                        }
                    }
                    string guid = Guid.NewGuid().ToString();
                    //Creating second session for the same user and assigning a randmon GUID

                    SessionHelper.UserSession.CNGAdminUserSessionContext = new AdaniGasCNG_AdminLoginModel
                    {
                        UserIP = WebAPIAdaniGas.GetIPAddress(),
                        IsLoggedIn = true,
                        LoginName = loginInfo.UserName,
                        LoginUser = loginInfo.UserName,
                        OTP = loginInfo.OTP,
                        AdminUserId = loginInfo.AdminUserId,
                        MobileNo = loginInfo.MobileNo,
                        AuthToken = guid
                    };
                    Response.Cookies.Add(new System.Web.HttpCookie("AuthToken", guid));
                }

                string redirectUrl = loginInfo.ReturnUrl;
                if (string.IsNullOrEmpty(redirectUrl))
                {
                    redirectUrl = GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.CNGAdminUserAuthenticated);
                }

                return redirectAction(redirectUrl);
            }
            catch (Exception ex)
            {
                Log.Error("CNG Admin LoginAdaniGas Method Error - for User - " + loginInfo.UserName + " , " + loginInfo.MobileNo, ex.Message);
                loginInfo.Message = ex.Message;
                TempData["LoginModel"] = loginInfo;
                return Redirect(loginInfo.PageInfo);
            }
        }

        [RedirectUnAuthenticatedAdaniGasCNGAdminLogin]
        public ActionResult CNGAdminDashboard()
        {
            AdaniGasCNG_AdminLoginInfo loginInfo = new AdaniGasCNG_AdminLoginInfo();
            AdaniGasCNG_AdminDashboardModel model = new AdaniGasCNG_AdminDashboardModel();
            if (TempData["DashboardModel"] != null)
            {
                String Rmodel = TempData["DashboardModel"] as String;
                if (!string.IsNullOrEmpty(Rmodel))
                {
                    model.Message = Rmodel;
                }
            }
            model.UserMobileNo = SessionHelper.UserSession.CNGAdminUserSessionContext.MobileNo;
            model.UserName = SessionHelper.UserSession.CNGAdminUserSessionContext.LoginName;
            model.UserId = SessionHelper.UserSession.CNGAdminUserSessionContext.AdminUserId;
            using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
            {
                if (dbcontext.CNG_AdminUserDetails.Any(a => a.UserID == model.UserId))
                {
                    var InquiryInfo = "";
                    if (InquiryInfo != null)
                    {
                        return this.View(model);
                    }
                    else
                    {
                        return this.View(model);
                    }
                }
                else
                {
                    loginInfo.PageInfo = GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.CNGDealerAuthenticated);
                    loginInfo.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGAdminLogin/Invalid UserId Msg", "User not found.");
                    TempData["DashboardModel"] = loginInfo;
                    return Redirect(loginInfo.PageInfo);
                }
            }
        }
        [RedirectUnAuthenticatedAdaniGasCNGAdminLogin]
        public ActionResult CNGAdminUserForm()
        {
            if (TempData["AdminFormModel"] != null)
            {
                AdaniGasCNG_AdminFormModel Rmodel = TempData["AdminFormModel"] as AdaniGasCNG_AdminFormModel;
                if (!string.IsNullOrEmpty(Rmodel.Message))
                {
                    ModelState.AddModelError(nameof(Rmodel.CustomerRegistrationNo), Rmodel.Message);
                }
                return View(Rmodel);
            }
            AdaniGasCNG_AdminLoginInfo loginInfo = new AdaniGasCNG_AdminLoginInfo();
            AdaniGasCNG_AdminFormModel model = new AdaniGasCNG_AdminFormModel();
            model.UserMobileNo = SessionHelper.UserSession.CNGAdminUserSessionContext.MobileNo;
            model.UserName = SessionHelper.UserSession.CNGAdminUserSessionContext.LoginUser;
            model.UserId = SessionHelper.UserSession.CNGAdminUserSessionContext.AdminUserId;
            using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
            {
                if (dbcontext.CNG_AdminUserDetails.Any(a => a.UserID == model.UserId))
                {
                    if (Request.QueryString["RID"] != null)
                    {
                        var CustDetails = dbcontext.CNG_DealerEnquiryRegistrationHistories.Where(x => x.CustomerRegistrationId == model.CustomerGUID && x.DealerCode == model.DealerId);
                        if (CustDetails != null)
                        {
                            return View(model);
                        }
                    }
                    return this.View(model);
                }
                else
                {
                    loginInfo.PageInfo = GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.CNGAdminUserAuthenticated);
                    loginInfo.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGDealerLogin/Invalid User id Msg", "User not found.");
                    TempData["LoginModel"] = loginInfo;
                    return Redirect(loginInfo.PageInfo);
                }
            }
        }
        [RedirectUnAuthenticatedAdaniGasCNGAdminLogin]
        [HttpPost]
        public ActionResult CNGAdminUserForm(AdaniGasCNG_AdminFormModel model, string Submit)
        {
            try
            {
                Sitecore.Data.Database db = Sitecore.Configuration.Factory.GetDatabase("web");
                Data.Items.Item StatusList = db.GetItem("{39044906-1B51-408A-B3FA-9BFED8A36EB8}");
                model.StatusList = StatusList.GetChildren().ToList().Select(x => new TextValueItem()
                {
                    Text = x.Fields["Text"].Value,
                    Value = x.Fields["Value"].Value
                }).ToList();
                AdaniGasCNG_AdminLoginInfo loginInfo = new AdaniGasCNG_AdminLoginInfo();
                model.UserMobileNo = SessionHelper.UserSession.CNGAdminUserSessionContext.MobileNo;
                model.UserName = SessionHelper.UserSession.CNGAdminUserSessionContext.LoginUser;
                model.UserId = SessionHelper.UserSession.CNGAdminUserSessionContext.AdminUserId;
                if (Submit != null && Submit == DictionaryPhraseRepository.Current.Get("/Controller/CNGAdminForm/CNGAdminSearchBtn", "CNGAdminSearchBtn"))
                {
                    if (string.IsNullOrEmpty(model.CustomerRegistrationNo))
                    {
                        Log.Info("Adani Gas CNG Dealer Form Customer Registration form is empty", this);
                        model.Message = DictionaryPhraseRepository.Current.Get("/Controller/Messages/Empty Registration No", "Please enter customer registration no");
                        ModelState.AddModelError(nameof(model.CustomerRegistrationNo), model.Message);
                        return View(model);
                    }
                    using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                    {
                        if (dbcontext.CNG_DealerEnquiryRegistrationHistories.Any(a => a.EnquiryNo == model.CustomerRegistrationNo))
                        {
                            var Record = dbcontext.CNG_DealerEnquiryRegistrationHistories.Where(a => a.EnquiryNo == model.CustomerRegistrationNo).FirstOrDefault();
                            var CustomerDetails = dbcontext.CNG_CustomerRegistrations.Where(a => a.RegistrationNo == model.CustomerRegistrationNo).FirstOrDefault();
                            var dealerInfo = dbcontext.CNG_RegisteredDealerInfos.Where(a => a.DealerId == Record.DealerCode).FirstOrDefault();
                            AdaniGasCNG_CustomerRegistration registered = new AdaniGasCNG_CustomerRegistration();
                            registered.FirstName = CustomerDetails.FirstName;
                            registered.LastName = CustomerDetails.LastName;
                            registered.VehicleType = CustomerDetails.VehicleType;
                            registered.Year = CustomerDetails.YearOfPurchase;
                            registered.Email = CustomerDetails.EmailId ?? string.Empty;
                            registered.Mobile = CustomerDetails.MobileNo;
                            registered.CurrentAddressLine1 = CustomerDetails.CurrentAddressLine1 ?? string.Empty;
                            registered.CurrentAddressLine2 = CustomerDetails.CurrentAddressLine2 ?? string.Empty;
                            registered.CurrentArea = CustomerDetails.CurrentArea ?? string.Empty;
                            registered.CurrentCity = CustomerDetails.CurrentCity ?? string.Empty;
                            registered.CurrentState = CustomerDetails.CurrentState ?? string.Empty;
                            registered.CurrentPincode = CustomerDetails.CurrentPincode;
                            registered.RegisteredAddressLine1 = CustomerDetails.RegAddressLine1 ?? string.Empty;
                            registered.RegisteredAddressLine2 = CustomerDetails.RegAddressLine2 ?? string.Empty;
                            registered.RegisteredArea = CustomerDetails.RegArea ?? string.Empty;
                            registered.RegisteredCity = CustomerDetails.RegCity ?? string.Empty;
                            registered.RegisteredState = CustomerDetails.RegState ?? string.Empty;
                            registered.RegisteredPincode = CustomerDetails.RegPincode;
                            registered.VehicleCompany = CustomerDetails.VehicleCompany;
                            registered.VehicleModel = CustomerDetails.VehicleModel;
                            registered.VehicleNo = CustomerDetails.VehicleNumber;
                            registered.SubmittedOn = DateTime.Parse(CustomerDetails.SubmittedOn.ToString());
                            registered.IsBSVI = bool.Parse(CustomerDetails.IsBS_VI.ToString());
                            model.RegisteredInquiryList.Add(registered);
                            model.IsValidRegistrationNo = true;
                            model.CreatedOn = DateTime.Parse(Record.CreatedOn.ToString());
                            model.CurrentStatus = Record.CurrentStatus ?? string.Empty;
                            model.VehicleInsureanceFileLink = Record.VehicleInsuranceFile ?? "File not found";
                            model.IsValidVehicleInsureanceFile = GetFileReviewUpdate(Record.VehicleInsuranceFile, Request.Url.Host);
                            model.AadharCardFileLink = Record.AadharCardFile ?? "File not found";
                            model.IsValidAadharCardFile = GetFileReviewUpdate(Record.AadharCardFile, Request.Url.Host);
                            model.CNG_CylinderCertiFileLink = Record.CNG_CylinderCertifFile ?? "File not found";
                            model.IsValidCNG_CylinderCertiFile = GetFileReviewUpdate(Record.CNG_CylinderCertifFile, Request.Url.Host);
                            model.CNG_KitNumber = Record.CNGKitNumber ?? string.Empty;
                            model.InvoiceFileLink = Record.InvoiceCopyFile ?? "File not found";
                            model.IsValidInvoiceFile = GetFileReviewUpdate(Record.InvoiceCopyFile, Request.Url.Host);
                            model.PAN_CardFileLink = Record.PanCardFile ?? "File not found";
                            model.IsValidPAN_CardFile = GetFileReviewUpdate(Record.PanCardFile, Request.Url.Host);
                            model.RC_BookFileLink = Record.RC_bookFile ?? "File not found";
                            model.IsValidRC_BookFile = GetFileReviewUpdate(Record.RC_bookFile, Request.Url.Host);
                            model.RTO_App_ReceiptFileLink = Record.RTO_ApplicationReceipt ?? "File not found";
                            model.IsValidRTO_App_ReceiptFile = GetFileReviewUpdate(Record.RTO_ApplicationReceipt, Request.Url.Host);
                            model.RTO_CertiFileLink = Record.RTO_CertificateCopy ?? "File not found";
                            model.IsValidRTO_CertiFile = GetFileReviewUpdate(Record.RTO_CertificateCopy, Request.Url.Host);
                            model.SignedSchemeDocFileLink = Record.CustSignedSchemeDoc ?? "File not found";
                            model.IsValidSignedSchemeDocFile = GetFileReviewUpdate(Record.CustSignedSchemeDoc, Request.Url.Host);
                            model.DealerId = Record.CreatedBy;
                            model.DealerName = dealerInfo.DealerName;
                            model.IsVerifiedByDealer = bool.Parse(Record.DocumentsVerified.ToString());
                            return this.View(model);

                        }
                        else
                        {
                            model.PageInfo = Request.RawUrl;
                            model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGAdminLogin/Invalid Customer Msg", "No record found.");
                            ModelState.AddModelError(nameof(model.CustomerRegistrationNo), model.Message);
                            return View(model);
                            //TempData["AdminFormModel"] = model;
                            //return Redirect(model.PageInfo);
                        }
                    }
                }
                else if (Submit != null && Submit == DictionaryPhraseRepository.Current.Get("/Controller/CNGAdminForm/CNGAdminSaveBtn", "CNGAdminSaveBtn"))
                {
                    if (!ModelState.IsValid)
                    {
                        return View(model);
                    }
                    model.CurrentStatus = "Saved by Admin";
                    model.PageInfo = Request.RawUrl;
                    //adaniGasDBservice.StoreCNGDealerFormAdaniGas(model);
                    if (model.IsSavedIntoDatabase)
                    {
                        model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGAdminForm/AdminFormSuccess", "You have successfully submitted data for Customer Registration No: " + model.CustomerRegistrationNo);
                        TempData["AdminFormModel"] = model.Message;
                        return Redirect(GetRedirectUrlService.GetRedirectUrl(AuthenticationStatus.CNGDealerAuthenticated));
                    }
                }
                else if (Submit != null && Submit == DictionaryPhraseRepository.Current.Get("/Controller/CNGAdminForm/SubmitForm", "CNGAdminSubmitBtn"))
                {
                    AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext();
                    if (dbcontext.CNG_DealerEnquiryRegistrationHistories.Any(a => a.EnquiryNo == model.CustomerRegistrationNo))
                    {
                        var Record = dbcontext.CNG_DealerEnquiryRegistrationHistories.Where(a => a.EnquiryNo == model.CustomerRegistrationNo).FirstOrDefault();
                        var CustomerDetails = dbcontext.CNG_CustomerRegistrations.Where(a => a.RegistrationNo == model.CustomerRegistrationNo).FirstOrDefault();
                        var dealerInfo = dbcontext.CNG_RegisteredDealerInfos.Where(a => a.DealerId == Record.DealerCode).FirstOrDefault();
                        AdaniGasCNG_CustomerRegistration registered = new AdaniGasCNG_CustomerRegistration();
                        registered.FirstName = CustomerDetails.FirstName;
                        registered.LastName = CustomerDetails.LastName;
                        registered.VehicleType = CustomerDetails.VehicleType;
                        registered.Year = CustomerDetails.YearOfPurchase;
                        registered.Email = CustomerDetails.EmailId ?? string.Empty;
                        registered.Mobile = CustomerDetails.MobileNo;
                        registered.CurrentAddressLine1 = CustomerDetails.CurrentAddressLine1 ?? string.Empty;
                        registered.CurrentAddressLine2 = CustomerDetails.CurrentAddressLine2 ?? string.Empty;
                        registered.CurrentArea = CustomerDetails.CurrentArea ?? string.Empty;
                        registered.CurrentCity = CustomerDetails.CurrentCity ?? string.Empty;
                        registered.CurrentState = CustomerDetails.CurrentState ?? string.Empty;
                        registered.CurrentPincode = CustomerDetails.CurrentPincode;
                        registered.RegisteredAddressLine1 = CustomerDetails.RegAddressLine1 ?? string.Empty;
                        registered.RegisteredAddressLine2 = CustomerDetails.RegAddressLine2 ?? string.Empty;
                        registered.RegisteredArea = CustomerDetails.RegArea ?? string.Empty;
                        registered.RegisteredCity = CustomerDetails.RegCity ?? string.Empty;
                        registered.RegisteredState = CustomerDetails.RegState ?? string.Empty;
                        registered.RegisteredPincode = CustomerDetails.RegPincode;
                        registered.VehicleCompany = CustomerDetails.VehicleCompany;
                        registered.VehicleModel = CustomerDetails.VehicleModel;
                        registered.VehicleNo = CustomerDetails.VehicleNumber;
                        registered.SubmittedOn = DateTime.Parse(CustomerDetails.SubmittedOn.ToString());
                        registered.IsBSVI = bool.Parse(CustomerDetails.IsBS_VI.ToString());
                        model.RegisteredInquiryList.Add(registered);
                        model.IsValidRegistrationNo = true;
                        model.CreatedOn = DateTime.Parse(Record.CreatedOn.ToString());
                        model.CurrentStatus = Record.CurrentStatus ?? string.Empty;
                        model.VehicleInsureanceFileLink = Record.VehicleInsuranceFile ?? "File not found";
                        model.IsValidVehicleInsureanceFile = GetFileReviewUpdate(Record.VehicleInsuranceFile, Request.Url.Host);
                        model.AadharCardFileLink = Record.AadharCardFile ?? "File not found";
                        model.IsValidAadharCardFile = GetFileReviewUpdate(Record.AadharCardFile, Request.Url.Host);
                        model.CNG_CylinderCertiFileLink = Record.CNG_CylinderCertifFile ?? "File not found";
                        model.IsValidCNG_CylinderCertiFile = GetFileReviewUpdate(Record.CNG_CylinderCertifFile, Request.Url.Host);
                        model.CNG_KitNumber = Record.CNGKitNumber ?? string.Empty;
                        model.InvoiceFileLink = Record.InvoiceCopyFile ?? "File not found";
                        model.IsValidInvoiceFile = GetFileReviewUpdate(Record.InvoiceCopyFile, Request.Url.Host);
                        model.PAN_CardFileLink = Record.PanCardFile ?? "File not found";
                        model.IsValidPAN_CardFile = GetFileReviewUpdate(Record.PanCardFile, Request.Url.Host);
                        model.RC_BookFileLink = Record.RC_bookFile ?? "File not found";
                        model.IsValidRC_BookFile = GetFileReviewUpdate(Record.RC_bookFile, Request.Url.Host);
                        model.RTO_App_ReceiptFileLink = Record.RTO_ApplicationReceipt ?? "File not found";
                        model.IsValidRTO_App_ReceiptFile = GetFileReviewUpdate(Record.RTO_ApplicationReceipt, Request.Url.Host);
                        model.RTO_CertiFileLink = Record.RTO_CertificateCopy ?? "File not found";
                        model.IsValidRTO_CertiFile = GetFileReviewUpdate(Record.RTO_CertificateCopy, Request.Url.Host);
                        model.SignedSchemeDocFileLink = Record.CustSignedSchemeDoc ?? "File not found";
                        model.IsValidSignedSchemeDocFile = GetFileReviewUpdate(Record.CustSignedSchemeDoc, Request.Url.Host);
                        model.DealerId = Record.CreatedBy;
                        model.DealerName = dealerInfo.DealerName;
                        model.IsVerifiedByDealer = bool.Parse(Record.DocumentsVerified.ToString());

                    }
                    else
                    {
                        model.PageInfo = Request.RawUrl;
                        model.Message = DictionaryPhraseRepository.Current.Get("/Controller/CNGAdminLogin/Invalid Customer Msg", "No record found.");
                        ModelState.AddModelError(nameof(model.CustomerRegistrationNo), model.Message);
                        return View(model);
                        //TempData["AdminFormModel"] = model;
                        //return Redirect(model.PageInfo);
                    }
                    if (!ModelState.IsValid)
                    {
                        return View(model);
                    }
                    if (string.IsNullOrEmpty(model.UpdatedStatus))
                    {
                        ModelState.AddModelError(nameof(model.UpdatedStatus), DictionaryPhraseRepository.Current.Get("/Controller/Messages/UpdatedStatus", "Select status"));
                        return View(model);
                    }
                    model.PageInfo = Request.RawUrl;
                    var History = dbcontext.CNG_DealerEnquiryRegistrationHistories.Where(a => a.EnquiryNo == model.CustomerRegistrationNo).FirstOrDefault();
                    History.CurrentStatus = model.CurrentStatus;
                    History.UpdatesHistory = History.UpdatesHistory ?? "" + model.CurrentStatus + "|" + model.UserName + "|" + DateTime.Now;
                    dbcontext.SubmitChanges();
                    //adaniGasDBservice.StoreCNGAdminFormAdaniGas(model);
                    ViewBag.Message = "Updated successfully";
                    return View(model);
                }
                else
                {
                    model.Message = DictionaryPhraseRepository.Current.Get("/Controller/Messages/SystemError", "Something has been wrong, Please try again later");
                    TempData["AdminFormModel"] = model;
                    return Redirect(Request.RawUrl);
                }
            }
            catch (Exception e)
            {
                Log.Error("Error at Adani Gas CNG Admin Inquiry form:" + e.Message, this);
            }
            return View();
        }
        #endregion
        #endregion

        public ActionResult CNGDealerRegistration()
        {
            AdaniGasCNG_DealerRegistration model = new AdaniGasCNG_DealerRegistration();
            return this.View(model);
        }
        [HttpPost]
        public ActionResult CNGDealerRegistration(AdaniGasCNG_DealerRegistration model, string SubmitBtn, string ValidateOTP)
        {

            Log.Info("Insert AdaniGas CNGDealerRegistration", "Start");
            try
            {

                if (!string.IsNullOrEmpty(ValidateOTP) && ValidateOTP == "validateOTP")
                {
                    if (!string.IsNullOrEmpty(model.OTP.Trim()))
                    {
                        var OTPToValidate = ModelState["OTP"];
                        if (OTPToValidate == null || //exclude if this could not happen or not to be counted as error
                            (OTPToValidate != null && OTPToValidate.Errors.Any())
                           )
                        {
                            model.IsOTPValid = false;
                            ModelState.AddModelError(nameof(model.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTPerror", "Invalid OTP"));
                            return View(model);
                        }
                        var MobileToValidate = ModelState["Mobile"];
                        if (MobileToValidate == null || //exclude if this could not happen or not to be counted as error
                            (MobileToValidate != null && MobileToValidate.Errors.Any())
                           )
                        {
                            model.IsOTPValid = false;
                            ModelState.AddModelError(nameof(model.Mobile), DictionaryPhraseRepository.Current.Get("/Controller/Messages/MobileError", "Invalid Mobile No"));
                            return View(model);
                        }
                        var OTPvalidResp = objWebAPIAdaniGas.ValidateOtp(model.Mobile, model.OTP);
                        if (OTPvalidResp != null)
                        {
                            if (OTPvalidResp.Msg_Flag == "S")
                            {
                                model.IsOTPValid = true;
                                return RedirectPermanent(this.UserProfileService.GetPageURL(Templates.AdaniGas.DealerDetails));
                            }
                            else if (OTPvalidResp.Msg_Flag == "F")
                            {
                                model.IsOTPValid = false;
                                ModelState.AddModelError(nameof(model.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTPerror", "Invalid OTP"));
                                return View(model);
                            }
                        }
                        return View(model);
                    }
                    else
                    {
                        ModelState.AddModelError(nameof(model.OTP), DictionaryPhraseRepository.Current.Get("/Controller/Messages/OTPerror", "Invalid OTP"));
                        return View(model);
                    }
                }
                else
                {
                    ModelState.Clear();
                    return View(model);
                }
            }
            catch (Exception ex)
            {
                Log.Error(string.Concat("Failed to Submit AdaniGas CNGcustomerRegistration Form : ", ex.ToString()), this);
                return View(model);
            }



        }
        [HttpGet]
        public ActionResult CNGDealerDetails()
        {
            AdaniGasCNG_DealerDetails model = new AdaniGasCNG_DealerDetails();
            return this.View("~/Views/AdaniGas/CNGDealerDetails.cshtml", model);
        }
        [HttpPost]
        public ActionResult CNGDealerDetails(AdaniGasCNG_DealerDetails model, string VendorDetails, string SubmitApplication)
        {
            AdadniGasDBModelDataContext dataContext = new AdadniGasDBModelDataContext();
            if (!string.IsNullOrEmpty(VendorDetails))
            {
                if (model.VendorNumber != null)
                {
                    var lstdealerdetails = dataContext.CNG_CustomerRegistrations.Where(val => val.RegistrationNo == model.VendorNumber).FirstOrDefault();

                    try
                    {

                        if (lstdealerdetails != null)
                        {
                            model.Name = lstdealerdetails.FirstName + lstdealerdetails.LastName;
                            model.Email = lstdealerdetails.EmailId;
                            model.MobileNumber = lstdealerdetails.MobileNo;
                            model.VehicleCompany = lstdealerdetails.VehicleCompany;
                            model.VehicleModel = lstdealerdetails.VehicleModel;
                            model.VehicleType = lstdealerdetails.VehicleType;
                            model.VehicleNumber = lstdealerdetails.VehicleNumber;
                            model.IsVendorNumberValid = true;
                        }
                        else
                        {
                            model.IsVendorNumberValid = false;
                            ((dynamic)base.ViewBag).Message = "No results found";
                            return this.View("~/Views/AdaniGas/CNGDealerDetails.cshtml", model);
                        }

                    }
                    catch (Exception ex)
                    {
                        Log.Error(string.Concat("Failed to Get AdaniGas Dealer Form : ", ex.ToString()), this);
                        return this.View("~/Views/AdaniGas/CNGDealerDetails.cshtml");
                    }

                }
            }

            if (!string.IsNullOrEmpty(SubmitApplication))
            {
                model.Id = Guid.NewGuid();
                AdaniGasNewConnectionServices services = new AdaniGasNewConnectionServices();
                model.RegistrationNumber = services.GetUniqueRegNo();
                CNG_DealerDetailsSubmit details = new CNG_DealerDetailsSubmit();
                {

                    details.Id = model.Id;
                    details.VendorNumber = model.VendorNumber;
                    details.RegistrationNo = model.RegistrationNumber;
                    details.Name = model.Name;
                    details.MobileNumber = model.MobileNumber;
                    details.CNGKitNumber = model.CNGKitNumber;
                    details.PageUrl = model.PageInfo;
                    details.FormName = model.FormName;
                    details.SubmittedOn = new DateTime?(DateTime.Now);
                };
                if (model.UploadVehicleInsurance != null && model.UploadVehicleInsurance.ContentLength > 0)
                {
                    byte[] bytes;
                    HttpPostedFileBase UploadVehicleInsurance = model.UploadVehicleInsurance;
                    var supportedTypes = new[] { "pdf" };
                    AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                    var fileExt = System.IO.Path.GetExtension(UploadVehicleInsurance.FileName).Substring(1);
                    if (!supportedTypes.Contains(fileExt.ToLower()))
                    {
                        Log.Error("File Extension Is InValid - Only Upload DOC/PDF/DOCX File", this);
                        base.ModelState.AddModelError("UploadVehicleInsurance", DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Extension Is InValid - Only Upload DOC/PDF/DOCX File"));

                        return this.View("~/Views/AdaniGas/CNGDealerDetails.cshtml", model);
                    }
                    else if (UploadVehicleInsurance.ContentLength > ((4 * 1024) * 1024))
                    {
                        Log.Error("File size Should Be UpTo 4 MB", this);
                        base.ModelState.AddModelError("UploadVehicleInsurance", DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB"));
                        return this.View("~/Views/AdaniGas/CNGDealerDetails.cshtml", model);
                    }
                    else if (!fu.FileMIMEisValid(UploadVehicleInsurance))
                    {
                        Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                        base.ModelState.AddModelError("UploadVehicleInsurance", DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File"));
                        return this.View("~/Views/AdaniGas/CNGDealerDetails.cshtml", model);
                    }
                    HttpPostedFileBase file = model.UploadVehicleInsurance;

                    using (BinaryReader br = new BinaryReader(file.InputStream))
                    {
                        bytes = br.ReadBytes(file.ContentLength);
                    }

                    details.UploadVehicleInsurance = bytes;
                    details.UploadVehicleInsuranceLink = model.PageInfo.Replace(model.UploadVehicleInsuranceLink, "/") +
                        "api/AdaniGas/DownloadInsurance?id=" + model.Id + "&RegNo=" + model.RegistrationNumber;
                    details.UploadVehicleInsuranceFileType = UploadVehicleInsurance.ContentType;
                    details.UploadVehicleInsuranceFileName = model.Name + "_" + model.MobileNumber;

                }
                if (model.UploadRCBook != null && model.UploadRCBook.ContentLength > 0)
                {
                    HttpPostedFileBase UploadRCBook = model.UploadRCBook;
                    var supportedTypes = new[] { "pdf" };
                    AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                    var fileExt = System.IO.Path.GetExtension(UploadRCBook.FileName).Substring(1);
                    if (!supportedTypes.Contains(fileExt.ToLower()))
                    {
                        Log.Error("File Extension Is InValid - Only Upload DOC/PDF/DOCX File", this);
                        base.ModelState.AddModelError("UploadRCBook", DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Extension Is InValid - Only Upload DOC/PDF/DOCX File"));

                        return this.View("~/Views/AdaniGas/CNGDealerDetails.cshtml", model);
                    }
                    else if (UploadRCBook.ContentLength > ((4 * 1024) * 1024))
                    {
                        Log.Error("File size Should Be UpTo 4 MB", this);
                        base.ModelState.AddModelError("UploadRCBook", DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB"));
                        return this.View("~/Views/AdaniGas/CNGDealerDetails.cshtml", model);
                    }
                    else if (!fu.FileMIMEisValid(UploadRCBook))
                    {
                        Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                        base.ModelState.AddModelError("UploadRCBook", DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File"));
                        return this.View("~/Views/AdaniGas/CNGDealerDetails.cshtml", model);
                    }
                    HttpPostedFileBase files = model.UploadVehicleInsurance;

                    byte[] bytes2;

                    using (BinaryReader br = new BinaryReader(files.InputStream))
                    {
                        bytes2 = br.ReadBytes(files.ContentLength);
                    }

                    details.UploadRCBook = bytes2;
                    details.UploadRCBookLink = model.PageInfo.Replace(model.UploadRCBookLink, "/") +
                        "api/AdaniGas/DownloadRC?id=" + model.Id + "&RegNo=" + model.RegistrationNumber;
                    details.UploadRCBookFileType = UploadRCBook.ContentType;
                    details.UploadRCBookFileName = model.Name + "_" + model.MobileNumber;
                }

                if (model.UploadAadharCard != null && model.UploadAadharCard.ContentLength > 0)
                {
                    HttpPostedFileBase UploadAadharCard = model.UploadAadharCard;
                    var supportedTypes = new[] { "doc", "docx", "pdf" };
                    AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                    var fileExt = System.IO.Path.GetExtension(UploadAadharCard.FileName).Substring(1);
                    if (!supportedTypes.Contains(fileExt.ToLower()))
                    {
                        Log.Error("File Extension Is InValid - Only Upload DOC/PDF/DOCX File", this);
                        base.ModelState.AddModelError("UploadAadharCard", DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Extension Is InValid - Only Upload DOC/PDF/DOCX File"));

                        return this.View("~/Views/AdaniGas/CNGDealerDetails.cshtml", model);
                    }
                    else if (UploadAadharCard.ContentLength > ((4 * 1024) * 1024))
                    {
                        Log.Error("File size Should Be UpTo 4 MB", this);
                        base.ModelState.AddModelError("UploadAadharCard", DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB"));
                        return this.View("~/Views/AdaniGas/CNGDealerDetails.cshtml", model);
                    }
                    else if (!fu.FileMIMEisValid(UploadAadharCard))
                    {
                        Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                        base.ModelState.AddModelError("UploadAadharCard", DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File"));
                        return this.View("~/Views/AdaniGas/CNGDealerDetails.cshtml", model);
                    }
                    HttpPostedFileBase filess = model.UploadAadharCard;
                    byte[] bytes3;
                    using (BinaryReader br = new BinaryReader(filess.InputStream))
                    {
                        bytes3 = br.ReadBytes(filess.ContentLength);
                    }

                    details.UploadAadharCard = bytes3;
                    details.UploadAadharCardLink = model.PageInfo.Replace(model.UploadAadharCardLink, "/") +
                        "api/AdaniGas/DownloadAadharCard?id=" + model.Id + "&RegNo=" + model.RegistrationNumber;
                    details.UploadAadharCardFileType = UploadAadharCard.ContentType;
                    details.UploadAadharCardFileName = model.Name + "_" + model.MobileNumber;
                }

                if (model.UploadPanCard != null && model.UploadPanCard.ContentLength > 0)
                {
                    HttpPostedFileBase UploadPanCard = model.UploadPanCard;
                    var supportedTypes = new[] { "doc", "docx", "pdf" };
                    AdaniGasCNG_DealerDetails.FileUpload1 fu = new AdaniGasCNG_DealerDetails.FileUpload1();
                    var fileExt = System.IO.Path.GetExtension(UploadPanCard.FileName).Substring(1);
                    if (!supportedTypes.Contains(fileExt.ToLower()))
                    {
                        Log.Error("File Extension Is InValid - Only Upload DOC/PDF/DOCX File", this);
                        base.ModelState.AddModelError("UploadPanCard", DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Extension Is InValid - Only Upload DOC/PDF/DOCX File"));

                        return this.View("~/Views/AdaniGas/CNGDealerDetails.cshtml", model);
                    }
                    else if (UploadPanCard.ContentLength > ((4 * 1024) * 1024))
                    {
                        Log.Error("File size Should Be UpTo 4 MB", this);
                        base.ModelState.AddModelError("UploadPanCard", DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File Size", "File size Should Be UpTo 4 MB"));
                        return this.View("~/Views/AdaniGas/CNGDealerDetails.cshtml", model);
                    }
                    else if (!fu.FileMIMEisValid(UploadPanCard))
                    {
                        Log.Error("File type Is InValid - Only Upload DOC/PDF/DOCX File", this);
                        base.ModelState.AddModelError("UploadPanCard", DictionaryPhraseRepository.Current.Get("/AdaniGas/Controller Messages/Invalid File", "File Type Is InValid - Only Upload DOC/PDF/DOCX File"));
                        return this.View("~/Views/AdaniGas/CNGDealerDetails.cshtml", model);
                    }
                    HttpPostedFileBase filesss = model.UploadPanCard;
                    byte[] bytes4;
                    using (BinaryReader br = new BinaryReader(filesss.InputStream))
                    {
                        bytes4 = br.ReadBytes(filesss.ContentLength);
                    }

                    details.UploadPanCard = bytes4;
                    details.UploadPanCardLink = model.PageInfo.Replace(model.UploadPanCardLink, "/") +
                        "api/AdaniGas/DownloadPANCard?id=" + model.Id + "&RegNo=" + model.RegistrationNumber;
                    details.UploadPanCardFileType = UploadPanCard.ContentType;

                }
                dataContext.CNG_DealerDetailsSubmits.InsertOnSubmit(details);
                dataContext.SubmitChanges();
                Log.Info("Form data saved into db successfully: ", this);

                return Redirect("/thankyou");
            }

            return this.View("~/Views/AdaniGas/CNGDealerDetails.cshtml", model);
        }
        public FileResult DownloadInsurance(Guid id, string RegNo)
        {
            try
            {
                using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                {

                    if (dbcontext.CNG_DealerDetailsSubmits.Any(a => a.Id == id && a.RegistrationNo == RegNo))
                    {
                        var fileToDownload = dbcontext.CNG_DealerDetailsSubmits.Where(i => i.Id == id && i.RegistrationNo == RegNo).FirstOrDefault();

                        return File(fileToDownload.UploadVehicleInsurance.ToArray(), fileToDownload.UploadVehicleInsuranceFileType);



                    }

                    else
                        return null;
                }
            }
            catch (Exception ex)
            {
                Log.Error("Error at DownloadFile:" + ex.Message, this);
            }
            return null;
        }
        public FileResult DownloadRC(Guid id, string RegNo)
        {
            try
            {
                using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                {

                    if (dbcontext.CNG_DealerDetailsSubmits.Any(a => a.Id == id && a.RegistrationNo == RegNo))
                    {
                        var fileToDownload = dbcontext.CNG_DealerDetailsSubmits.Where(i => i.Id == id && i.RegistrationNo == RegNo).FirstOrDefault();

                        return File(fileToDownload.UploadRCBook.ToArray(), fileToDownload.UploadRCBookFileType, fileToDownload.UploadRCBookFileName);



                    }

                    else
                        return null;
                }
            }
            catch (Exception ex)
            {
                Log.Error("Error at DownloadFile:" + ex.Message, this);
            }
            return null;
        }
        public FileResult DownloadAadharCard(Guid id, string RegNo)
        {
            try
            {
                using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                {

                    if (dbcontext.CNG_DealerDetailsSubmits.Any(a => a.Id == id && a.RegistrationNo == RegNo))
                    {
                        var fileToDownload = dbcontext.CNG_DealerDetailsSubmits.Where(i => i.Id == id && i.RegistrationNo == RegNo).FirstOrDefault();

                        return File(fileToDownload.UploadAadharCard.ToArray(), fileToDownload.UploadAadharCardFileType, fileToDownload.UploadAadharCardFileName);



                    }

                    else
                        return null;
                }
            }
            catch (Exception ex)
            {
                Log.Error("Error at DownloadFile:" + ex.Message, this);
            }
            return null;
        }
        public FileResult DownloadPANCard(Guid id, string RegNo)
        {
            try
            {
                using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                {

                    if (dbcontext.CNG_DealerDetailsSubmits.Any(a => a.Id == id && a.RegistrationNo == RegNo))
                    {
                        var fileToDownload = dbcontext.CNG_DealerDetailsSubmits.Where(i => i.Id == id && i.RegistrationNo == RegNo).FirstOrDefault();

                        return File(fileToDownload.UploadPanCard.ToArray(), fileToDownload.UploadPanCardFileType, fileToDownload.UploadPanCardFileName);



                    }

                    else
                        return null;
                }
            }
            catch (Exception ex)
            {
                Log.Error("Error at DownloadFile:" + ex.Message, this);
            }
            return null;
        }
        [RedirectUnAuthenticatedAdaniGasCNGDealerLogin]
        public JsonResult DownloadCNGdoc(string Id, string CID)
        {
            string DealerId = SessionHelper.UserSession.CNGDealerUserSessionContext.DealerId;
            CNGDocuments doc = new CNGDocuments();
            try
            {
                using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                {

                    if (dbcontext.CNG_Documents.Any(a => a.Id == Guid.Parse(Id) && a.CreatedBy == DealerId && a.CustRegistrationNo == Guid.Parse(CID)))
                    {
                        var fileToDownload = dbcontext.CNG_Documents.Where(a => a.Id == Guid.Parse(Id) && a.CreatedBy == DealerId && a.CustRegistrationNo == Guid.Parse(CID)).FirstOrDefault();
                        doc.DocumentBase64 = Convert.ToBase64String(fileToDownload.DocumentData.ToArray());
                        doc.DocName = fileToDownload.DocumentName;
                        doc.DocContentType = fileToDownload.DocumentContentType;
                        return Json(doc, JsonRequestBehavior.AllowGet);
                    }
                    else
                        return null;
                }
            }
            catch (Exception ex)
            {
                Log.Error("Error at DownloadFile:" + ex.Message, this);
            }
            return null;
        }
        [RedirectUnAuthenticatedAdaniGasCNGAdminLogin]
        [HttpPost]
        public JsonResult ValidateCNGdocByAdmin(string absoluteURL, string host, string Comment)
        {
            string UserId = SessionHelper.UserSession.CNGAdminUserSessionContext.AdminUserId;
            string UserName = SessionHelper.UserSession.CNGAdminUserSessionContext.LoginUser;
            Uri myUri = new Uri(host + absoluteURL);
            string Id = HttpUtility.ParseQueryString(myUri.Query).Get("Id");
            string CID = HttpUtility.ParseQueryString(myUri.Query).Get("CID");
            CNGDocuments doc = new CNGDocuments();
            try
            {
                using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                {

                    if (dbcontext.CNG_Documents.Any(a => a.Id == Guid.Parse(Id) && a.CustRegistrationNo == Guid.Parse(CID)))
                    {
                        var fileToUpdate = dbcontext.CNG_Documents.Where(a => a.Id == Guid.Parse(Id) && a.CustRegistrationNo == Guid.Parse(CID)).FirstOrDefault();
                        fileToUpdate.Editable = false;
                        fileToUpdate.IsValidDoc = true;
                        fileToUpdate.ReviewedBy = UserName;
                        dbcontext.SubmitChanges();
                        doc.Message = DictionaryPhraseRepository.Current.Get("/Controller/Messages/Update Success", "Document validated successfully.");
                        return Json(doc, JsonRequestBehavior.AllowGet);
                    }
                    else
                        return null;
                }
            }
            catch (Exception ex)
            {
                Log.Error("Error at DownloadFile:" + ex.Message, this);
            }
            return null;
        }

        [RedirectUnAuthenticatedAdaniGasCNGDealerLogin]
        public bool GetFileReviewUpdate(string absoluteURL, string host)
        {
            try
            {
                if (string.IsNullOrEmpty(absoluteURL))
                    return false;
                Uri myUri = new Uri(host + absoluteURL);
                string FileId = HttpUtility.ParseQueryString(myUri.Query).Get("Id");
                using (AdadniGasDBModelDataContext dbcontext = new AdadniGasDBModelDataContext())
                {
                    var r = dbcontext.CNG_Documents.Where(x => x.Id == Guid.Parse(FileId)).FirstOrDefault();
                    if (r != null)
                    {
                        return bool.Parse(r.IsValidDoc.ToString());
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception e)
            {
                Log.Error("File validation value for " + host + absoluteURL + "has failed: " + e.Message, this);
                return false;
            }
        }
        #endregion

        #region Adani Gas Name Transfer 

        #region Adani Gas Name Transfer Consumer Section

        public ActionResult NameTransfer()
        {

            ClearedNameTransferAdminSectionSession();
            var model = new ByCustomerId();
            NameTransferService nametransferdetails = new NameTransferService();
            List<City> cityList = objWebAPIAdaniGas.GetCityList();
            model.CityList = cityList.Select(x => new SelectListItem()
            {
                Text = x.CityName,
                Value = x.CityCode
            }).ToList();

            string id = Request.QueryString["id"] != null ? Request.QueryString["id"].ToString() : string.Empty;
            Session["updatebyadmin"] = Request.QueryString["id"];

            if (!string.IsNullOrEmpty(id))
            {

                using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                {
                    var registrationdata = nametransferdetails.GetRegisterNameTransferList(id);
                    var getdocument = nametransferdetails.GetDocumentNameTransferList(id);
                    var outstandingAmount = objWebAPIAdaniGas.GetOutstandingAmount(registrationdata.CustomerId);
                    var checkamount = Convert.ToDecimal(outstandingAmount);
                    Log.Info("ATGL Name transfer fetch application data " + registrationdata.CustomerId, this + "ATGL Name Change ");
                    model.id = registrationdata.Id;
                    model.FirstName = registrationdata.FirstName;
                    model.MiddleName = registrationdata.MiddleName;
                    model.LastName = registrationdata.LastName;
                    model.PreStatus = registrationdata.Status;
                    //old data
                    model.RegisterdConsumerName = registrationdata.RegisterdConsumerName;
                    model.CustomerID = registrationdata.CustomerId;
                    model.CustomerName = registrationdata.RegisterdConsumerName;
                    // model.CustomerName = registrationdata.;
                    model.ConnectionType = registrationdata.ConnectionType;
                    model.MeterNumber = registrationdata.MeterNumber;
                    model.MobileNumber = registrationdata.Mobile;
                    model.EmailId = registrationdata.PreviousRegisteredEmail;
                    model.CreatedDate = Convert.ToDateTime(registrationdata.CreatedDate);
                    model.CustomerAddress = registrationdata.PreviousRegisteredAddress;
                    model.SocietyType = registrationdata.SocietyType;
                    model.ApplicationType = registrationdata.ApplicationType;
                    //model.TransactionNumber
                    model.RequestNumber = registrationdata.RequestNumber;
                    model.Comment = registrationdata.Comment;
                    if (Convert.ToInt32(checkamount) < 0)
                    {
                        model.OutstandingAmount = Convert.ToDecimal(00.00);
                    }
                    else
                    {
                        model.OutstandingAmount = checkamount;
                    }
                    var documentid = dbcontext.NameTransferDocuments.Where(x => x.NameTransferId == id).ToList();
                    if (documentid != null)
                    {
                        Log.Info("ATGL Name transfer fetch application document data " + registrationdata.CustomerId, this + "ATGL Name Change ");
                        foreach (var item in documentid)
                        {
                            if (item.DocumentType == Convert.ToString(1))
                            {
                                model.IndexBuilderId = item.Id.ToString();
                                model.DocumentStatus1 = item.DocumentStatus;
                            }
                            if (item.DocumentType == Convert.ToString(2))
                            {
                                model.PossessionletterBuilderId = item.Id.ToString();
                                model.DocumentStatus2 = item.DocumentStatus;
                            }
                            if (item.DocumentType == Convert.ToString(3))
                            {
                                model.PhotoIDBuilderId = item.Id.ToString();
                                model.DocumentStatus3 = item.DocumentStatus;
                            }
                            if (item.DocumentType == Convert.ToString(4))
                            {
                                model.CoownerBuilderId = item.Id.ToString();
                                model.DocumentStatus4 = item.DocumentStatus;
                            }
                            if (item.DocumentType == Convert.ToString(5))
                            {
                                model.SignedIDproofId = item.Id.ToString();
                                model.DocumentStatus5 = item.DocumentStatus;
                            }

                            if (item.DocumentType == Convert.ToString(6))
                            {
                                model.DeathCertificateDemiseId = item.Id.ToString();
                                model.DocumentStatus6 = item.DocumentStatus;
                            }
                            if (item.DocumentType == Convert.ToString(7))
                            {
                                model.DocumentaryDemiseId = item.Id.ToString();
                                model.DocumentStatus7 = item.DocumentStatus;
                            }
                            if (item.DocumentType == Convert.ToString(8))
                            {
                                model.IDProofDemiseId = item.Id.ToString();
                                model.DocumentStatus8 = item.DocumentStatus;
                            }
                            if (item.DocumentType == Convert.ToString(9))
                            {
                                model.NOCDemiseId = item.Id.ToString();
                                model.DocumentStatus9 = item.DocumentStatus;
                            }
                            if (item.DocumentType == Convert.ToString(10))
                            {
                                model.SignedIDproofDemiseId = item.Id.ToString();
                                model.DocumentStatus10 = item.DocumentStatus;
                            }

                            if (item.DocumentType == Convert.ToString(11))
                            {
                                model.FirstRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus11 = item.DocumentStatus;
                            }
                            if (item.DocumentType == Convert.ToString(12))
                            {
                                model.SecondRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus12 = item.DocumentStatus;
                            }
                            if (item.DocumentType == Convert.ToString(13))
                            {
                                model.NOCRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus13 = item.DocumentStatus;
                            }
                            if (item.DocumentType == Convert.ToString(14))
                            {
                                model.SignedIDproofRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus14 = item.DocumentStatus;
                            }

                            if (item.DocumentType == Convert.ToString(15))
                            {
                                model.FirstUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus15 = item.DocumentStatus;
                            }
                            if (item.DocumentType == Convert.ToString(16))
                            {
                                model.SecondUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus16 = item.DocumentStatus;
                            }
                            if (item.DocumentType == Convert.ToString(17))
                            {
                                model.IDProofUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus17 = item.DocumentStatus;
                            }
                            if (item.DocumentType == Convert.ToString(18))
                            {
                                model.NOCUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus18 = item.DocumentStatus;
                            }
                            if (item.DocumentType == Convert.ToString(19))
                            {
                                model.SignedIDproofUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus19 = item.DocumentStatus;
                            }

                            if (item.DocumentType == Convert.ToString(0))
                            {
                                model.isAdditionalDocumentID = item.Id.ToString();
                                model.DocumentStatus0 = item.DocumentStatus;
                            }


                        }
                    }

                    model.ProceedWith = "1";
                    model.IsOTPValid = true;
                    model.stepOne = "true";
                }
            }

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult NameTransfer(ByCustomerId model, string validateById = null, string validateBySearch = null, string ValidateOTP = null, string CancelRequest = null, string Continuestep1 = null, string continuestep3 = null, string proceedforpayment = null, string paynow = null, string createRequest = null, string UpdateChanges = null, string ResendOtps = null, string resendotpid = null, string resendotpNo = null)
        {
            try
            {
                ClearedNameTransferAdminSectionSession();
                model.stepTwo = false;
                string Partner_Type = "9001";
                List<SelectListItem> cityList = objWebAPIAdaniGas.CityList(Partner_Type);
                model.CityList = cityList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();
                if (!string.IsNullOrEmpty(model.City))
                {
                    Log.Info("ATGL Name transfer fetch city list " + model.CityList, this + "ATGL Name Change ");
                    List<SelectListItem> AreaList = objWebAPIAdaniGas.AreaOfCity(model.City, Partner_Type);
                    model.AreaList = AreaList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();
                    if (!string.IsNullOrEmpty(model.Area))
                    {
                        List<SocietyList> apartmentList = objWebAPIAdaniGas.SocietyByArea(model.Area, model.City);
                        model.ApartmentComplexList = apartmentList.ConvertAll(a =>
                        {
                            return new SelectListItem()
                            {
                                Text = a.SocietyName.ToString(),
                                Value = a.SocietyCode.ToString(),
                                Selected = false
                            };
                        });
                        Log.Info("ATGL Name transfer fetch Area list " + model.ApartmentComplexList, this + "ATGL Name Change ");
                        if (!string.IsNullOrEmpty(model.ApartmentComplex))
                        {
                            List<HouseList> houseList = objWebAPIAdaniGas.HouseNumberBySociety(model.ApartmentComplex);
                            model.HouseNumberList = houseList.ConvertAll(a =>
                            {
                                return new SelectListItem()
                                {
                                    Text = a.HouseNumber.ToString(),
                                    Value = a.HouseNumber.ToString(),
                                    Selected = false
                                };
                            });
                            if (!string.IsNullOrEmpty(model.HouseNumber))
                            {
                                model.CustomerID = houseList.Where(h => h.HouseNumber == model.HouseNumber).FirstOrDefault().ConsumerNumber.TrimStart('0');
                            }
                        }
                        Log.Info("ATGL Name transfer fetch Apartment Complex list " + model.ApartmentComplex, this + "ATGL Name Change ");
                    }
                }


                WebAPIAdaniGas wbAGl = new WebAPIAdaniGas();
                if (!string.IsNullOrEmpty(CancelRequest))
                {

                    ClearedNameTransferAdminSectionSession();
                    var item = Context.Database.GetItem(Templates.AdaniGas.NameTransfer);
                    Log.Info("ATGL Name transfer Cancel Request " + item, this + "ATGL Name Change ");
                    return this.Redirect(item.Url());
                }
                else if (!string.IsNullOrEmpty(validateById))
                {
                    ClearedNameTransferAdminSectionSession();
                    var CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById(model.InputByUser);
                    if (CustomerInformation.Message == "Please enter valid Customer id." && CustomerInformation.MessageFlag == "F")
                    {
                        var InputMeterNumber = model.InputByUser;
                        //var MeterNumberLength = model.InputByUser.Length;
                        //var appendlength = 14 - MeterNumberLength;
                        ////System.Text.StringBuilder builder = new System.Text.StringBuilder(InputMeterNumber);
                        //for (int i=0; i< appendlength;i++)
                        //{
                        //    InputMeterNumber= "0" + InputMeterNumber;
                        //}
                        //InputMeterNumber = builder.ToString();
                        CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById("00000" + InputMeterNumber);
                    }
                    NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext();


                    //Customer id or Meter number gets validated from SAP Service
                    if (CustomerInformation.CustomerName == null || CustomerInformation.MessageFlag == "F")
                    {
                        var custInfobyMeterNumber = objWebAPIAdaniGas.ValidateCustomerByMeterNumber(model.InputByUser);
                        if (CustomerInformation.MessageFlag == "F")
                        {
                            Log.Info("ATGL Name transfer validate By Id " + CustomerInformation.CustomerID, this + "ATGL Name Change ");
                            this.ModelState.AddModelError(nameof(model.InputByUser), DictionaryPhraseRepository.Current.Get("/NameTransfer/input Not valid", CustomerInformation.Message));
                            return this.View(model);
                        }
                        else if (string.IsNullOrEmpty(custInfobyMeterNumber.CustomerID))
                        {
                            Log.Info("ATGL Name transfer validate By Id " + custInfobyMeterNumber.CustomerID, this + "ATGL Name Change ");
                            this.ModelState.AddModelError(nameof(model.InputByUser), DictionaryPhraseRepository.Current.Get("/NameTransfer/input Not valid", "Please enter valid Customer Id or Meter Number."));
                            return this.View(model);
                        }
                        else
                        {
                            CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById(custInfobyMeterNumber.CustomerID);
                            model.CustomerID = CustomerInformation.CustomerID;
                            Log.Info("ATGL Name transfer validate By Id " + model.CustomerID, this + "ATGL Name Change ");
                        }
                    }
                    else
                    {
                        model.CustomerID = CustomerInformation.CustomerID;
                    }

                    var Meterinfo = GetMeterReadingDetails(model.CustomerID);
                    model.MeterNumber = Meterinfo.MeterNumber.TrimStart('0');

                    Session["Cust_id"] = model.CustomerID;
                    Session["Proceed_with"] = model.ProceedWith;
                    //If moved -in then proceed further
                    //-	If customer is non-move-in then show message “Please contact customer care number 07947545252 / 07927623264 for name transfer procedure”
                    if (string.IsNullOrEmpty(Meterinfo.SERNR))
                    {
                        //this.ModelState.AddModelError(nameof(model.InputByUser), DictionaryPhraseRepository.Current.Get("/NameTransfer/CustomerID Not Move In", "Please contact customer care number 07947545252 / 07927623264 for name transfer procedure."));
                        string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/non-move-inError", "Please contact customer care number 07947545252 / 07927623264 for name transfer procedure.");
                        ViewBag.Message = messagetobedisplayed;
                        Session["Message"] = messagetobedisplayed;
                        return this.View(model);
                    }
                    var checkdetails = dbcontext.NameTransferRequestDetails.Where(x => (x.CustomerId == model.CustomerID || x.MeterNumber == model.MeterNumber) && x.IsRequestClosed == false).FirstOrDefault();
                    if (checkdetails != null)
                    {
                        if (!string.IsNullOrEmpty(checkdetails.RequestNumber))
                        {
                            Log.Info("ATGL Name transfer check already register details " + model.CustomerID, this + "ATGL Name Change ");
                            string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/PopupMessageOnInValid", "Your Request is already registered for name transfer. Please check your status.");

                            ViewBag.Message = messagetobedisplayed;
                            Session["Message"] = messagetobedisplayed;

                            return this.Redirect("~/Name-Transfer");
                        }
                    }
                    model.CustomerIdValidated = true;

                    try
                    {
                        AdaniGasENachRegistrationModel registrationInfo = new AdaniGasENachRegistrationModel();
                        registrationInfo.MobileNo = model.MobileNumber;
                        registrationInfo.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");

                        var sendOTP = objWebAPIAdaniGas.ENachSendOtp(registrationInfo);
                        if (sendOTP.IsError)
                        {
                            this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP sending Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message));
                            Log.Info("ATGL Name transfer send OTP error " + model.MobileNumber, this + "ATGL Name Change ");
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            return this.View(model);
                        }
                        else if (sendOTP.MessageFlag.ToLower() == "s")
                        {
                            model.IsOTPSent = true;
                            model.IsvalidatAccount = true;
                            Log.Info("ATGL Name transfer send OTP Sucessfully " + model.MobileNumber, this + "ATGL Name Change ");
                            this.ModelState["OTPNumber"].Errors.Clear();
                            model.Message = sendOTP.Message;
                            return this.View(model);
                        }
                        else if (sendOTP.MessageFlag.ToLower() == "f")
                        {
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            this.ModelState.AddModelError(nameof(model.MobileNumber), sendOTP.Message);
                            Log.Info("ATGL Name transfer send OTP failed  " + sendOTP.Message, this + "ATGL Name Change ");
                            model.Message = sendOTP.Message;
                            return this.View(model);
                        }
                        else
                        {
                            this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP failed Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message));
                            Log.Info("ATGL Name transfer send OTP failed  " + sendOTP.Message, this + "ATGL Name Change ");
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            return this.View(model);
                        }
                    }
                    catch (Exception ex)
                    {
                        this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time."));
                        Log.Error("ATGL Name transfer send OTP failed  " + model.MobileNumber + ex.Message, this);
                    }
                    return View(model);
                }
                else if (!string.IsNullOrEmpty(ResendOtps))
                {
                    ClearedNameTransferAdminSectionSession();
                    var CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById(resendotpid);
                    NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext();


                    //Customer id or Meter number gets validated from SAP Service
                    if (CustomerInformation.CustomerName == null || CustomerInformation.MessageFlag == "F")
                    {
                        var custInfobyMeterNumber = objWebAPIAdaniGas.ValidateCustomerByMeterNumber(resendotpid);
                        if (string.IsNullOrEmpty(custInfobyMeterNumber.CustomerID))
                        {
                            Log.Info("ATGL Name transfer validate By Id " + custInfobyMeterNumber.CustomerID, this + "ATGL Name Change ");
                            this.ModelState.AddModelError(nameof(resendotpid), DictionaryPhraseRepository.Current.Get("/NameTransfer/input Not valid", "Please enter valid Customer Id or Meter Number."));
                        }
                        else
                        {
                            CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById(custInfobyMeterNumber.CustomerID);
                            model.CustomerID = CustomerInformation.CustomerID;
                            Log.Info("ATGL Name transfer validate By Id " + model.CustomerID, this + "ATGL Name Change ");
                        }
                    }
                    else
                    {
                        model.CustomerID = CustomerInformation.CustomerID;
                    }

                    var Meterinfo = GetMeterReadingDetails(model.CustomerID);
                    model.MeterNumber = Meterinfo.MeterNumber.TrimStart('0');

                    if (string.IsNullOrEmpty(Meterinfo.SERNR))
                    {
                        this.ModelState.AddModelError(nameof(resendotpid), DictionaryPhraseRepository.Current.Get("/NameTransfer/CustomerID Not Move In", "Please contact customer care number 07947545252 / 07927623264 for name transfer procedure."));
                        return this.View(model);
                    }
                    model.CustomerIdValidated = true;

                    try
                    {
                        AdaniGasENachRegistrationModel registrationInfo = new AdaniGasENachRegistrationModel();
                        registrationInfo.MobileNo = resendotpNo;
                        registrationInfo.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");

                        var sendOTP = objWebAPIAdaniGas.ENachSendOtp(registrationInfo);
                        if (sendOTP.IsError)
                        {
                            this.ModelState.AddModelError(nameof(resendotpNo), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/Resend OTP sending Issue", "There is some issue in resending OTP. Please try after some time. " + sendOTP.Message));
                            Log.Info("ATGL Name transfer send OTP error " + resendotpNo, this + "ATGL Name Change ");
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            return this.View(model);
                        }
                        else if (sendOTP.MessageFlag.ToLower() == "s")
                        {
                            model.IsOTPSent = true;
                            model.IsvalidatAccount = true;
                            Log.Info("ATGL Name transfer resend OTP Sucessfully " + resendotpNo, this + "ATGL Name Change ");
                            this.ModelState["OTPNumber"].Errors.Clear();
                            model.Message = sendOTP.Message;
                            return this.View(model);
                        }
                        else if (sendOTP.MessageFlag.ToLower() == "f")
                        {
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            this.ModelState.AddModelError(nameof(resendotpNo), sendOTP.Message);
                            Log.Info("ATGL Name transfer resend OTP failed  " + sendOTP.Message, this + "ATGL Name Change ");
                            model.Message = sendOTP.Message;
                            return this.View(model);
                        }
                        else
                        {
                            this.ModelState.AddModelError(nameof(resendotpNo), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP failed Issue", "There is some issue in resending OTP. Please try after some time. " + sendOTP.Message));
                            Log.Info("ATGL Name transfer resend OTP failed  " + sendOTP.Message, "ATGL Name Change ");
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            return this.View(model);
                        }
                    }
                    catch (Exception ex)
                    {
                        this.ModelState.AddModelError(nameof(resendotpNo), DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time."));
                        Log.Error("ATGL Name transfer resend OTP failed  " + resendotpNo + ex.Message, this);
                    }
                    return View(model);
                }
                else if (!string.IsNullOrEmpty(validateBySearch))
                {
                    ClearedNameTransferAdminSectionSession();
                    var CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById(model.CustomerID);
                    NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext();
                    //Customer id or Meter number gets validated from SAP Service
                    if (CustomerInformation.CustomerName == null || CustomerInformation.MessageFlag == "F")
                    {
                        this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/NameTransfer/input Not valid", "Selection is not valid."));
                    }

                    var Meterinfo = GetMeterReadingDetails(model.CustomerID);
                    model.MeterNumber = Meterinfo.MeterNumber.TrimStart('0');

                    Session["Cust_id"] = model.CustomerID;
                    Session["Proceed_with"] = model.ProceedWith;
                    //If moved -in then proceed further
                    //-	If customer is non-move-in then show message “Please contact customer care number 07947545252 / 07927623264 for name transfer procedure”
                    if (string.IsNullOrEmpty(Meterinfo.SERNR))
                    {
                        this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/NameTransfer/CustomerID Not Move In", "Please contact customer care number 07947545252 / 07927623264 for name transfer procedure."));
                        Log.Info("ATGL Name transfer validate By Search  " + model.MobileNumber, this + "Please contact customer care number 07947545252 / 07927623264 for name transfer procedure.");
                        return this.View(model);
                    }
                    if (string.IsNullOrEmpty(Meterinfo.SERNR))
                    {
                        //this.ModelState.AddModelError(nameof(model.InputByUser), DictionaryPhraseRepository.Current.Get("/NameTransfer/CustomerID Not Move In", "Please contact customer care number 07947545252 / 07927623264 for name transfer procedure."));
                        string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/non-move-inError", "Please contact customer care number 07947545252 / 07927623264 for name transfer procedure.");
                        ViewBag.Message = messagetobedisplayed;
                        Session["Message"] = messagetobedisplayed;
                        return this.View(model);
                    }
                    var checkdetails = dbcontext.NameTransferRequestDetails.Where(x => (x.CustomerId == model.CustomerID || x.MeterNumber == model.MeterNumber) && x.IsRequestClosed == false).FirstOrDefault();
                    if (checkdetails != null)
                    {
                        if (!string.IsNullOrEmpty(checkdetails.RequestNumber))
                        {
                            Log.Info("ATGL Name transfer check already register details " + model.CustomerID, this + "ATGL Name Change ");
                            string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/PopupMessageOnInValid", "Your Request is already registered for name transfer. Please check your status.");

                            ViewBag.Message = messagetobedisplayed;
                            Session["Message"] = messagetobedisplayed;

                            return this.Redirect("~/Name-Transfer");
                        }
                    }
                    model.CustomerIdValidated = true;

                    try
                    {
                        AdaniGasENachRegistrationModel registrationInfo = new AdaniGasENachRegistrationModel();
                        registrationInfo.MobileNo = model.MobileNumber;
                        registrationInfo.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");

                        var sendOTP = objWebAPIAdaniGas.ENachSendOtp(registrationInfo);
                        if (sendOTP.IsError)
                        {
                            this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP sending Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message));
                            Log.Info("ATGL Name transfer send OTP error valid by search " + model.MobileNumber, this + "ATGL Name Change ");

                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            return this.View(model);
                        }
                        else if (sendOTP.MessageFlag.ToLower() == "s")
                        {
                            model.IsOTPSent = true;
                            model.IsvalidatAccount = true;
                            if (this.ModelState["OTPNumber"] != null)
                                this.ModelState["OTPNumber"].Errors.Clear();
                            model.Message = sendOTP.Message;
                            Log.Info("ATGL Name transfer send OTP Sucessfully " + sendOTP.Message, this + "ATGL Name Change ");
                            return this.View(model);
                        }
                        else if (sendOTP.MessageFlag.ToLower() == "f")
                        {
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            this.ModelState.AddModelError(nameof(model.MobileNumber), sendOTP.Message);
                            Log.Info("ATGL Name transfer send OTP failed " + sendOTP.Message, this + "ATGL Name Change ");
                            model.Message = sendOTP.Message;
                            return this.View(model);
                        }
                        else
                        {
                            this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP failed Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message));
                            Log.Info("ATGL Name transfer valid by search send OTP failed " + sendOTP.Message, this + "ATGL Name Change ");
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            return this.View(model);
                        }
                    }
                    catch (Exception ex)
                    {
                        this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time."));
                        Log.Error("ATGL Name transfer valid by search send OTP failed " + ex.Message, this);
                    }
                    return View(model);
                }
                else if (!string.IsNullOrEmpty(ValidateOTP))
                {
                    model.CustomerIdValidated = true;
                    if (Session["Cust_id"] == null || Session["Cust_id"].ToString() != model.CustomerID)
                    {
                        this.ModelState.AddModelError(nameof(model.CustomerID), DictionaryPhraseRepository.Current.Get("/NameTransfer/CustomerID Invalid", "Please enter valid CustomerID."));
                        return this.View(model);
                    }
                    var CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById(model.CustomerID);
                    var outstandingAmount = objWebAPIAdaniGas.GetOutstandingAmount(model.CustomerID);
                    var GetEmailList = objWebAPIAdaniGas.NameTransferGetEmailList(model.CustomerID);

                    var checkamount = Convert.ToDecimal(outstandingAmount);
                    var Meterinfo = GetMeterReadingDetails(model.CustomerID);
                    NameTransferRequestDataContext dataContext = new NameTransferRequestDataContext();
                    var checkdetail = dataContext.NameTransferRequestDetails.Where(x => x.Mobile == model.MobileNumber && x.CustomerId == model.CustomerID && x.MeterNumber == model.MeterNumber && x.IsRequestClosed == null).FirstOrDefault();

                    var isOtpValid = objWebAPIAdaniGas.EnachValidateOtp(model.MobileNumber, model.OTPNumber);
                    if (isOtpValid.Msg_Flag == "S")
                    {
                        Log.Info("ATGL Name transfer OTP validate " + isOtpValid.Message, this + "ATGL Name Change ");
                        if (checkdetail != null)
                        {
                            Log.Info("ATGL Name transfer get data for already registered application " + checkdetail, this + "ATGL Name Change ");
                            var checkstatus = dataContext.NameTransferChangeNameByAdmins.Where(x => x.UserId == checkdetail.Id.ToString()).ToList();
                            Log.Info("ATGL Name transfer check data " + checkdetail.Id, this + "ATGL Name Change ");
                            model.id = checkdetail.Id;
                            Session["UserIdForAdditionalDocumentGUID"] = model.id;
                            model.FirstName = checkdetail.FirstName;
                            model.MiddleName = checkdetail.MiddleName;
                            model.LastName = checkdetail.LastName;
                            model.PayableTotalAmount = Convert.ToDecimal(checkdetail.PayableTotalAmount);
                            //old data
                            model.RegisterdConsumerName = checkdetail.RegisterdConsumerName;
                            model.CustomerID = checkdetail.CustomerId;
                            model.ConnectionType = checkdetail.ConnectionType;
                            model.MeterNumber = checkdetail.MeterNumber;
                            model.MobileNumber = checkdetail.Mobile;
                            model.EmailId = checkdetail.PreviousRegisteredEmail;
                            model.CreatedDate = Convert.ToDateTime(checkdetail.CreatedDate);
                            model.CustomerAddress = checkdetail.PreviousRegisteredAddress;
                            model.SocietyType = checkdetail.SocietyType;
                            model.ApplicationType = checkdetail.ApplicationType;
                            model.PreStatus = checkdetail.Status;
                            model.RequestNumber = checkdetail.RequestNumber;
                            model.Comment = checkdetail.Comment;
                            if (Convert.ToInt32(checkamount) < 0)
                            {
                                model.OutstandingAmount = Convert.ToDecimal(00.00);
                            }
                            else
                            {
                                model.OutstandingAmount = checkamount;
                            }

                            string comptype = "04"; string CompCat = "R"; string Partner = Meterinfo.BusinessPartnerNumber; string Taskcode = "0016";
                            //var quoteInfo = 

                            if (checkdetail.ApplicationType == "Builder_Case")
                            {
                                //model.ProcessingAmount = 100;
                                Taskcode = "0016";
                            }
                            else if (checkdetail.ApplicationType == "Property_ReSale")
                            {
                                //model.ProcessingAmount = 500;
                                Taskcode = "0078";
                            }
                            else if (checkdetail.ApplicationType == "Demise")
                            {
                                Taskcode = "0080";
                            }

                            var FetchTheQuote = objWebAPIAdaniGas.FetchTheQuote(comptype, CompCat, Partner, Taskcode);
                            Log.Info("ATGL Name transfer Fetch processing fees " + FetchTheQuote, this + "ATGL Name Change ");
                            //var r = objWebAPIAdaniGas.NameTransferRequestDataPost(Meterinfo.BusinessPartnerNumber, "R", "04", Taskcode, "Name transfer – " + model.ApplicationType, "1");

                            try
                            {
                                if (FetchTheQuote != null)
                                {
                                    string Taxresult = FetchTheQuote.Tax.Substring(0, FetchTheQuote.Tax.Length - 2);
                                    string Amountresult = FetchTheQuote.Amount.Substring(0, FetchTheQuote.Tax.Length - 2);
                                    model.GSTAmount = Convert.ToDecimal(Taxresult);
                                    model.ProcessingAmount = Convert.ToDecimal(Amountresult);
                                }
                                else
                                    model.GSTAmount = 0;
                            }
                            catch
                            {
                                model.GSTAmount = 0;
                            }

                            model.PayableTotalAmount = model.ProcessingAmount + model.GSTAmount + model.OutstandingAmount;

                            foreach (var item in checkstatus)
                            {
                                if (item.Old_data == null || item.New_data == null)
                                {
                                    model.ShowAdditionalDetailsComment = item.Comment;
                                    model.ShowisAdditionalDocumentRequired = item.is_additional_documents_reuired.ToString();
                                    model.ShowApprovedComment = item.Comment;
                                    model.ShowRejectedComment = item.Comment;
                                    model.AddAdditionalPayment = Convert.ToInt16(item.Additional_Payment_Value);
                                }
                            }

                            var documentid = dataContext.NameTransferDocuments.Where(x => x.NameTransferId == checkdetail.Id.ToString()).ToList();
                            if (documentid != null)
                            {
                                foreach (var item in documentid)
                                {
                                    if (item.DocumentType == Convert.ToString(1))
                                    {
                                        model.IndexBuilderId = item.Id.ToString();
                                        model.DocumentStatus1 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(2))
                                    {
                                        model.PossessionletterBuilderId = item.Id.ToString();
                                        model.DocumentStatus2 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(3))
                                    {
                                        model.PhotoIDBuilderId = item.Id.ToString();
                                        model.DocumentStatus3 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(4))
                                    {
                                        model.CoownerBuilderId = item.Id.ToString();
                                        model.DocumentStatus4 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(5))
                                    {
                                        model.SignedIDproofId = item.Id.ToString();
                                        model.DocumentStatus5 = item.DocumentStatus;
                                    }

                                    if (item.DocumentType == Convert.ToString(6))
                                    {
                                        model.DeathCertificateDemiseId = item.Id.ToString();
                                        model.DocumentStatus6 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(7))
                                    {
                                        model.DocumentaryDemiseId = item.Id.ToString();
                                        model.DocumentStatus7 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(8))
                                    {
                                        model.IDProofDemiseId = item.Id.ToString();
                                        model.DocumentStatus8 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(9))
                                    {
                                        model.NOCDemiseId = item.Id.ToString();
                                        model.DocumentStatus9 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(10))
                                    {
                                        model.SignedIDproofDemiseId = item.Id.ToString();
                                        model.DocumentStatus10 = item.DocumentStatus;
                                    }

                                    if (item.DocumentType == Convert.ToString(11))
                                    {
                                        model.FirstRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus11 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(12))
                                    {
                                        model.SecondRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus12 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(13))
                                    {
                                        model.NOCRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus13 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(14))
                                    {
                                        model.SignedIDproofRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus14 = item.DocumentStatus;
                                    }

                                    if (item.DocumentType == Convert.ToString(15))
                                    {
                                        model.FirstUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus15 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(16))
                                    {
                                        model.SecondUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus16 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(17))
                                    {
                                        model.IDProofUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus17 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(18))
                                    {
                                        model.NOCUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus18 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(19))
                                    {
                                        model.SignedIDproofUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus19 = item.DocumentStatus;
                                    }

                                    if (item.DocumentType == Convert.ToString(0))
                                    {
                                        model.isAdditionalDocumentID = item.Id.ToString();
                                        model.DocumentStatus0 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(20))
                                    {
                                        model.MunicipalCorporationTaxBillDemiseUnregisteredHousingId = item.Id.ToString();
                                        model.DocumentStatus20 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(21))
                                    {
                                        model.ElectricityBillDemiseUnregisteredHousingId = item.Id.ToString();
                                        model.DocumentStatus21 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(22))
                                    {
                                        model.OtherDemiseUnregisteredHousingId = item.Id.ToString();
                                        model.DocumentStatus22 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(23))
                                    {
                                        model.DeathCertificateDemiseUnregisteredHousingId = item.Id.ToString();
                                        model.DocumentStatus23 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(24))
                                    {
                                        model.IDProofDemiseUnregisteredHousingId = item.Id.ToString();
                                        model.DocumentStatus24 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(25))
                                    {
                                        model.NOCDemiseUnregisteredHousingId = item.Id.ToString();
                                        model.DocumentStatus25 = item.DocumentStatus;
                                    }
                                    if (item.DocumentType == Convert.ToString(26))
                                    {
                                        model.NOCDemiseUnregisteredHousingId = item.Id.ToString();
                                        model.DocumentStatus26 = item.DocumentStatus;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Log.Info("ATGL Name transfer application registered first time  " + CustomerInformation.CustomerID, this + "ATGL Name Change ");
                            string PreviousRegisteredMobileNo = AES_EncryptDecrypt.DecryptString(wbAGl.EncryptionKey, CustomerInformation.Mobile, wbAGl.EncryptionIV);
                            model.IsOTPSent = true;
                            model.IsOTPValid = true;
                            model.CustomerID = CustomerInformation.CustomerID;
                            model.CustomerName = CustomerInformation.CustomerName;
                            model.CustomerPartnerNumber = CustomerInformation.PartnerNo;
                            model.CustomerAddress = Meterinfo.CustomerAddress;
                            model.MeterNumber = Meterinfo.MeterNumber.TrimStart('0');
                            model.ConnectionType = "Domestic";
                            model.PreMobileNumber = PreviousRegisteredMobileNo;
                            model.EmailId = CustomerInformation.Email;
                            model.CustomerEmailId = model.CustomerEmailId;
                            if (Convert.ToInt32(checkamount) < 0)
                            {
                                model.OutstandingAmount = Convert.ToDecimal(00.00);
                            }
                            else
                            {
                                model.OutstandingAmount = checkamount;
                            }

                            model.CustomerIdValidated = true;
                        }

                        model.ProceedWith = Session["Proceed_with"].ToString();
                        model.IsOTPValid = true;
                        model.stepOne = "Continuestep1";
                        ModelState.Clear();
                        return this.View(model);
                    }
                    else if (isOtpValid.Msg_Flag == "F")
                    {
                        this.ModelState.AddModelError(nameof(model.OTPNumber), isOtpValid.Message);
                        model.IsOTPSent = true;
                        model.IsOTPValid = false;
                        return this.View(model);
                    }
                    else
                    {
                        this.ModelState.AddModelError(nameof(model.OTPNumber), isOtpValid.Message);
                        model.IsOTPSent = true;
                        model.IsOTPValid = false;
                        return this.View(model);
                    }
                }
                else if (!string.IsNullOrEmpty(Continuestep1))
                {
                    ClearedNameTransferAdminSectionSession();
                    model.CustomerIdValidated = true;

                    try
                    {
                        var CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById(model.CustomerID);
                        var outstandingAmount = objWebAPIAdaniGas.GetOutstandingAmount(model.CustomerID);
                        var Meterinfo = GetMeterReadingDetails(model.CustomerID);
                        string PreviousRegisteredMobileNo = AES_EncryptDecrypt.DecryptString(wbAGl.EncryptionKey, CustomerInformation.Mobile, wbAGl.EncryptionIV);
                        model.CustomerID = CustomerInformation.CustomerID;
                        model.CustomerName = CustomerInformation.CustomerName;
                        model.CustomerPartnerNumber = CustomerInformation.PartnerNo;
                        model.CustomerAddress = Meterinfo.CustomerAddress;
                        model.MeterNumber = Meterinfo.MeterNumber.TrimStart('0');
                        model.ConnectionType = "Domestic";
                        model.PreMobileNumber = PreviousRegisteredMobileNo;
                        model.EmailId = CustomerInformation.Email;
                        model.Amount = outstandingAmount;
                        Log.Info("ATGL Name transfer get customer information " + CustomerInformation.CustomerID, this + "ATGL Name Change ");
                        Log.Info("ATGL Name transfer get customer information " + Meterinfo.MeterNumber, this + "ATGL Name Change ");
                        Log.Info("ATGL Name transfer get customer information " + model.PreMobileNumber, this + "ATGL Name Change ");
                        model.ProceedWith = Session["Proceed_with"].ToString();
                        model.IsOTPValid = true;
                        model.stepOne = Continuestep1;

                        return this.View(model);
                    }
                    catch (Exception ex)
                    {
                        Log.Error("ATGL Name transfer get customer information " + ex.Message, this + "ATGL Name Change ");
                        return this.Redirect("~/Name-Transfer");
                    }
                }
                //countinue:
                else if (!string.IsNullOrEmpty(proceedforpayment))
                {
                    try
                    {
                        ClearedNameTransferAdminSectionSession();
                        var CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById(model.CustomerID);
                        var outstandingAmount = objWebAPIAdaniGas.GetOutstandingAmount(model.CustomerID);
                        var Meterinfo = GetMeterReadingDetails(model.CustomerID);
                        var checkamount = Convert.ToDecimal(outstandingAmount);
                        string PreviousRegisteredMobileNo = AES_EncryptDecrypt.DecryptString(wbAGl.EncryptionKey, CustomerInformation.Mobile, wbAGl.EncryptionIV);
                        NameTransferRequestDataContext dbcontexts = new NameTransferRequestDataContext();
                        Log.Info("ATGL Name transfer application registered first time  " + CustomerInformation.CustomerID, this + "ATGL Name Change ");
                        model.CustomerName = CustomerInformation.CustomerName;
                        model.CustomerPartnerNumber = CustomerInformation.PartnerNo;
                        model.CustomerAddress = Meterinfo.CustomerAddress;
                        model.MeterNumber = Meterinfo.MeterNumber.TrimStart('0');
                        model.ConnectionType = "Domestic";
                        model.PreMobileNumber = PreviousRegisteredMobileNo;
                        model.EmailId = CustomerInformation.Email;
                        if (Convert.ToInt32(checkamount) < 0)
                        {
                            model.Amount = Convert.ToString(00);
                            model.OutstandingAmount = Convert.ToDecimal(00.00);
                        }
                        else
                        {
                            model.Amount = outstandingAmount;
                            model.OutstandingAmount = Convert.ToDecimal(outstandingAmount);
                        }
                        model.ProcessingAmount = 0;
                        model.GSTAmount = 0;


                        //        For builder case pass comptype = 04 and task code = 0016
                        //For Re-sales pass comptype = 04 and task code = 0078
                        //For Demise pass comptype = 04 and task code = 0080

                        string comptype = "04"; string CompCat = "R"; string Partner = Meterinfo.BusinessPartnerNumber; string Taskcode = "0016";
                        //var quoteInfo = 

                        if (model.ApplicationType == "Builder_Case")
                        {
                            //model.ProcessingAmount = 100;
                            Taskcode = "0016";
                        }
                        else if (model.ApplicationType == "Property_ReSale")
                        {
                            //model.ProcessingAmount = 500;
                            Taskcode = "0078";
                        }
                        else if (model.ApplicationType == "Demise")
                        {
                            Taskcode = "0080";
                        }

                        var FetchTheQuote = objWebAPIAdaniGas.FetchTheQuote(comptype, CompCat, Partner, Taskcode);
                        Log.Info("ATGL Name transfer Fetch processing fees " + FetchTheQuote, this + "ATGL Name Change ");
                        //var r = objWebAPIAdaniGas.NameTransferRequestDataPost(Meterinfo.BusinessPartnerNumber, "R", "04", Taskcode, "Name transfer – " + model.ApplicationType, "1");

                        try
                        {
                            if (FetchTheQuote != null)
                            {
                                string Taxresult = FetchTheQuote.Tax.Substring(0, FetchTheQuote.Tax.Length - 2);
                                string Amountresult = FetchTheQuote.Amount.Substring(0, FetchTheQuote.Tax.Length - 2);
                                model.GSTAmount = Convert.ToDecimal(Taxresult);
                                model.ProcessingAmount = Convert.ToDecimal(Amountresult);
                            }
                            else
                                model.GSTAmount = 0;
                        }
                        catch
                        {
                            model.GSTAmount = 0;
                        }

                        model.PayableTotalAmount = model.ProcessingAmount + model.GSTAmount + model.OutstandingAmount;
                        Log.Info("ATGL Name transfer get PayableTotalAmount " + model.PayableTotalAmount, this + "ATGL Name Change ");
                        string MobileNo = AES_EncryptDecrypt.DecryptString(wbAGl.EncryptionKey, CustomerInformation.Mobile, wbAGl.EncryptionIV);

                        using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                        {
                            bool flag = true;
                            //string PreviousRegisteredMobileNo = AES_EncryptDecrypt.DecryptString(wbAGl.EncryptionKey, CustomerInformation.Mobile, wbAGl.EncryptionIV);
                            NameTransferRequestDetail obj = new NameTransferRequestDetail();
                            var list = dbcontext.NameTransferRequestDetails.Where(x => x.CustomerId == CustomerInformation.CustomerID && x.Mobile == model.MobileNumber && (x.IsRequestClosed == null)).FirstOrDefault();
                            if (list != null)
                                flag = false;
                            //New nametransfer
                            if (flag == true)
                            {
                                model.id = Guid.NewGuid();
                                obj.Id = model.id;
                                obj.FirstName = model.FirstName;
                                obj.MiddleName = model.MiddleName;
                                obj.LastName = model.LastName;
                                obj.ApplicationType = model.ApplicationType;

                                obj.Mobile = model.MobileNumber;
                                obj.Email = CustomerInformation.Email;
                                obj.Comment = model.Comment;
                                obj.CreatedDate = DateTime.Now;
                                obj.ModifiedDate = DateTime.Now;
                                obj.CityCode = Meterinfo.CityCode;
                                obj.RegisterdConsumerName = CustomerInformation.CustomerName;
                                obj.PreviousRegisteredMobile = PreviousRegisteredMobileNo;
                                obj.PreviousRegisteredEmail = CustomerInformation.Email;
                                obj.CustomerId = CustomerInformation.CustomerID;
                                obj.MeterNumber = Meterinfo.MeterNumber.TrimStart('0');
                                obj.PreviousRegisteredAddress = Meterinfo.CustomerAddress;
                                obj.Address = Meterinfo.CustomerAddress;
                                obj.ConnectionType = "Domestic";
                                obj.CityCode = Meterinfo.CityCode;
                                obj.CustomerEmailId = model.CustomerEmailId;
                                obj.PayableTotalAmount = Convert.ToString(model.PayableTotalAmount);
                                if (model.ApplicationType == "Builder_Case")
                                {
                                    if (!string.IsNullOrEmpty(model.GasSupply))
                                        obj.GasSupply = model.GasSupply;
                                    else
                                        obj.GasSupply = "No";
                                }
                                if (model.ApplicationType == "Property_ReSale" || model.ApplicationType == "Demise")
                                {
                                    if (!string.IsNullOrEmpty(model.SocietyType))
                                        obj.SocietyType = model.SocietyType;
                                }



                                Log.Info("ATGL Name transfer register details " + model.CustomerID + " " + model.FirstName + " " + model.LastName, this);
                                Session["CustomerGUID"] = model.id;

                                NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                                applicationCheckStatus.Id = Guid.NewGuid();
                                applicationCheckStatus.UserId = model.id.ToString();
                                applicationCheckStatus.Status = "Submitted";
                                applicationCheckStatus.CreatedDate = DateTime.Now;
                                dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                dbcontext.NameTransferRequestDetails.InsertOnSubmit(obj);
                                dbcontext.SubmitChanges();

                                List<DoucmentDataGas> httpPostedFileBases = new List<DoucmentDataGas>();
                                Log.Info("ATGL Name transfer save doc start " + model.CustomerID + " " + model.ApplicationType, this);
                                //For Builder Case
                                if (model.IndexBuilder != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.IndexBuilder, documentType = "1", documentName = model.IndexBuilder_content_type });
                                if (model.PossessionletterBuilder != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.PossessionletterBuilder, documentType = "2", documentName = model.PossessionletterBuilder_content_type });
                                if (model.PhotoIDBuilder != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.PhotoIDBuilder, documentType = "3", documentName = model.PhotoIDBuilder_content_type });
                                if (model.CoownerBuilder != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.CoownerBuilder, documentType = "4", documentName = model.CoownerBuilder_content_type });
                                if (model.SignedIDproof != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.SignedIDproof, documentType = "5", documentName = model.SignedIDproof_content_type });

                                //For Registered Housing Society - Demise Case
                                if (model.DeathCertificateDemise != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.DeathCertificateDemise, documentType = "6", documentName = model.DeathCertificateDemise_content_type });
                                if (model.DocumentaryDemise != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.DocumentaryDemise, documentType = "7", documentName = model.DocumentaryDemise_content_type });
                                if (model.IDProofDemise != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.IDProofDemise, documentType = "8", documentName = model.IDProofDemise_content_type });
                                if (model.NOCDemise != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.NOCDemise, documentType = "9", documentName = model.NOCDemise_content_type });
                                if (model.SignedIDproofDemise != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.SignedIDproofDemise, documentType = "10", documentName = model.SignedIDproofDemise_content_type });

                                //For Unregistered Housing Society -  Demise Case
                                if (model.MunicipalCorporationTaxBillDemiseUnregisteredHousing != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.MunicipalCorporationTaxBillDemiseUnregisteredHousing, documentType = "20", documentName = model.MunicipalCorporationTaxBillDemiseUnregisteredHousing_content_type });
                                if (model.ElectricityBillDemiseUnregisteredHousing != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.ElectricityBillDemiseUnregisteredHousing, documentType = "21", documentName = model.ElectricityBillDemiseUnregisteredHousing_content_type });
                                if (model.OtherDemiseUnregisteredHousing != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.OtherDemiseUnregisteredHousing, documentType = "22", documentName = model.OtherDemiseUnregisteredHousing_content_type });
                                if (model.DeathCertificateDemiseUnregisteredHousing != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.DeathCertificateDemiseUnregisteredHousing, documentType = "23", documentName = model.DeathCertificateDemiseUnregisteredHousing_content_type });
                                if (model.IDProofDemiseUnregisteredHousing != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.IDProofDemiseUnregisteredHousing, documentType = "24", documentName = model.IDProofDemiseUnregisteredHousing_content_type });
                                if (model.NOCDemiseUnregisteredHousing != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.NOCDemiseUnregisteredHousing, documentType = "25", documentName = model.NOCDemiseUnregisteredHousing_content_type });
                                if (model.SignedIDprooDemiseUnregisteredHousing != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.SignedIDprooDemiseUnregisteredHousing, documentType = "26", documentName = model.SignedIDproofDemiseUnregisteredHousing_content_type });

                                //For Registered Housing Society - Property-Resale
                                if (model.FirstRegisteredHousingSocietypropertyresale != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.FirstRegisteredHousingSocietypropertyresale, documentType = "11", documentName = model.FirstRegisteredHousingSocietypropertyresale_content_type });
                                if (model.SecondRegisteredHousingSocietypropertyresale != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.SecondRegisteredHousingSocietypropertyresale, documentType = "12", documentName = model.SecondRegisteredHousingSocietypropertyresale_content_type });
                                if (model.NOCRegisteredHousingSocietypropertyresale != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.NOCRegisteredHousingSocietypropertyresale, documentType = "13", documentName = model.NOCRegisteredHousingSocietypropertyresale_content_type });
                                if (model.SignedIDproofRegisteredHousingSocietypropertyresale != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.SignedIDproofRegisteredHousingSocietypropertyresale, documentType = "14", documentName = model.SignedIDproofRegisteredHousingSocietypropertyresale_content_type });

                                //For Unregistered Housing Society - Property-Resale
                                if (model.FirstUnregisteredHousingSocietypropertyresale != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.FirstUnregisteredHousingSocietypropertyresale, documentType = "15", documentName = model.FirstUnregisteredHousingSocietypropertyresale_content_type });
                                if (model.SecondUnregisteredHousingSocietypropertyresale != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.SecondUnregisteredHousingSocietypropertyresale, documentType = "16", documentName = model.SecondUnregisteredHousingSocietypropertyresale_content_type });
                                if (model.IDProofUnregisteredHousingSocietypropertyresale != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.IDProofUnregisteredHousingSocietypropertyresale, documentType = "17", documentName = model.IDProofUnregisteredHousingSocietypropertyresale_content_type });
                                if (model.NOCUnregisteredHousingSocietypropertyresale != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.NOCUnregisteredHousingSocietypropertyresale, documentType = "18", documentName = model.NOCUnregisteredHousingSocietypropertyresale_content_type });
                                if (model.SignedIDproofUnregisteredHousingSocietypropertyresale != null)
                                    httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.SignedIDproofUnregisteredHousingSocietypropertyresale, documentType = "19", documentName = model.SignedIDproofUnregisteredHousingSocietypropertyresale_content_type });

                                var UploadDocument = saveUserAttachmentFile(httpPostedFileBases, !string.IsNullOrWhiteSpace(Convert.ToString(Session["CustomerGUID"])) ? Convert.ToString(Session["CustomerGUID"]) : null);

                                //NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                                //applicationCheckStatus.Id = Guid.NewGuid();
                                //applicationCheckStatus.UserId = model.id.ToString();
                                //applicationCheckStatus.Status = "Submitted";
                                //applicationCheckStatus.CreatedDate = DateTime.Now;
                                //dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                //dbcontext.SubmitChanges();

                                //SendNameTransferStatusEmail(CustomerInformation.CustomerID, model.CustomerEmailId, "");
                            }
                        }

                        model.ProceedWith = Session["Proceed_with"].ToString();
                        model.IsOTPValid = true;
                        model.stepTwo = true;

                        return this.View(model);

                    }
                    catch (Exception ex)
                    {
                        Log.Error("ATGL Name transfer error regarding register application " + ex.Message, this + "ATGL Name Change ");
                    }
                }
                else if (!string.IsNullOrEmpty(paynow))
                {
                    try
                    {
                        ClearedNameTransferAdminSectionSession();
                        var CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById(model.CustomerID);
                        var Meterinfo = GetMeterReadingDetails(model.CustomerID);
                        var outstandingAmount = objWebAPIAdaniGas.GetOutstandingAmount(model.CustomerID);
                        var checkamount = Convert.ToDecimal(outstandingAmount);
                        if (Convert.ToInt32(checkamount) < 0)
                        {
                            model.Amount = Convert.ToString(00);
                            model.OutstandingAmount = Convert.ToDecimal(00.00);
                        }
                        else
                        {
                            model.Amount = outstandingAmount;
                            model.OutstandingAmount = Convert.ToDecimal(outstandingAmount);
                        }
                        string comptype = "04"; string CompCat = "R"; string Partner = Meterinfo.BusinessPartnerNumber; string Taskcode = "0016";

                        if (model.ApplicationType == "Builder_Case")
                        {
                            model.ProcessingAmount = 100;
                            Taskcode = "0016";
                        }
                        else if (model.ApplicationType == "Property_ReSale")
                        {
                            model.ProcessingAmount = 500;
                            Taskcode = "0078";
                        }
                        else if (model.ApplicationType == "Demise")
                        {
                            Taskcode = "0080";
                        }

                        var FetchTheQuote = objWebAPIAdaniGas.FetchTheQuote(comptype, CompCat, Partner, Taskcode);
                        try
                        {
                            if (FetchTheQuote != null)
                            {
                                string Taxresult = FetchTheQuote.Tax.Substring(0, FetchTheQuote.Tax.Length - 2);
                                string Amountresult = FetchTheQuote.Amount.Substring(0, FetchTheQuote.Tax.Length - 2);
                                model.GSTAmount = Convert.ToDecimal(Taxresult);
                                model.ProcessingAmount = Convert.ToDecimal(Amountresult);
                            }
                            else
                                model.GSTAmount = 0;
                        }
                        catch
                        {
                            model.GSTAmount = 0;
                        }

                        model.PayableTotalAmount = model.ProcessingAmount + model.GSTAmount + model.OutstandingAmount;
                        Log.Info("ATGL Name transfer payment fees " + model.PayableTotalAmount, this + "ATGL Name Change ");
                        if (model.PayableTotalAmount.ToString().Any(char.IsLetter))
                        {
                            this.ModelState.AddModelError("Amount", DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/InvalidAmount", "Invalid payable amount value. character is not allowed."));
                            return this.View(model);
                        }
                        else if (Convert.ToDecimal(model.PayableTotalAmount) <= 0)
                        {
                            this.ModelState.AddModelError("Amount", DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/AmountNegativeValidation", "You have not entered proper payable amount."));
                            return this.View(model);
                        }

                        PayOnline paymodel = new PayOnline
                        {
                            AdvanceAmount = 0,
                            Amount = Convert.ToDouble(model.PayableTotalAmount),
                            Mobile = model.MobileNumber,
                            CustomerID = model.CustomerID,
                            CustomerName = model.FirstName + " " + model.MiddleName + " " + model.LastName,
                            PaymentType = "Name Transfer",
                            UserType = "Guest",
                            PaymentGateway = model.quickPayNameTransfer.PaymentGateway
                        };

                        switch (model.quickPayNameTransfer.PaymentGateway)
                        {
                            case (int)EnumPayment.GatewayType.PayUMoney:
                                PaymentService.StorePaymentRequestAdaniGas(paymodel);
                                string payUHTML = PaymentService.PayUMoneyTransactionRequestAPIAdaniGasRequestPost(paymodel);
                                return Content(payUHTML);

                            case (int)EnumPayment.GatewayType.BillDesk:
                                PaymentService.StorePaymentRequestAdaniGas(paymodel);
                                string RequestHTML = PaymentService.BillDeskTransactionRequestAPIRequestAdaniGasPost(paymodel);
                                return Content(RequestHTML);
                            case (int)EnumPayment.GatewayType.Paytm:
                                PaymentService.StorePaymentRequestAdaniGas(paymodel);
                                string outputHTML = PaymentService.PaytmTransactionRequestAPIRequestAdaniGasPost(paymodel);
                                return Content(outputHTML);
                            case (int)EnumPayment.GatewayType.HDFC:
                                PaymentService.StorePaymentRequestAdaniGas(paymodel);
                                string ReqHTML = PaymentService.HDFCTransactionRequestAPIRequestAdaniGasPost(paymodel);
                                return Content(ReqHTML);
                            default:
                                break;
                        }

                        Session["UpdateMessage"] = new InfoMessage(DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Submitted Successfully", "Submitted Successfully."));


                        return Redirect(Request.RawUrl);
                    }
                    catch (Exception ex)
                    {
                        Log.Error("ATGL Name transfer payment fees error " + ex.Message, this + "ATGL Name Change ");
                    }
                    return this.View(model);
                }
                else if (!string.IsNullOrEmpty(createRequest))
                {
                    try
                    {
                        ClearedNameTransferAdminSectionSession();
                        var CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById(model.CustomerID);
                        var outstandingAmount = objWebAPIAdaniGas.GetOutstandingAmount(model.CustomerID);
                        var Meterinfo = GetMeterReadingDetails(model.CustomerID);

                        string Taskcode = "";
                        string quantity = "";
                        if (model.ApplicationType == "Builder_Case")
                        {
                            Taskcode = "0016";
                            quantity = "01";
                        }
                        else if (model.ApplicationType == "Property_ReSale")
                        {
                            Taskcode = "0078";
                            quantity = "01";
                        }
                        else if (model.ApplicationType == "Demise")
                        {
                            Taskcode = "0080";
                            quantity = "00";
                        }

                        NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext();

                        NameTransferRequestDetail objNameTransferRequest = dbcontext.NameTransferRequestDetails.Where(i => i.CustomerId.ToString() == model.CustomerID && i.Mobile == model.MobileNumber && i.RequestNumber == null).FirstOrDefault();

                        Log.Info("ATGL Name transfer Demise case information  " + model.CustomerID, this + "ATGL Name Change ");
                        if (objNameTransferRequest != null)
                        {
                            var r = objWebAPIAdaniGas.NameTransferRequestDataPost(Meterinfo.BusinessPartnerNumber, "R", "04", Taskcode, "Name transfer – " + model.ApplicationType, quantity);

                            if (r.MessageFlag.ToLower() == "s")
                            {
                                Log.Info("ATGL Name transfer Demise case information message " + r.Message, this + "ATGL Name Change ");
                                Log.Info("ATGL Name transfer Demise case response  " + r.CustomerID + ";" + r.RequestNumber + ";" + r.MessageFlag + ";" + r.Message, "");
                                objNameTransferRequest.Status = "PaymentNotRequired";

                                objNameTransferRequest.RequestNumber = r.RequestNumber;
                                objNameTransferRequest.SAPResponseComment = r.MessageFlag + ";" + r.Message;
                                objNameTransferRequest.IsRequestClosed = false;

                                Log.Info("ATGL Name transfer Demise case objNameTransferRequest  " + objNameTransferRequest.RequestNumber + ";" + objNameTransferRequest.SAPResponseComment, "");

                                NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                                applicationCheckStatus.Id = Guid.NewGuid();
                                Log.Info("ATGL Name transfer Demise case applicationCheckStatus  " + applicationCheckStatus.Id, "");
                                applicationCheckStatus.UserId = objNameTransferRequest.Id.ToString();
                                Log.Info("ATGL Name transfer Demise case applicationCheckStatus  " + applicationCheckStatus.UserId, "");
                                applicationCheckStatus.Status = objNameTransferRequest.Status;
                                Log.Info("ATGL Name transfer Demise case applicationCheckStatus  " + applicationCheckStatus.Status, "");
                                applicationCheckStatus.RequestNumber = objNameTransferRequest.RequestNumber;
                                Log.Info("ATGL Name transfer Demise case applicationCheckStatus  " + applicationCheckStatus.RequestNumber, "");
                                applicationCheckStatus.CreatedDate = DateTime.Now;
                                Log.Info("ATGL Name transfer Demise case applicationCheckStatus  " + applicationCheckStatus.CreatedDate, "");

                                dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                dbcontext.SubmitChanges();
                                var urlOptions = new Sitecore.Links.UrlOptions();
                                urlOptions.AlwaysIncludeServerUrl = true;
                                //var pageUrl = Sitecore.Links.LinkManager.GetItemUrl(Sitecore.Context.Item, urlOptions);
                                Log.Info("ATGL Name transfer Demise case  " + applicationCheckStatus.CreatedDate, "");

                                var startItem = Sitecore.Context.Site.HostName;
                                var StatusItem = Sitecore.Context.Database.GetItem("{5817D216-CA57-4E5A-9E61-2E17F13E570C}");
                                var StatusURL = Sitecore.Links.LinkManager.GetItemUrl(StatusItem, urlOptions);
                                Log.Info("ATGL Name transfer Demise case  " + StatusURL, "");

                                if (!string.IsNullOrEmpty(objNameTransferRequest.CustomerEmailId))
                                {
                                    Log.Info("ATGL Name transfer Demise case  Sending mail", "");
                                    SendNameTransferStatusEmail(objNameTransferRequest.RequestNumber, objNameTransferRequest.CustomerEmailId, objNameTransferRequest.Status);
                                }
                                if (!string.IsNullOrEmpty(objNameTransferRequest.Mobile))
                                {

                                    Data.Items.Item settingsItem;
                                    settingsItem = Context.Database.GetItem(Templates.MailTemplate.SMSNameTransferRequest);
                                    var mailTemplateItem = settingsItem;
                                    var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                    string bodyText = subject.Value;
                                    bodyText = bodyText.Replace("[RequestNumber]", objNameTransferRequest.RequestNumber);
                                    bodyText = bodyText.Replace("[StatusURL]", StatusURL);

                                    SendNameTransferStatusSMS(objNameTransferRequest.Mobile, bodyText);
                                    Log.Info("ATGL Name transfer Demise case Message Sent Successfully ", "");
                                }



                                Log.Info("ATGL Name transfer Demise case Changes submitted Successfully ", "");
                                string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/PopupMessageOnSave", "Your name transfer request #" + r.RequestNumber + " is generated and will be resolved within 15 days.");

                                ViewBag.Message = messagetobedisplayed;
                                Session["Message"] = messagetobedisplayed;

                            }
                            else
                            {
                                objNameTransferRequest.SAPResponseComment = r.MessageFlag + ";" + r.Message;
                                dbcontext.SubmitChanges();
                                string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/PopupMessageOnFailedSave", "Your name transfer request has been failed. Please Contact ATGL. Error is:" + r.MessageFlag + r.Message);
                                Log.Info("ATGL Name transfer failed " + r.CustomerID, "ATGL Name Change ");
                                Log.Info("ATGL Name transfer failed " + r.Message, "ATGL Name Change ");
                                ViewBag.Message = messagetobedisplayed;
                                Session["Message"] = messagetobedisplayed;

                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Info("ATGL Name transfer Demise case information error at " + ex.Message, this + "ATGL Name Change ");
                        return this.Redirect("/name-transfer");
                    }

                }
                else
                {
                    ClearedNameTransferAdminSectionSession();
                    ModelState.Clear();
                }
            }
            catch (Exception ex)
            {
                Log.Error("ATGL Name transfer application Additional Details/document/Payment error " + ex.Message, "ATGL Name transfer" + this);
                return this.Redirect("~/Name-Transfer");
            }
            return View(model);
        }
        #endregion

        #region Adani Gas Name Transfer Upload / Download / Show / Reject /Document  

        public string saveUserAttachmentFile(List<DoucmentDataGas> files, string ID)
        {
            NameTransferRequestDataContext dbcontexts = new NameTransferRequestDataContext();
            string Filename = "";

            try
            {
                foreach (var item in files)
                {
                    Filename = item.Documentdata.FileName;
                    if (item != null && item.Documentdata.ContentLength > 0)
                    {
                        Log.Info("ATGL Name transfer document upload start" + item.Documentdata.FileName + " ID " + ID, this);
                        var fileExt = Path.GetExtension(item.Documentdata.FileName);
                        var userFile = Path.GetFileName(item.Documentdata.FileName);

                        byte[] bytes;
                        if (fileExt == ".jpg" || fileExt == ".jpeg")
                        {
                            ExifReader ExifReaderobj = new ExifReader();

                            bytes = ExifReaderobj.SetUpMetadataOnImage(item.Documentdata.InputStream, item.Documentdata.FileName);
                        }
                        else
                        {
                            using (BinaryReader br = new BinaryReader(item.Documentdata.InputStream))
                            {
                                bytes = br.ReadBytes(item.Documentdata.ContentLength);
                            }
                        }
                        using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                        {
                            var checklist = dbcontexts.NameTransferDocuments.Where(x => x.NameTransferId == ID && x.DocumentType.Equals(item.documentType));

                            if (checklist != null && checklist.Count() > 0)
                            {
                                var uploaddocument = checklist.FirstOrDefault();
                                uploaddocument.FileName = item.Documentdata.FileName;
                                uploaddocument.ContentType = item.Documentdata.ContentType;
                                uploaddocument.DocumentType = item.documentType;
                                uploaddocument.DocData = bytes;
                                uploaddocument.ModifiedDate = DateTime.Now;
                                uploaddocument.SubDocumentType = item.documentName;
                                if (uploaddocument.DocumentStatus == "Rejected Document")
                                {
                                    uploaddocument.DocumentStatus = "Re-UploadDocument";
                                }
                                Log.Info("ATGL Name transfer document upload " + uploaddocument.FileName + " ID " + ID, this);
                                dbcontexts.SubmitChanges();
                            }
                            else
                            {

                                NameTransferDocument uploaddocument = new NameTransferDocument();
                                //NameTransferRequestDetail obj = new NameTransferRequestDetail();
                                uploaddocument.Id = Guid.NewGuid();
                                uploaddocument.NameTransferId = ID;
                                uploaddocument.FileName = item.Documentdata.FileName;
                                uploaddocument.ContentType = item.Documentdata.ContentType;
                                uploaddocument.DocumentType = item.documentType;
                                uploaddocument.DocData = bytes;
                                uploaddocument.CreatedDate = DateTime.Now;
                                uploaddocument.SubDocumentType = item.documentName;
                                NameTransferRequestDetail obj = dbcontext.NameTransferRequestDetails.Where(i => i.Id.ToString() == ID).FirstOrDefault();
                                obj.Status = "Submitted";

                                Log.Info("ATGL Name transfer document upload " + uploaddocument.FileName + " ID " + ID, this);
                                Log.Info("ATGL Name transfer application save document " + obj.CustomerId, "ATGL Name transfer" + this);

                                dbcontext.NameTransferDocuments.InsertOnSubmit(uploaddocument);

                                dbcontext.SubmitChanges();
                                Log.Info("ATGL Name transfer doc upload Successfully" + uploaddocument.FileName + " ID " + ID, this);
                            }

                        }

                    }

                }
            }
            catch (Exception ex)
            {
                Log.Error("ATGL Name transfer register document upload failed " + Filename + " ID " + ID + "error: " + ex.Message, this);
            }
            return string.Empty;
        }

        public FileResult DownloadNameTransferAttachmentFile(string id)
        {
            try
            {
                using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                {
                    if (id != null)
                    {
                        var filedownload = dbcontext.NameTransferDocuments.Where(x => x.Id.ToString() == id).FirstOrDefault();
                        return File(filedownload.DocData.ToArray(), filedownload.ContentType, filedownload.FileName);

                    }
                }
            }
            catch (Exception ex)
            {

            }
            return null;
        }

        public FileResult ShowNameTransferAttachmentFileview(string id)
        {
            using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
            {
                var filedownload = dbcontext.NameTransferDocuments.Where(x => x.Id.ToString() == id).FirstOrDefault();

                return File(filedownload.DocData.ToArray(), filedownload.ContentType);
            }

        }

        public ActionResult ShowNameTransferAttachmentFile(string id)
        {
            return View();
        }

        public bool RejectNameTransferAttachmentFile(string id, string AdminComment)
        {
            try
            {
                using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                {
                    if (id != null)
                    {
                        NameTransferDocument RejectFile = dbcontext.NameTransferDocuments.Where(x => x.Id.ToString() == id).FirstOrDefault();

                        NameTransferRequestDetail obj = dbcontext.NameTransferRequestDetails.Where(i => i.Id.ToString() == RejectFile.NameTransferId).FirstOrDefault();

                        NameTransferChangeNameByAdmin ActionByAdmin = new NameTransferChangeNameByAdmin();

                        if (obj != null)
                        {
                            ActionByAdmin.Id = Guid.NewGuid();
                            ActionByAdmin.UserId = id;
                            ActionByAdmin.CustomerId = obj.CustomerId;
                            ActionByAdmin.Activity = "Name Transfer Document Rejected";
                            ActionByAdmin.Updated_Datetime = DateTime.Now;
                            ActionByAdmin.Old_status = obj.Status;
                            ActionByAdmin.New_status = "Additional_Details/document_Required";
                            dbcontext.NameTransferChangeNameByAdmins.InsertOnSubmit(ActionByAdmin);
                            obj.Status = "Additional_Details/document_Required";
                            NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                            applicationCheckStatus.Id = Guid.NewGuid();
                            applicationCheckStatus.UserId = obj.Id.ToString();
                            applicationCheckStatus.Status = obj.Status;
                            applicationCheckStatus.CreatedDate = DateTime.Now;
                            dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                            //SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, obj.Status);
                            if (!string.IsNullOrEmpty(obj.CustomerEmailId))
                            {
                                Data.Items.Item settingsItem;
                                settingsItem = Context.Database.GetItem(Templates.MailTemplate.AskForAdditionalDetailsAndDocumentNameTransferApplication);
                                var mailTemplateItem = settingsItem;
                                var fromMail = mailTemplateItem.Fields[Templates.MailTemplate.Fields.From];
                                var body = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Body];
                                var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                string bodyText = body.Value;
                                bodyText = bodyText.Replace("[RequestNumber]", obj.RequestNumber);
                                bodyText = bodyText.Replace("$Comment$", AdminComment);
                                //bodyText = bodyText.Replace("[Status]", obj.New_status);

                                MailMessage mail = new MailMessage
                                {
                                    From = new MailAddress(fromMail.Value),
                                    Body = bodyText,
                                    Subject = subject.Value,
                                    IsBodyHtml = true
                                };

                                mail.To.Add(obj.CustomerEmailId);

                                try
                                {
                                    MainUtil.SendMail(mail);
                                }
                                catch (Exception ex)
                                {
                                    Log.Error("Email Sending Failed", ex.Message);
                                }
                            }
                            if (!string.IsNullOrEmpty(obj.Mobile))
                            {
                                var urlOptions = new Sitecore.Links.UrlOptions();
                                urlOptions.AlwaysIncludeServerUrl = true;
                                //var pageUrl = Sitecore.Links.LinkManager.GetItemUrl(Sitecore.Context.Item, urlOptions);

                                var startItem = Sitecore.Context.Site.HostName;
                                var StatusItem = Sitecore.Context.Database.GetItem("{5817D216-CA57-4E5A-9E61-2E17F13E570C}");
                                var StatusURL = Sitecore.Links.LinkManager.GetItemUrl(StatusItem, urlOptions);

                                Data.Items.Item settingsItem;
                                settingsItem = Context.Database.GetItem(Templates.MailTemplate.SMSNameTransferApplicationApplicationOnHold);
                                var mailTemplateItem = settingsItem;
                                var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                string bodyText = subject.Value;
                                bodyText = bodyText.Replace("[RequestNumber]", obj.RequestNumber);
                                bodyText = bodyText.Replace("[StatusURL]", StatusURL);
                                bodyText = bodyText.Replace("[Comment]", obj.Status);

                                SendNameTransferStatusSMS(obj.Mobile, bodyText);

                            }

                        }


                        if (RejectFile != null)
                        {
                            RejectFile.DocumentStatus = "Rejected Document";
                            RejectFile.AdminComment = AdminComment;
                        }

                        dbcontext.SubmitChanges();
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        #endregion

        #region Adani Gas Name Transfer application status  

        public ActionResult NameTransferApplicationStatus()
        {
            ClearedNameTransferAdminSectionSession();
            var model = new ByCustomerId();
            NameTransferService nametransferdetails = new NameTransferService();
            List<City> cityList = objWebAPIAdaniGas.GetCityList();
            model.CityList = cityList.Select(x => new SelectListItem()
            {
                Text = x.CityName,
                Value = x.CityCode
            }).ToList();

            string id = Request.QueryString["id"] != null ? Request.QueryString["id"].ToString() : string.Empty;

            Session["updatebyadmin"] = Request.QueryString["id"];

            if (!string.IsNullOrEmpty(id))
            {

                using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                {
                    var registrationdata = nametransferdetails.GetRegisterNameTransferList(id);
                    var getdocument = nametransferdetails.GetDocumentNameTransferList(id);
                    var getAdminActionUpdate = nametransferdetails.GetAdminActionUpdateList(id);
                    var Meterinfo = GetMeterReadingDetails(registrationdata.CustomerId);
                    Log.Info("ATGL Name transfer application status" + registrationdata.CustomerId, "Name transfer application request number" + registrationdata.RequestNumber);
                    model.id = registrationdata.Id;
                    model.FirstName = registrationdata.FirstName;
                    model.MiddleName = registrationdata.MiddleName;
                    model.LastName = registrationdata.LastName;
                    //old data
                    model.RegisterdConsumerName = registrationdata.RegisterdConsumerName;
                    model.CustomerID = registrationdata.CustomerId;
                    model.CustomerName = registrationdata.RegisterdConsumerName;
                    model.CustomerEmailId = registrationdata.CustomerEmailId;

                    model.ConnectionType = registrationdata.ConnectionType;
                    model.MeterNumber = registrationdata.MeterNumber.TrimStart('0');
                    model.MobileNumber = registrationdata.Mobile;
                    model.EmailId = registrationdata.PreviousRegisteredEmail;
                    model.CreatedDate = Convert.ToDateTime(registrationdata.CreatedDate);
                    model.CustomerAddress = registrationdata.PreviousRegisteredAddress;
                    model.SocietyType = registrationdata.SocietyType;
                    model.ApplicationType = registrationdata.ApplicationType;
                    model.RequestNumber = registrationdata.RequestNumber;
                    model.Comment = registrationdata.Comment;
                    model.PreStatus = registrationdata.Status;

                    string comptype = "04"; string CompCat = "R"; string Partner = Meterinfo.BusinessPartnerNumber; string Taskcode = "0016";
                    //var quoteInfo = 

                    if (model.ApplicationType == "Builder_Case")
                    {
                        Taskcode = "0016";
                    }
                    else if (model.ApplicationType == "Property_ReSale")
                    {
                        Taskcode = "0078";
                    }
                    else if (model.ApplicationType == "Demise")
                    {
                        Taskcode = "0080";
                    }

                    var FetchTheQuote = objWebAPIAdaniGas.FetchTheQuote(comptype, CompCat, Partner, Taskcode);

                    //var r = objWebAPIAdaniGas.NameTransferRequestDataPost(Meterinfo.BusinessPartnerNumber, "R", "04", Taskcode, "Name transfer – " + model.ApplicationType, "1");

                    try
                    {
                        if (FetchTheQuote != null)
                        {
                            model.GSTAmount = Convert.ToDecimal(FetchTheQuote.Tax);
                        }
                        else
                            model.GSTAmount = 0;
                    }
                    catch
                    {
                        model.GSTAmount = 0;
                    }

                    model.AddAdditionalPayment = Convert.ToInt32(getAdminActionUpdate.Additional_Payment_Value) + Convert.ToInt32(model.GSTAmount);
                    var documentid = dbcontext.NameTransferDocuments.Where(x => x.NameTransferId == id).ToList();
                    if (documentid != null)
                    {
                        foreach (var item in documentid)
                        {
                            if (item.DocumentType == Convert.ToString(1))
                            {
                                model.IndexBuilderId = item.Id.ToString();
                                model.DocumentStatus1 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument1 = item.AdminComment;
                            }
                            if (item.DocumentType == Convert.ToString(2))
                            {
                                model.PossessionletterBuilderId = item.Id.ToString();
                                model.DocumentStatus2 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument2 = item.AdminComment;
                            }
                            if (item.DocumentType == Convert.ToString(3))
                            {
                                model.PhotoIDBuilderId = item.Id.ToString();
                                model.DocumentStatus3 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument3 = item.AdminComment;
                            }
                            if (item.DocumentType == Convert.ToString(4))
                            {
                                model.CoownerBuilderId = item.Id.ToString();
                                model.DocumentStatus4 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument4 = item.AdminComment;
                            }
                            if (item.DocumentType == Convert.ToString(5))
                            {
                                model.SignedIDproofId = item.Id.ToString();
                                model.DocumentStatus5 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument5 = item.AdminComment;
                            }

                            if (item.DocumentType == Convert.ToString(6))
                            {
                                model.DeathCertificateDemiseId = item.Id.ToString();
                                model.DocumentStatus6 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument6 = item.AdminComment;
                            }
                            if (item.DocumentType == Convert.ToString(7))
                            {
                                model.DocumentaryDemiseId = item.Id.ToString();
                                model.DocumentStatus7 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument7 = item.AdminComment;
                            }
                            if (item.DocumentType == Convert.ToString(8))
                            {
                                model.IDProofDemiseId = item.Id.ToString();
                                model.DocumentStatus8 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument8 = item.AdminComment;
                            }
                            if (item.DocumentType == Convert.ToString(9))
                            {
                                model.NOCDemiseId = item.Id.ToString();
                                model.DocumentStatus9 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument9 = item.AdminComment;
                            }
                            if (item.DocumentType == Convert.ToString(10))
                            {
                                model.SignedIDproofDemiseId = item.Id.ToString();
                                model.DocumentStatus10 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument10 = item.AdminComment;
                            }

                            if (item.DocumentType == Convert.ToString(11))
                            {
                                model.FirstRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus11 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument11 = item.AdminComment;
                            }
                            if (item.DocumentType == Convert.ToString(12))
                            {
                                model.SecondRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus12 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument12 = item.AdminComment;
                            }
                            if (item.DocumentType == Convert.ToString(13))
                            {
                                model.NOCRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus13 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument13 = item.AdminComment;
                            }
                            if (item.DocumentType == Convert.ToString(14))
                            {
                                model.SignedIDproofRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus14 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument14 = item.AdminComment;
                            }

                            if (item.DocumentType == Convert.ToString(15))
                            {
                                model.FirstUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus15 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument15 = item.AdminComment;
                            }
                            if (item.DocumentType == Convert.ToString(16))
                            {
                                model.SecondUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus16 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument16 = item.AdminComment;
                            }
                            if (item.DocumentType == Convert.ToString(17))
                            {
                                model.IDProofUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus17 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument17 = item.AdminComment;
                            }
                            if (item.DocumentType == Convert.ToString(18))
                            {
                                model.NOCUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus18 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument18 = item.AdminComment;
                            }
                            if (item.DocumentType == Convert.ToString(19))
                            {
                                model.SignedIDproofUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                model.DocumentStatus19 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument19 = item.AdminComment;
                            }

                            if (item.DocumentType == Convert.ToString(0))
                            {
                                model.isAdditionalDocumentID = item.Id.ToString();
                                model.DocumentStatus0 = item.DocumentStatus;
                                model.AdminCommentForRejectDocument0 = item.AdminComment;
                            }


                        }
                    }
                }
            }

            return View(model);
        }

        [HttpPost]
        public ActionResult NameTransferApplicationStatus(ByCustomerId model, string validateById = null, string validateBySearch = null, string ValidateOTP = null, string CancelRequest = null, string Continuestep1 = null, string UpdateChanges = null, string Additionalpaynow = null, string StatusResendOtps = null, string resendotpid = null, string resendotpNo = null)
        {
            try
            {
                ClearedNameTransferAdminSectionSession();
                model.stepTwo = false;
                string Partner_Type = "9001";
                List<SelectListItem> cityList = objWebAPIAdaniGas.CityList(Partner_Type);
                model.CityList = cityList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();
                if (!string.IsNullOrEmpty(model.City))
                {
                    List<SelectListItem> AreaList = objWebAPIAdaniGas.AreaOfCity(model.City, Partner_Type);
                    model.AreaList = AreaList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();
                    if (!string.IsNullOrEmpty(model.Area))
                    {
                        List<SocietyList> apartmentList = objWebAPIAdaniGas.SocietyByArea(model.Area, model.City);
                        model.ApartmentComplexList = apartmentList.ConvertAll(a =>
                        {
                            return new SelectListItem()
                            {
                                Text = a.SocietyName.ToString(),
                                Value = a.SocietyCode.ToString(),
                                Selected = false
                            };
                        });
                        if (!string.IsNullOrEmpty(model.ApartmentComplex))
                        {
                            List<HouseList> houseList = objWebAPIAdaniGas.HouseNumberBySociety(model.ApartmentComplex);
                            model.HouseNumberList = houseList.ConvertAll(a =>
                            {
                                return new SelectListItem()
                                {
                                    Text = a.HouseNumber.ToString(),
                                    Value = a.HouseNumber.ToString(),
                                    Selected = false
                                };
                            });
                            if (!string.IsNullOrEmpty(model.HouseNumber))
                            {
                                model.CustomerID = houseList.Where(h => h.HouseNumber == model.HouseNumber).FirstOrDefault().ConsumerNumber;
                            }
                        }
                    }
                }

                WebAPIAdaniGas wbAGl = new WebAPIAdaniGas();
                NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext();
                if (!string.IsNullOrEmpty(CancelRequest))
                {
                    var item = Context.Database.GetItem(Templates.AdaniGas.NameTransfer);
                    return this.Redirect(item.Url());
                }
                else if (!string.IsNullOrEmpty(validateById))
                {
                    var CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById(model.InputByUser);
                    if (CustomerInformation.Message == "Please enter valid Customer id." && CustomerInformation.MessageFlag == "F")
                    {
                        var InputMeterNumber = model.InputByUser;
                        CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById("00000" + InputMeterNumber);
                    }

                    //Check Customer id or Meter number or Request No gets validated from DB
                    var validatedetails = dbcontext.NameTransferRequestDetails.Where(x => x.CustomerId == model.InputByUser || x.MeterNumber == model.InputByUser || x.RequestNumber == model.InputByUser /*&& (x.IsRequestClosed == false*/).OrderByDescending(y => y.CreatedDate).FirstOrDefault();
                    if (validatedetails != null)
                    {
                        model.CustomerID = validatedetails.CustomerId;
                        model.MeterNumber = validatedetails.MeterNumber;
                        model.RequestNumber = validatedetails.RequestNumber;
                        //model.MobileNumber = validatedetails.Mobile;
                        if (model.MobileNumber != validatedetails.Mobile)
                        {
                            string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/UnregisteredMobileNoError", "Name change request not found with this mobile number. Please  enter mobile number which you have registered at the time of name change request.");
                            ViewBag.Message = messagetobedisplayed;
                            Session["Message"] = messagetobedisplayed;

                            return this.Redirect("~/name-transfer-status-login");
                        }
                    }
                    else
                    {
                        string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/NoRequestFound", "Name change request not found.");
                        ViewBag.Message = messagetobedisplayed;
                        Session["Message"] = messagetobedisplayed;

                        return this.Redirect("~/name-transfer-status-login");
                    }
                    Session["Cust_id"] = model.CustomerID;
                    Session["Proceed_with"] = model.ProceedWith;



                    model.CustomerIdValidated = true;

                    try
                    {
                        AdaniGasENachRegistrationModel registrationInfo = new AdaniGasENachRegistrationModel();
                        registrationInfo.MobileNo = model.MobileNumber;
                        registrationInfo.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");

                        var sendOTP = objWebAPIAdaniGas.ENachSendOtp(registrationInfo);
                        if (sendOTP.IsError)
                        {
                            this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP sending Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message));

                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            return this.View(model);
                        }
                        else if (sendOTP.MessageFlag.ToLower() == "s")
                        {
                            model.IsOTPSent = true;
                            model.IsvalidatAccount = true;
                            this.ModelState["OTPNumber"].Errors.Clear();
                            model.Message = sendOTP.Message;
                            return this.View(model);
                        }
                        else if (sendOTP.MessageFlag.ToLower() == "f")
                        {
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            this.ModelState.AddModelError(nameof(model.MobileNumber), sendOTP.Message);
                            model.Message = sendOTP.Message;
                            return this.View(model);
                        }
                        else
                        {
                            this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP failed Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message));
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            return this.View(model);
                        }
                    }
                    catch (Exception ex)
                    {
                        this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time."));
                    }
                    return View(model);
                }
                else if (!string.IsNullOrEmpty(StatusResendOtps))
                {
                    ClearedNameTransferAdminSectionSession();
                    var CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById(resendotpid);
                    //NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext();


                    //Customer id or Meter number gets validated from SAP Service
                    if (CustomerInformation.CustomerName == null || CustomerInformation.MessageFlag == "F")
                    {
                        var custInfobyMeterNumber = objWebAPIAdaniGas.ValidateCustomerByMeterNumber(resendotpid);
                        if (string.IsNullOrEmpty(custInfobyMeterNumber.CustomerID))
                        {
                            Log.Info("ATGL Name transfer validate By Id " + custInfobyMeterNumber.CustomerID, "ATGL Name Change ");
                            this.ModelState.AddModelError(nameof(resendotpid), DictionaryPhraseRepository.Current.Get("/NameTransfer/input Not valid", "Please enter valid Customer Id or Meter Number."));
                        }
                        else
                        {
                            CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById(custInfobyMeterNumber.CustomerID);
                            model.CustomerID = CustomerInformation.CustomerID;
                            Log.Info("ATGL Name transfer validate By Id " + model.CustomerID, this + "ATGL Name Change ");
                        }
                    }
                    else
                    {
                        model.CustomerID = CustomerInformation.CustomerID;
                    }

                    var Meterinfo = GetMeterReadingDetails(model.CustomerID);
                    model.MeterNumber = Meterinfo.MeterNumber.TrimStart('0');

                    if (string.IsNullOrEmpty(Meterinfo.SERNR))
                    {
                        this.ModelState.AddModelError(nameof(resendotpid), DictionaryPhraseRepository.Current.Get("/NameTransfer/CustomerID Not Move In", "Please contact customer care number 07947545252 / 07927623264 for name transfer procedure."));
                        return this.View(model);
                    }
                    model.CustomerIdValidated = true;

                    try
                    {
                        AdaniGasENachRegistrationModel registrationInfo = new AdaniGasENachRegistrationModel();
                        registrationInfo.MobileNo = resendotpNo;
                        registrationInfo.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");

                        var sendOTP = objWebAPIAdaniGas.ENachSendOtp(registrationInfo);
                        if (sendOTP.IsError)
                        {
                            this.ModelState.AddModelError(nameof(resendotpNo), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP sending Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message));
                            Log.Info("ATGL Name transfer send OTP error " + resendotpNo, this + "ATGL Name Change ");
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            return this.View(model);
                        }
                        else if (sendOTP.MessageFlag.ToLower() == "s")
                        {
                            model.IsOTPSent = true;
                            model.IsvalidatAccount = true;
                            Log.Info("ATGL Name transfer send OTP Sucessfully " + resendotpNo, this + "ATGL Name Change ");
                            this.ModelState["OTPNumber"].Errors.Clear();
                            model.Message = sendOTP.Message;
                            return this.View(model);
                        }
                        else if (sendOTP.MessageFlag.ToLower() == "f")
                        {
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            this.ModelState.AddModelError(nameof(resendotpNo), sendOTP.Message);
                            Log.Info("ATGL Name transfer send OTP failed  " + sendOTP.Message, "ATGL Name Change ");
                            model.Message = sendOTP.Message;
                            return this.View(model);
                        }
                        else
                        {
                            this.ModelState.AddModelError(nameof(resendotpNo), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP failed Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message));
                            Log.Info("ATGL Name transfer send OTP failed  " + sendOTP.Message, this + "ATGL Name Change ");
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            return this.View(model);
                        }
                    }
                    catch (Exception ex)
                    {
                        this.ModelState.AddModelError(nameof(resendotpNo), DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time."));
                        Log.Error("ATGL Name transfer send OTP failed  " + resendotpNo + ex.Message, this);
                    }
                    return View(model);
                }
                else if (!string.IsNullOrEmpty(validateBySearch))
                {
                    var CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById(model.CustomerID);

                    //Customer id or Meter number gets validated from SAP Service
                    if (CustomerInformation.CustomerName == null || CustomerInformation.MessageFlag == "F")
                    {
                        this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/NameTransfer/input Not valid", "Selection is not valid."));
                    }

                    var Meterinfo = GetMeterReadingDetails(model.CustomerID);
                    model.MeterNumber = Meterinfo.MeterNumber.TrimStart('0');

                    Session["Cust_id"] = model.CustomerID;
                    Session["Proceed_with"] = model.ProceedWith;
                    //If moved -in then proceed further
                    //-	If customer is non-move-in then show message “Please contact customer care number 07947545252 / 07927623264 for name transfer procedure”
                    if (string.IsNullOrEmpty(Meterinfo.SERNR))
                    {
                        this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/NameTransfer/CustomerID Not Move In", "Please contact customer care number 07947545252 / 07927623264 for name transfer procedure."));
                        return this.View(model);
                    }

                    model.CustomerIdValidated = true;

                    try
                    {
                        AdaniGasENachRegistrationModel registrationInfo = new AdaniGasENachRegistrationModel();
                        registrationInfo.MobileNo = model.MobileNumber;
                        registrationInfo.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");

                        var sendOTP = objWebAPIAdaniGas.ENachSendOtp(registrationInfo);
                        if (sendOTP.IsError)
                        {
                            this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP sending Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message));

                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            return this.View(model);
                        }
                        else if (sendOTP.MessageFlag.ToLower() == "s")
                        {
                            model.IsOTPSent = true;
                            model.IsvalidatAccount = true;
                            if (this.ModelState["OTPNumber"] != null)
                                this.ModelState["OTPNumber"].Errors.Clear();
                            model.Message = sendOTP.Message;
                            return this.View(model);
                        }
                        else if (sendOTP.MessageFlag.ToLower() == "f")
                        {
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            this.ModelState.AddModelError(nameof(model.MobileNumber), sendOTP.Message);
                            model.Message = sendOTP.Message;
                            return this.View(model);
                        }
                        else
                        {
                            this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/AGL Enach/OTP failed Issue", "There is some issue in sending OTP. Please try after some time. " + sendOTP.Message));
                            model.IsOTPSent = false;
                            model.IsvalidatAccount = true;
                            return this.View(model);
                        }
                    }
                    catch (Exception ex)
                    {
                        this.ModelState.AddModelError(nameof(model.MobileNumber), DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/API Issue", "There is some issue in fetching your data. Please try after some time."));
                    }
                    return View(model);
                }
                else if (!string.IsNullOrEmpty(ValidateOTP))
                {
                    model.CustomerIdValidated = true;
                    if (Session["Cust_id"] == null || Session["Cust_id"].ToString() != model.CustomerID)
                    {
                        this.ModelState.AddModelError(nameof(model.CustomerID), DictionaryPhraseRepository.Current.Get("/NameTransfer/CustomerID Invalid", "Please enter valid CustomerID."));
                        return this.View(model);
                    }
                    var CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById(model.CustomerID);
                    var outstandingAmount = objWebAPIAdaniGas.GetOutstandingAmount(model.CustomerID);
                    var Meterinfo = GetMeterReadingDetails(model.CustomerID);

                    NameTransferRequestDataContext rdb = new NameTransferRequestDataContext();

                    NameTransferRequestDetail nameTransferRequestRecord = new NameTransferRequestDetail();

                    var nameTransferRequestRecords = rdb.NameTransferRequestDetails.Where(x => x.CustomerId == model.CustomerID || x.MeterNumber == model.MeterNumber).OrderByDescending(y => y.CreatedDate).FirstOrDefault();

                    if (nameTransferRequestRecords != null)
                    {
                        nameTransferRequestRecord = rdb.NameTransferRequestDetails.Where(x => (x.CustomerId == model.CustomerID || x.MeterNumber == model.MeterNumber) /*&& x.IsRequestClosed == false*/).OrderByDescending(y => y.CreatedDate).FirstOrDefault();
                    }
                    else
                    {
                        string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/NoRequestFound", "Name change request not found.");
                        ViewBag.Message = messagetobedisplayed;
                        Session["Message"] = messagetobedisplayed;

                        return this.Redirect("~/name-transfer");
                    }

                    var isOtpValid = objWebAPIAdaniGas.EnachValidateOtp(model.MobileNumber, model.OTPNumber);
                    if (isOtpValid.Msg_Flag == "S")
                    {
                        model.IsOTPSent = true;
                        model.IsOTPValid = true;
                        if (nameTransferRequestRecord != null)
                        {
                            var checkstatus = rdb.NameTransferChangeNameByAdmins.Where(x => x.UserId == nameTransferRequestRecord.Id.ToString()).OrderBy(x => x.Updated_Datetime).ToList();

                            model.id = nameTransferRequestRecord.Id;
                            Session["UserIdForAdditionalDocumentGUID"] = model.id;
                            model.FirstName = nameTransferRequestRecord.FirstName;
                            model.MiddleName = nameTransferRequestRecord.MiddleName;
                            model.LastName = nameTransferRequestRecord.LastName;
                            model.PayableTotalAmount = Convert.ToDecimal(nameTransferRequestRecord.PayableTotalAmount);
                            //old data
                            model.RegisterdConsumerName = nameTransferRequestRecord.RegisterdConsumerName;
                            model.CustomerID = nameTransferRequestRecord.CustomerId;
                            model.ConnectionType = nameTransferRequestRecord.ConnectionType;
                            model.MeterNumber = nameTransferRequestRecord.MeterNumber;
                            model.MobileNumber = nameTransferRequestRecord.Mobile;
                            model.EmailId = nameTransferRequestRecord.PreviousRegisteredEmail;
                            model.CreatedDate = Convert.ToDateTime(nameTransferRequestRecord.CreatedDate);
                            model.CustomerAddress = nameTransferRequestRecord.PreviousRegisteredAddress;
                            model.SocietyType = nameTransferRequestRecord.SocietyType;
                            model.ApplicationType = nameTransferRequestRecord.ApplicationType;
                            model.PreStatus = nameTransferRequestRecord.Status;
                            model.RequestNumber = nameTransferRequestRecord.RequestNumber;
                            //model.AddAdditionalPayment = checkstatus.;
                            model.Comment = nameTransferRequestRecord.Comment;
                            model.CustomerEmailId = nameTransferRequestRecord.CustomerEmailId;
                            model.GasSupply = nameTransferRequestRecord.GasSupply;


                            foreach (var item in checkstatus)
                            {
                                if (item.Old_data == null || item.New_data == null)
                                {
                                    model.ShowAdditionalDetailsComment = item.Comment;
                                    model.ShowisAdditionalDocumentRequired = item.is_additional_documents_reuired.ToString();
                                    model.ShowApprovedComment = item.Comment;
                                    model.ShowRejectedComment = item.Comment;
                                    model.AddAdditionalPayment = Convert.ToInt16(item.Additional_Payment_Value);
                                }
                            }

                            var documentid = rdb.NameTransferDocuments.Where(x => x.NameTransferId == nameTransferRequestRecord.Id.ToString()).ToList();
                            if (documentid != null)
                            {
                                foreach (var item in documentid)
                                {
                                    if (item.DocumentType == Convert.ToString(1))
                                    {
                                        model.IndexBuilderId = item.Id.ToString();
                                        model.DocumentStatus1 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument1 = item.AdminComment;
                                        model.IndexBuilder_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(2))
                                    {
                                        model.PossessionletterBuilderId = item.Id.ToString();
                                        model.DocumentStatus2 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument2 = item.AdminComment;
                                        model.PossessionletterBuilder_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(3))
                                    {
                                        model.PhotoIDBuilderId = item.Id.ToString();
                                        model.DocumentStatus3 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument3 = item.AdminComment;
                                        model.PhotoIDBuilder_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(4))
                                    {
                                        model.CoownerBuilderId = item.Id.ToString();
                                        model.DocumentStatus4 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument4 = item.AdminComment;
                                        model.CoownerBuilder_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(5))
                                    {
                                        model.SignedIDproofId = item.Id.ToString();
                                        model.DocumentStatus5 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument5 = item.AdminComment;
                                        model.SignedIDproof_content_type = item.SubDocumentType;
                                    }

                                    if (item.DocumentType == Convert.ToString(6))
                                    {
                                        model.DeathCertificateDemiseId = item.Id.ToString();
                                        model.DocumentStatus6 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument6 = item.AdminComment;
                                        model.DeathCertificateDemise_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(7))
                                    {
                                        model.DocumentaryDemiseId = item.Id.ToString();
                                        model.DocumentStatus7 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument7 = item.AdminComment;
                                        model.DocumentaryDemise_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(8))
                                    {
                                        model.IDProofDemiseId = item.Id.ToString();
                                        model.DocumentStatus8 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument8 = item.AdminComment;
                                        model.IDProofDemise_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(9))
                                    {
                                        model.NOCDemiseId = item.Id.ToString();
                                        model.DocumentStatus9 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument9 = item.AdminComment;
                                        model.NOCDemise_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(10))
                                    {
                                        model.SignedIDproofDemiseId = item.Id.ToString();
                                        model.DocumentStatus10 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument10 = item.AdminComment;
                                        model.SignedIDproofDemise_content_type = item.SubDocumentType;
                                    }

                                    if (item.DocumentType == Convert.ToString(11))
                                    {
                                        model.FirstRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus11 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument11 = item.AdminComment;
                                        model.FirstRegisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(12))
                                    {
                                        model.SecondRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus12 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument12 = item.AdminComment;
                                        model.SecondRegisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(13))
                                    {
                                        model.NOCRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus13 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument13 = item.AdminComment;
                                        model.NOCRegisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(14))
                                    {
                                        model.SignedIDproofRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus14 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument14 = item.AdminComment;
                                        model.SignedIDproofRegisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                    }

                                    if (item.DocumentType == Convert.ToString(15))
                                    {
                                        model.FirstUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus15 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument15 = item.AdminComment;
                                        model.FirstUnregisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(16))
                                    {
                                        model.SecondUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus16 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument16 = item.AdminComment;
                                        model.SecondUnregisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(17))
                                    {
                                        model.IDProofUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus17 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument17 = item.AdminComment;
                                        model.IDProofUnregisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(18))
                                    {
                                        model.NOCUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus18 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument18 = item.AdminComment;
                                        model.NOCUnregisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(19))
                                    {
                                        model.SignedIDproofUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                        model.DocumentStatus19 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument19 = item.AdminComment;
                                        model.SignedIDproofUnregisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                    }

                                    if (item.DocumentType == Convert.ToString(0))
                                    {
                                        model.isAdditionalDocumentID = item.Id.ToString();
                                        model.DocumentStatus0 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument0 = item.AdminComment;
                                    }
                                    if (item.DocumentType == Convert.ToString(20))
                                    {
                                        model.MunicipalCorporationTaxBillDemiseUnregisteredHousingId = item.Id.ToString();
                                        model.DocumentStatus20 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument20 = item.AdminComment;
                                        model.MunicipalCorporationTaxBillDemiseUnregisteredHousing_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(21))
                                    {
                                        model.ElectricityBillDemiseUnregisteredHousingId = item.Id.ToString();
                                        model.DocumentStatus21 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument21 = item.AdminComment;
                                        model.ElectricityBillDemiseUnregisteredHousing_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(22))
                                    {
                                        model.OtherDemiseUnregisteredHousingId = item.Id.ToString();
                                        model.DocumentStatus22 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument22 = item.AdminComment;
                                        model.OtherDemiseUnregisteredHousing_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(23))
                                    {
                                        model.DeathCertificateDemiseUnregisteredHousingId = item.Id.ToString();
                                        model.DocumentStatus23 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument23 = item.AdminComment;
                                        model.DeathCertificateDemiseUnregisteredHousing_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(24))
                                    {
                                        model.IDProofDemiseUnregisteredHousingId = item.Id.ToString();
                                        model.DocumentStatus24 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument24 = item.AdminComment;
                                        model.IDProofDemiseUnregisteredHousing_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(25))
                                    {
                                        model.NOCDemiseUnregisteredHousingId = item.Id.ToString();
                                        model.DocumentStatus25 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument25 = item.AdminComment;
                                        model.NOCDemiseUnregisteredHousing_content_type = item.SubDocumentType;
                                    }
                                    if (item.DocumentType == Convert.ToString(26))
                                    {
                                        model.SignedIDprooDemiseUnregisteredHousingID = item.Id.ToString();
                                        model.DocumentStatus26 = item.DocumentStatus;
                                        model.AdminCommentForRejectDocument26 = item.AdminComment;
                                        model.SignedIDproofDemiseUnregisteredHousing_content_type = item.SubDocumentType;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Session["customerApplicationCurrentStatus"] = nameTransferRequestRecords.Status;
                            return this.View("~/Views/AdaniGas/NameTransferApplicantStatusFlow.cshtml");
                        }
                        model.ProceedWith = Session["Proceed_with"].ToString();
                        model.IsOTPValid = true;
                        model.stepOne = "Continuestep1";
                        ModelState.Clear();
                        //return this.View(model);

                        //extracting customer information from NameTransferRequestDetails and return application track status                        
                        Log.Info("At NameTransferApplicationStatus", this);
                        model.CustomerIdValidated = true;

                        try
                        {
                            if (CustomerInformation.CustomerID != "" && CustomerInformation.CustomerID != null)
                            {

                                if (nameTransferRequestRecord != null)
                                {
                                    Log.Info("Record Found", this);
                                    var recordCurrentStatus = nameTransferRequestRecord.Status;
                                    Session["customerApplicationCurrentStatus"] = recordCurrentStatus;
                                    Session["customerID"] = nameTransferRequestRecord.CustomerId;
                                    Session["RequestNumber"] = nameTransferRequestRecord.RequestNumber;
                                    Session["MeterNumber"] = nameTransferRequestRecord.MeterNumber;
                                    Session["NameTransferMobile"] = nameTransferRequestRecord.Mobile;

                                    var NameTransferstatusLists = dbcontext.NameTransferStatus.Select(a => a.NameTransferStatus1).ToList();

                                    model.NameTransferstatusList = dbcontext.NameTransferStatus.ToList();
                                    var resultlist = dbcontext.NameTransferApplicationCheckStatus.Where(x => x.UserId == nameTransferRequestRecord.Id.ToString()).OrderBy(z => z.CreatedDate).ToList();

                                    model.NameTransferCheckStatusList = resultlist.Where(b => NameTransferstatusLists.Contains(b.Status)).Select(c => c.Status).ToList();

                                    if (recordCurrentStatus == "Additional_Details/document_Required" || recordCurrentStatus == "Additional_Details/document/Payment_Required" || recordCurrentStatus == "Application_Submited_But_Payment_Required")
                                    {
                                        //return this.Redirect("/NameTransfer1");
                                        //View needs to be added and redirected to additional detail page
                                        return this.View(model);
                                    }
                                    else
                                    {
                                        return this.View("~/Views/AdaniGas/NameTransferApplicantStatusFlow.cshtml", model);
                                    }

                                }
                                else
                                {
                                    Session["customerApplicationInput"] = "Invalid Input";
                                    Session["customerApplicationCurrentStatus"] = "";
                                    Session["customerID"] = CustomerInformation.CustomerID;
                                    Log.Info("Record Not Found", this);
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            Log.Error("Continue Step 1 Status Flow error" + e.Message, this);
                        }

                    }
                    else if (isOtpValid.Msg_Flag == "F")
                    {
                        this.ModelState.AddModelError(nameof(model.OTPNumber), isOtpValid.Message);
                        model.IsOTPSent = true;
                        model.IsOTPValid = false;
                        return this.View(model);
                    }
                    else
                    {
                        this.ModelState.AddModelError(nameof(model.OTPNumber), isOtpValid.Message);
                        model.IsOTPSent = true;
                        model.IsOTPValid = false;
                        return this.View(model);
                    }
                }
                else if (!string.IsNullOrEmpty(UpdateChanges))
                {
                    try
                    {

                        //model.AddAdditionalPayment = 100;
                        var obj = dbcontext.NameTransferRequestDetails.Where(x => x.Id.ToString() == model.id.ToString()).FirstOrDefault();
                        obj.OtherDetails = model.OtherDetails;
                        //obj.FirstName = model.FirstName;
                        //obj.MiddleName = model.MiddleName;
                        //obj.LastName = model.LastName;
                        //obj.ApplicationType = model.ApplicationType;
                        //obj.SocietyType = model.SocietyType;
                        //obj.Comment = model.Comment;
                        obj.ModifiedDate = DateTime.Now;

                        //Update Comments in SAP 
                        AdaniGasNameTransferComplaintSetModel CommentUpdateSAP = new AdaniGasNameTransferComplaintSetModel();
                        if (!string.IsNullOrEmpty(model.OtherDetails))
                        {
                            Log.Info("Name Transfer application customer comments store in SAP  :" + obj.RequestNumber, this);
                            CommentUpdateSAP.ComplaintNo = obj.RequestNumber;
                            CommentUpdateSAP.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");
                            CommentUpdateSAP.Message = string.Empty;
                            CommentUpdateSAP.MsgFlag = string.Empty;
                            CommentUpdateSAP.RejectComment = model.OtherDetails;
                            var commentUpdateSAPService = objWebAPIAdaniGas.NameTransferRequestComments(CommentUpdateSAP);
                            Log.Info("Name Transfer application customer comments sap Succesfully Updated in SAP:" + commentUpdateSAPService.MsgFlag + commentUpdateSAPService.Message + obj.RequestNumber, this);
                        }
                        dbcontext.SubmitChanges();
                        List<DoucmentDataGas> httpPostedFileBases = new List<DoucmentDataGas>();

                        //For Builder Case
                        if (model.IndexBuilder != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.IndexBuilder, documentType = "1", documentName = model.IndexBuilder_content_type });
                        if (model.PossessionletterBuilder != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.PossessionletterBuilder, documentType = "2", documentName = model.PossessionletterBuilder_content_type });
                        if (model.PhotoIDBuilder != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.PhotoIDBuilder, documentType = "3", documentName = model.PhotoIDBuilder_content_type });
                        if (model.CoownerBuilder != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.CoownerBuilder, documentType = "4", documentName = model.CoownerBuilder_content_type });
                        if (model.SignedIDproof != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.SignedIDproof, documentType = "5", documentName = model.SignedIDproof_content_type });

                        //For Demise Case
                        if (model.DeathCertificateDemise != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.DeathCertificateDemise, documentType = "6", documentName = model.DeathCertificateDemise_content_type });
                        if (model.DocumentaryDemise != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.DocumentaryDemise, documentType = "7", documentName = model.DocumentaryDemise_content_type });
                        if (model.IDProofDemise != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.IDProofDemise, documentType = "8", documentName = model.IDProofDemise_content_type });
                        if (model.NOCDemise != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.NOCDemise, documentType = "9", documentName = model.NOCDemise_content_type });
                        if (model.SignedIDproofDemise != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.SignedIDproofDemise, documentType = "10", documentName = model.SignedIDproofDemise_content_type });

                        //For Unregistered Housing Society -  Demise Case
                        if (model.MunicipalCorporationTaxBillDemiseUnregisteredHousing != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.MunicipalCorporationTaxBillDemiseUnregisteredHousing, documentType = "20", documentName = model.MunicipalCorporationTaxBillDemiseUnregisteredHousing_content_type });
                        if (model.ElectricityBillDemiseUnregisteredHousing != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.ElectricityBillDemiseUnregisteredHousing, documentType = "21", documentName = model.ElectricityBillDemiseUnregisteredHousing_content_type });
                        if (model.OtherDemiseUnregisteredHousing != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.OtherDemiseUnregisteredHousing, documentType = "22", documentName = model.OtherDemiseUnregisteredHousing_content_type });
                        if (model.DeathCertificateDemiseUnregisteredHousing != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.DeathCertificateDemiseUnregisteredHousing, documentType = "23", documentName = model.DeathCertificateDemiseUnregisteredHousing_content_type });
                        if (model.IDProofDemiseUnregisteredHousing != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.IDProofDemiseUnregisteredHousing, documentType = "24", documentName = model.IDProofDemiseUnregisteredHousing_content_type });
                        if (model.NOCDemiseUnregisteredHousing != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.NOCDemiseUnregisteredHousing, documentType = "25", documentName = model.NOCDemiseUnregisteredHousing_content_type });
                        if (model.SignedIDprooDemiseUnregisteredHousing != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.SignedIDprooDemiseUnregisteredHousing, documentType = "26", documentName = model.SignedIDproofDemiseUnregisteredHousing_content_type });

                        //For Registered Housing Society - Property-Resale
                        if (model.FirstRegisteredHousingSocietypropertyresale != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.FirstRegisteredHousingSocietypropertyresale, documentType = "11", documentName = model.FirstRegisteredHousingSocietypropertyresale_content_type });
                        if (model.SecondRegisteredHousingSocietypropertyresale != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.SecondRegisteredHousingSocietypropertyresale, documentType = "12", documentName = model.SecondRegisteredHousingSocietypropertyresale_content_type });
                        if (model.NOCRegisteredHousingSocietypropertyresale != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.NOCRegisteredHousingSocietypropertyresale, documentType = "13", documentName = model.NOCRegisteredHousingSocietypropertyresale_content_type });
                        if (model.SignedIDproofRegisteredHousingSocietypropertyresale != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.SignedIDproofRegisteredHousingSocietypropertyresale, documentType = "14", documentName = model.SignedIDproofRegisteredHousingSocietypropertyresale_content_type });

                        //For Unregistered Housing Society - Property-Resale
                        if (model.FirstUnregisteredHousingSocietypropertyresale != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.FirstUnregisteredHousingSocietypropertyresale, documentType = "15", documentName = model.FirstUnregisteredHousingSocietypropertyresale_content_type });
                        if (model.SecondUnregisteredHousingSocietypropertyresale != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.SecondUnregisteredHousingSocietypropertyresale, documentType = "16", documentName = model.SecondUnregisteredHousingSocietypropertyresale_content_type });
                        if (model.IDProofUnregisteredHousingSocietypropertyresale != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.IDProofUnregisteredHousingSocietypropertyresale, documentType = "17", documentName = model.IDProofUnregisteredHousingSocietypropertyresale_content_type });
                        if (model.NOCUnregisteredHousingSocietypropertyresale != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.NOCUnregisteredHousingSocietypropertyresale, documentType = "18", documentName = model.NOCUnregisteredHousingSocietypropertyresale_content_type });
                        if (model.SignedIDproofUnregisteredHousingSocietypropertyresale != null)
                            httpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.SignedIDproofUnregisteredHousingSocietypropertyresale, documentType = "19", documentName = model.SignedIDproofUnregisteredHousingSocietypropertyresale_content_type });

                        var UploadAdditionalDocument = saveUserAttachmentFile(httpPostedFileBases, !string.IsNullOrWhiteSpace(Convert.ToString(Session["UserIdForAdditionalDocumentGUID"])) ? Convert.ToString(Session["UserIdForAdditionalDocumentGUID"]) : null);

                        NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                        if (model.ShowisAdditionalDocumentRequired == "True")
                        {
                            List<DoucmentDataGas> AdditionalhttpPostedFileBases = new List<DoucmentDataGas>();
                            if (model.isAdditionalDocument != null)
                                AdditionalhttpPostedFileBases.Add(new DoucmentDataGas() { Documentdata = model.isAdditionalDocument, documentType = "0", documentName = "" });

                            var UploadAdditionalDocuments = saveUserAttachmentFile(AdditionalhttpPostedFileBases, !string.IsNullOrWhiteSpace(Convert.ToString(Session["UserIdForAdditionalDocumentGUID"])) ? Convert.ToString(Session["UserIdForAdditionalDocumentGUID"]) : null);

                            NameTransferRequestDataContext newdbcontext = new NameTransferRequestDataContext();

                            var check = newdbcontext.NameTransferRequestDetails.Where(x => x.Id == model.id).FirstOrDefault();

                            if (model.PreStatus == "Additional_Details/document/Payment_Required")
                            {
                                if (UploadAdditionalDocuments != null)
                                {
                                    check.Status = "Application_Submited_But_Payment_Required";
                                    applicationCheckStatus.Id = Guid.NewGuid();
                                    applicationCheckStatus.UserId = check.Id.ToString();
                                    applicationCheckStatus.Status = check.Status;
                                    applicationCheckStatus.RequestNumber = check.RequestNumber;
                                    applicationCheckStatus.CreatedDate = DateTime.Now;
                                }
                            }
                            else if (model.PreStatus == "Additional_Details/document_Required")
                            {
                                if (UploadAdditionalDocuments != null)
                                {
                                    check.Status = "Resubmitted";
                                    applicationCheckStatus.Id = Guid.NewGuid();
                                    applicationCheckStatus.UserId = check.Id.ToString();
                                    applicationCheckStatus.Status = check.Status;
                                    applicationCheckStatus.RequestNumber = check.RequestNumber;
                                    applicationCheckStatus.CreatedDate = DateTime.Now;
                                }

                            }
                            SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, obj.Status);
                            newdbcontext.SubmitChanges();
                        }
                        else
                        {
                            NameTransferRequestDataContext datadbcontext = new NameTransferRequestDataContext();
                            var check = datadbcontext.NameTransferRequestDetails.Where(x => x.Id == model.id).FirstOrDefault();
                            if (model.PreStatus == "Additional_Details/document/Payment_Required")
                            {
                                check.Status = "Application_Submited_But_Payment_Required";
                                applicationCheckStatus.Id = Guid.NewGuid();
                                applicationCheckStatus.UserId = check.Id.ToString();
                                applicationCheckStatus.Status = check.Status;
                                applicationCheckStatus.RequestNumber = check.RequestNumber;
                                applicationCheckStatus.CreatedDate = DateTime.Now;
                            }
                            else if (model.PreStatus == "Additional_Details/document_Required")
                            {
                                check.Status = "Resubmitted";
                                applicationCheckStatus.Id = Guid.NewGuid();
                                applicationCheckStatus.UserId = check.Id.ToString();
                                applicationCheckStatus.Status = check.Status;
                                applicationCheckStatus.RequestNumber = check.RequestNumber;
                                applicationCheckStatus.CreatedDate = DateTime.Now;
                            }
                            SendNameTransferStatusEmail(obj.RequestNumber, obj.CustomerEmailId, obj.Status);
                            datadbcontext.SubmitChanges();
                        }

                        dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                        dbcontext.SubmitChanges();

                        model.ProceedWith = Session["Proceed_with"].ToString();
                        model.IsOTPValid = true;
                        model.stepTwo = true;

                        if (model.PreStatus == "Additional_Details/document/Payment_Required")
                        {
                            return PartialView("~/Views/AdaniGas/Partial/_QuickPayAdaniGasNameTransfer.cshtml", model);
                        }
                        else
                        {
                            string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/ReSubmittedWithDetailsOrDocument", "Your Name change request Resubmitted Successfully.");
                            ViewBag.Message = messagetobedisplayed;
                            Session["Message"] = messagetobedisplayed;

                            return this.Redirect("~/Name-Transfer");
                        }

                    }
                    catch (Exception ex)
                    {
                        Log.Error("Name Transfer Application Status", ex, this);
                        return this.Redirect("~/Name-Transfer");
                    }

                }
                else if (!string.IsNullOrEmpty(Additionalpaynow))
                {
                    try
                    {
                        var CustomerInformation = objWebAPIAdaniGas.ValidateCustomerById(model.CustomerID);

                        if (model.AddAdditionalPayment.ToString().Any(char.IsLetter))
                        {
                            this.ModelState.AddModelError("Amount", DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/InvalidAmount", "Invalid payable amount value. character is not allowed."));
                            return this.View(model);
                        }
                        else if (Convert.ToDecimal(model.AddAdditionalPayment) <= 0)
                        {
                            this.ModelState.AddModelError("Amount", DictionaryPhraseRepository.Current.Get("/Accounts/Pay Bill/AmountNegativeValidation", "You have not entered proper payable amount."));
                            return this.View(model);
                        }

                        PayOnline Additionalpaymodel = new PayOnline
                        {
                            AdvanceAmount = 0,
                            Amount = Convert.ToDouble(model.AddAdditionalPayment),
                            Mobile = model.MobileNumber,
                            CustomerID = model.CustomerID,
                            CustomerName = model.FirstName + " " + model.MiddleName + " " + model.LastName,
                            PaymentType = "Name Transfer",
                            UserType = "Guest",
                            PaymentGateway = model.quickPayNameTransfer.PaymentGateway
                        };

                        switch (model.quickPayNameTransfer.PaymentGateway)
                        {
                            case (int)EnumPayment.GatewayType.PayUMoney:
                                PaymentService.StorePaymentRequestAdaniGas(Additionalpaymodel);
                                string payUHTML = PaymentService.PayUMoneyTransactionRequestAPIAdaniGasRequestPost(Additionalpaymodel);
                                return Content(payUHTML);

                            case (int)EnumPayment.GatewayType.BillDesk:
                                PaymentService.StorePaymentRequestAdaniGas(Additionalpaymodel);
                                string RequestHTML = PaymentService.BillDeskTransactionRequestAPIRequestAdaniGasPost(Additionalpaymodel);
                                return Content(RequestHTML);
                            case (int)EnumPayment.GatewayType.Paytm:
                                PaymentService.StorePaymentRequestAdaniGas(Additionalpaymodel);
                                string outputHTML = PaymentService.PaytmTransactionRequestAPIRequestAdaniGasPost(Additionalpaymodel);
                                return Content(outputHTML);
                            case (int)EnumPayment.GatewayType.HDFC:
                                PaymentService.StorePaymentRequestAdaniGas(Additionalpaymodel);
                                string ReqHTML = PaymentService.HDFCTransactionRequestAPIRequestAdaniGasPost(Additionalpaymodel);
                                return Content(ReqHTML);
                            default:
                                break;
                        }

                        Session["UpdateMessage"] = new InfoMessage(DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Submitted Successfully", "Submitted Successfully."));

                        return Redirect(Request.RawUrl);
                    }
                    catch (Exception ex)
                    {
                        Log.Error("Name Transfer Additional Application Payment error is :", ex, this);
                        return this.Redirect("~/Name-Transfer");
                    }
                    return this.View(model);
                }
                else
                {
                    ModelState.Clear();
                }
            }
            catch (Exception ex)
            {
                Log.Error("Name Transfer Application Status", ex, this);
            }
            return View(model);
        }

        public ActionResult NameTransferApplicationStatusFlow()
        {
            return View();
        }

        #endregion

        #region Adani Gas Name Transfer Admin Section

        [ChildActionOnly]
        public static ReCaptchaResponse VerifyCaptcha(string secret, string request)
        {
            if (request != null)
            {
                using (System.Net.Http.HttpClient hc = new System.Net.Http.HttpClient())
                {
                    var values = new Dictionary<string, string> {
                        {
                            "secret",
                            secret
                        },
                        {
                            "response",
                            request
                        }
                    };
                    var content = new System.Net.Http.FormUrlEncodedContent(values);
                    var Response = hc.PostAsync("https://www.google.com/recaptcha/api/siteverify", content).Result;
                    var responseString = Response.Content.ReadAsStringAsync().Result;
                    if (!string.IsNullOrWhiteSpace(responseString))
                    {
                        ReCaptchaResponse response = JsonConvert.DeserializeObject<ReCaptchaResponse>(responseString);
                        return response;
                    }
                    else
                    {
                        throw new Exception();
                        //Throw error as required  
                    }
                }
            }
            else
            {
                throw new Exception();
                //Throw error as required  
            }
        }
        public class ReCaptchaResponse
        {
            public bool success
            {
                get;
                set;
            }
            public string challenge_ts
            {
                get;
                set;
            }
            public string hostname
            {
                get;
                set;
            }
            [JsonProperty(PropertyName = "error-codes")]
            public List<string> error_codes
            {
                get;
                set;
            }
        }

        [HttpGet]
        public ActionResult NameTransferLogin()
        {
            return View(new NameTransferAdminRegistation());
        }

        [HttpPost]
        public ActionResult NameTransferLogin(NameTransferAdminRegistation model, string SignInWithCredentials = null)
        {
            if (!string.IsNullOrEmpty(SignInWithCredentials))
            {
                if (string.IsNullOrEmpty(model.Username) && string.IsNullOrEmpty(model.Password))
                {
                    ModelState.AddModelError(nameof(model.Username), "Please enter valid User Name and Password.");
                    return this.View(model);
                }
                if (string.IsNullOrEmpty(model.Username))
                {
                    ModelState.AddModelError(nameof(model.Username), "Please enter valid User Name.");
                    return this.View(model);
                }
                if (string.IsNullOrEmpty(model.Password))
                {
                    ModelState.AddModelError(nameof(model.Password), "Please enter valid Password.");
                    return this.View(model);
                }
                if (!this.IsCaptchaValid("Captcha Validation Required."))
                {
                    ViewBag.NoInfo = "Please provide Captcha and try again!";
                    ModelState.AddModelError(nameof(model.Captcha), DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/Captcha required", "Captcha Validation Required."));
                    return this.View(model);
                }

                try
                {
                    using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                    {
                        var registerUser = new NameTransferAdminRegistration();
                        if (!string.IsNullOrEmpty(model.Username))
                        {
                            registerUser = dbcontext.NameTransferAdminRegistrations.Where(x => x.Username == model.Username && x.AdminStatus == "UNBLOCK").FirstOrDefault();
                        }

                        if (registerUser != null)
                        {
                            var checkdetails = dbcontext.NameTransferAdminRegistrations.Where(x => x.Username == model.Username && x.Password == model.Password).FirstOrDefault();
                            if (checkdetails != null)
                            {
                                UserSession.nameTransferAdminRegistationSessssion = new NameTransferAdminRegistationSessssion
                                {
                                    UserName = model.Username,
                                    Password = model.Password,
                                    Name = registerUser.Name,
                                    EmailId = registerUser.Email,
                                    MobileNumber = registerUser.MobileNumber,
                                    Role = registerUser.Role.ToString(),
                                    City = registerUser.City
                                };

                                Log.Info("Login with Username:" + model.Username + "Email" + model.Email + " Role is :" + model.Role, this);

                                return this.Redirect("~/NameTransferHome");
                            }
                            else
                            {
                                ModelState.AddModelError(nameof(model.Password), "User Name and password is not valid. Please enter valid credential.");
                                return this.View(model);
                            }

                        }
                        else
                        {
                            ModelState.AddModelError(nameof(model.Password), "User is blocked. Please contact Admin.");
                            return this.View(model);
                        }
                    }

                }
                catch (System.Exception ex)
                {
                    Log.Error("Name Transfer Login Error " + ex.Message, this);
                    return this.View(model);
                }

            }
            return View(model);
        }

        public ActionResult NameTransferLogout()
        {
            this.AccountRepository.Logout();
            SessionHelper.UserSession.nameTransferAdminRegistationSessssion = null;
            var item = Context.Database.GetItem(Templates.NameTransfer.NameTransferLogin);
            Log.Info("Logout admin section :" + item, this);
            return this.Redirect(item.Url());
        }

        //Name Transfer HomePage Register Consumer List
        public ActionResult NameTransferHome(ByCustomerId model, string StartDate, string EndDate, string check, string ApplicationTypes, string requeststatus)
        {
            try
            {
                if (Session["NameTransferLogin"] != null)
                {
                    using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                    {

                        List<string> citylist = new List<string>();
                        var username = UserSession.nameTransferAdminRegistationSessssion.UserName;
                        var role = UserSession.nameTransferAdminRegistationSessssion.Role;
                        var city = UserSession.nameTransferAdminRegistationSessssion.City;
                        var TotalRequest = dbcontext.NameTransferRequestDetails.ToList();

                        citylist = city.Split('|').ToList<string>();
                        List<NameTransferRequestDetail> NameTransferApplication = new List<NameTransferRequestDetail>();
                        string CityName = "";
                        var CityCodeName = new List<string>();

                        string Partner_Type = "9001";
                        List<SelectListItem> cityList = objWebAPIAdaniGas.CityList(Partner_Type);
                        var sapcitylist = cityList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();

                        if (citylist != null)
                        {
                            if (role == Convert.ToString(1))
                            {
                                NameTransferApplication = TotalRequest;
                            }
                            else
                            {
                                foreach (var item in citylist)
                                {
                                    foreach (var CityItem in sapcitylist)
                                    {
                                        if (item == CityItem.Value)
                                        {
                                            var result = TotalRequest.Where(x => x.CityCode == item).ToList();
                                            NameTransferApplication.AddRange(result);
                                            if (role == Convert.ToString(0))
                                            {
                                                if (item == CityItem.Value)
                                                    CityName = CityItem.Text;
                                                CityCodeName.Add(CityName);

                                            }
                                        }
                                    }

                                }
                            }

                            model.AdminCityName = string.Join("|", CityCodeName.Distinct().ToList());
                        }

                        model.NameTransferRequestStatus = dbcontext.NameTransferStatus.GroupBy(x => x.NameTransferStatus1).Select(y => y.FirstOrDefault()).Select(z => new SelectListItem()
                        {
                            Text = z.NameTransferStatusText,
                            Value = z.NameTransferStatus1

                        }).ToList();

                        Log.Info("Name Transfer Application List :" + NameTransferApplication, this);

                        model.TotalRequest = NameTransferApplication.Where(x => x.Status != string.Empty && x.Status != null).Count();
                        model.TotalSubmittedApplication = NameTransferApplication.Where(x => x.Status == "Submitted").ToList().Count();
                        model.TotalPaymentDoneApplication = NameTransferApplication.Where(x => x.Status == "PaymentDone" || x.Status == "PaymentNotRequired").ToList().Count();
                        model.TotalApprovedApplication = NameTransferApplication.Where(x => x.Status == "Approved").ToList().Count();
                        model.TotalRejectedApplication = NameTransferApplication.Where(x => x.Status == "Rejected").ToList().Count();
                        model.TotalResubmittedApplication = NameTransferApplication.Where(x => x.Status == "Resubmitted").ToList().Count();
                        model.Total_Additional_Details_document_Required = NameTransferApplication.Where(x => x.Status == "Additional_Details/document_Required").ToList().Count();
                        model.Total_Additional_Details_document_Payment_Required = NameTransferApplication.Where(x => x.Status == "Additional_Details/document/Payment_Required").ToList().Count();
                        model.Total_Application_Submited_But_Payment_Required = NameTransferApplication.Where(x => x.Status == "Application_Submited_But_Payment_Required").ToList().Count();
                        model.Total_Additional_Payment_Done_Required = NameTransferApplication.Where(x => x.Status == "AdditionalPaymentDone").Count();


                        if (((StartDate != null || StartDate != null) && (EndDate != null || EndDate != null)) || !string.IsNullOrEmpty(check) || !string.IsNullOrEmpty(ApplicationTypes) || !string.IsNullOrEmpty(requeststatus))
                        {
                            DateTime Sdate = DateTime.MinValue;
                            DateTime Edate = DateTime.MaxValue;
                            List<string> statuslist = new List<string>();
                            List<string> ApplicationTypeslist = new List<string>();
                            List<string> singlestatuslist = new List<string>();
                            bool IsStartDate = DateTime.TryParseExact(StartDate + " 00:00:00", "dd-MM-yyyy hh:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out Sdate);
                            bool IsEndDate = DateTime.TryParseExact(EndDate + " 23:59:59", "dd-MM-yyyy hh:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out Edate);

                            DateTime SdateTime = new DateTime(Sdate.Year, Sdate.Month, Sdate.Day, Sdate.Hour, Sdate.Minute, Sdate.Second);
                            DateTime EdateTime = new DateTime(Edate.Year, Edate.Month, Edate.Day, Edate.Hour, Edate.Minute, Edate.Second);

                            if (!string.IsNullOrEmpty(check))
                                statuslist = check.Split(',').ToList<string>();
                            if (!string.IsNullOrEmpty(ApplicationTypes))
                                ApplicationTypeslist = ApplicationTypes.Split(',').ToList<string>();
                            if (!string.IsNullOrEmpty(requeststatus))
                                singlestatuslist = requeststatus.Split(',').ToList<string>();


                            var qeury = NameTransferApplication.AsQueryable();
                            if (IsStartDate)
                                qeury = qeury.Where(x => x.CreatedDate >= SdateTime);
                            if (IsEndDate)
                                qeury = qeury.Where(x => x.CreatedDate <= EdateTime);

                            if (statuslist.Count() > 0 && !string.IsNullOrEmpty(check))
                                qeury = qeury.Where(x => statuslist.Any(y => y.ToString() == x.Status));
                            if (ApplicationTypeslist.Count() > 0 && !string.IsNullOrEmpty(ApplicationTypes))
                                qeury = qeury.Where(x => ApplicationTypeslist.Any(y => y.ToString() == x.ApplicationType));
                            if (singlestatuslist.Count() > 0 && !string.IsNullOrEmpty(requeststatus))
                                qeury = qeury.Where(x => singlestatuslist.Any(y => y.ToString() == x.Status));

                            Session["NameTransferSearchUrl"] = Request.Url.AbsoluteUri;
                            model.RegisterNameTransferList = qeury.OrderByDescending(x => x.CreatedDate).ToList();

                        }
                        else
                        {
                            model.RegisterNameTransferList = NameTransferApplication.Where(x => x.Status != "Rejected" && x.Status != "Approved").OrderByDescending(x => x.CreatedDate).ToList();
                        }
                        Session["NameTransferSearchUrl"] = Request.Url.AbsoluteUri;
                        Log.Info("Name Transfer Application Search data :", this);
                    }
                    return View(model);
                }
                else
                {
                    Log.Error("Name Transfer Admin section Login session is null ", this);
                    return this.Redirect("/nametransferlogin");
                }
            }
            catch (Exception ex)
            {
                Log.Error("Name Transfer Application list error :" + ex.Message, this);
                return this.Redirect("/nametransferlogin");
            }
        }

        //Create Admin for Name Transfer Admin 
        [HttpGet]
        public ActionResult CreateNameTransferAdmin()
        {
            try
            {
                NameTransferAdminRegistation model = new NameTransferAdminRegistation();
                if (Session["NameTransferLogin"] != null)
                {
                    string Partner_Type = "9001";
                    List<SelectListItem> cityList = objWebAPIAdaniGas.CityList(Partner_Type);
                    model.CityList = cityList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();
                    var list = objWebAPIAdaniGas.CityLists(Partner_Type);
                    model.checkCityList = list.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();
                    Log.Info("Create Name Transfer Admin :", this);

                    string id = Request.QueryString["Aids"] != null ? Request.QueryString["Aids"].ToString() : string.Empty;

                    if (!string.IsNullOrEmpty(id))
                    {
                        using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                        {
                            NameTransferService nametransferdetails = new NameTransferService();
                            List<string> SelectedCityList = new List<string>();
                            var adminregistrationdata = nametransferdetails.GetAdminRegisterNameTransferList(id);

                            if (adminregistrationdata != null)
                            {
                                Session["UpdateAdminDetails"] = Request.QueryString["Aids"];
                                model.Name = adminregistrationdata.Name;
                                model.MobileNumber = adminregistrationdata.MobileNumber;
                                model.Email = adminregistrationdata.Email;
                                model.City = adminregistrationdata.City;

                                if (!string.IsNullOrEmpty(adminregistrationdata.City))
                                {
                                    SelectedCityList = adminregistrationdata.City.Split('|').ToList<string>();

                                    foreach (var checklist in model.checkCityList)
                                    {
                                        foreach (var item in SelectedCityList)
                                        {
                                            if (item == checklist.Value)
                                            {
                                                checklist.Checked = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return View(model);
                }
                else
                {
                    Log.Error("Name Transfer Admin section Login session is null ", this);
                    return this.Redirect("/nametransferlogin");
                }
            }
            catch (Exception ex)
            {
                Log.Error("Name Transfer Admin section Login session is null " + ex.Message, this);
                return this.Redirect("/nametransferlogin");
            }
        }

        [HttpPost]
        public ActionResult CreateNameTransferAdmin(NameTransferAdminRegistation model, string Aids, string createnametransferadmin = null, string updatenametransferadmin = null)
        {
            if (Session["NameTransferLogin"] != null)
            {
                string Partner_Type = "9001";
                List<SelectListItem> cityList = objWebAPIAdaniGas.CityList(Partner_Type);
                model.CityList = cityList.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();
                Log.Info("Create Name Transfer Admin :", this);
                var list = objWebAPIAdaniGas.CityLists(Partner_Type);
                var sapcitylist = list.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();

                if (!string.IsNullOrEmpty(createnametransferadmin))
                {
                    try
                    {
                        model.msg = false;
                        using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                        {
                            var chekdetails = dbcontext.NameTransferAdminRegistrations.Where(x => x.MobileNumber == model.MobileNumber || x.Email == model.Email).FirstOrDefault();
                            if (chekdetails != null)
                            {
                                //Log.Info("ATGL Name transfer validate By Id " + chekdetails.CustomerID, "ATGL Name Change ");
                                if (chekdetails.MobileNumber == model.MobileNumber)
                                {
                                    this.ModelState.AddModelError(nameof(chekdetails.MobileNumber), DictionaryPhraseRepository.Current.Get("/NameTransfer/input Not valid", "This Mobile Number already in used. Please use another Mobile Number. "));
                                }
                                if (chekdetails.Email == model.Email)
                                {
                                    this.ModelState.AddModelError(nameof(chekdetails.Email), DictionaryPhraseRepository.Current.Get("/NameTransfer/input Not valid", "This Email is already in used. Please use another Email Id. "));
                                }
                                if (model.checkCityList == null)
                                {
                                    this.ModelState.AddModelError(nameof(model.checkCityList), DictionaryPhraseRepository.Current.Get("/NameTransfer/input Not valid", "Please selcet city. "));
                                }
                                return this.View(model);
                            }
                            else
                            {
                                Log.Info("Create Name Transfer Admin :" + model.Name, this);
                                Log.Info("Create Name Transfer Admin :" + model.MobileNumber, this);
                                Log.Info("Create Name Transfer Admin :" + model.Email, this);
                                NameTransferAdminRegistration obj = new NameTransferAdminRegistration();
                                var resourceNames = new List<string>();
                                var CityCodeName = new List<string>();
                                string CityName = "";
                                if (model.checkCityList != null)
                                {
                                    foreach (var item in model.checkCityList)
                                    {
                                        foreach (var CityItem in sapcitylist)
                                        {
                                            if (item.Checked == true && (item.Value == CityItem.Value))
                                            {
                                                resourceNames.Add(item.Value);
                                                if (item.Value == CityItem.Value)
                                                    CityName = item.Text;
                                                //if (item.Value == Convert.ToString(1005))
                                                //    CityName = "Vadodara";
                                                //if (item.Value == Convert.ToString(1007))
                                                //    CityName = "Faridabad";
                                                //if (item.Value == Convert.ToString(1008))
                                                //    CityName = "KHURJA";
                                                //if (item.Value == Convert.ToString(1023))
                                                //    CityName = "Palwal";
                                                CityCodeName.Add(CityName);
                                            }
                                        }


                                    }

                                    CityName = string.Join("|", CityCodeName.Distinct().ToList());
                                    model.City = string.Join("|", resourceNames.Distinct().ToList());
                                }

                                Sitecore.Data.Database dbWeb = Sitecore.Configuration.Factory.GetDatabase("web");
                                var itemInfo = dbWeb.GetItem(new Data.ID(Templates.CONAndEncryptionSettings.ID.ToString()));
                                string EncryptionKey = itemInfo.Fields[Templates.CONAndEncryptionSettings.CONSettings.EncryptionKey].Value; // "@Aeml#2020";
                                clsEncryptAES objcrypt = new clsEncryptAES(EncryptionKey);
                                string pass = System.Web.Security.Membership.GeneratePassword(8, 8);
                                string password = objcrypt.encodetext(pass);

                                model.Id = Guid.NewGuid();
                                obj.Id = model.Id;
                                obj.Name = model.Name;
                                obj.MobileNumber = model.MobileNumber;
                                obj.Email = model.Email;
                                obj.City = model.City.ToString();
                                obj.Role = "0";
                                obj.Username = model.Name;
                                obj.CreatedDate = DateTime.Now;
                                obj.ModifiedDate = DateTime.Now;
                                obj.Password = password;
                                obj.AdminStatus = "UNBLOCK";
                                dbcontext.NameTransferAdminRegistrations.InsertOnSubmit(obj);
                                dbcontext.SubmitChanges();

                                if (!string.IsNullOrEmpty(obj.Email))
                                {
                                    Data.Items.Item settingsItem;
                                    settingsItem = Context.Database.GetItem(Templates.MailTemplate.NameTransferCreateAdmin);
                                    var mailTemplateItem = settingsItem;
                                    var fromMail = mailTemplateItem.Fields[Templates.MailTemplate.Fields.From];
                                    var body = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Body];
                                    var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                    string bodyText = body.Value;
                                    bodyText = bodyText.Replace("[City]", CityName);
                                    bodyText = bodyText.Replace("[Username]", obj.Name);
                                    bodyText = bodyText.Replace("[PASSWORD]", password);

                                    MailMessage mail = new MailMessage
                                    {
                                        From = new MailAddress(fromMail.Value),
                                        Body = bodyText,
                                        Subject = subject.Value,
                                        IsBodyHtml = true
                                    };

                                    mail.To.Add(obj.Email);

                                    try
                                    {
                                        MainUtil.SendMail(mail);
                                    }
                                    catch (Exception ex)
                                    {
                                        Log.Error("Email Sending Failed" + ex.Message, this);
                                    }
                                }

                                model.msg = true;

                                if (obj.Role == "0" && !string.IsNullOrEmpty(obj.Password) && !string.IsNullOrEmpty(obj.Username))
                                {
                                    //Session["CreateNameTransferAdmin"] = "The Admin Registration has been completed by you.Username and Password is sent to admin";
                                    Log.Info("Create Name Transfer Admin:" + model.Name + "Email :" + model.Email + " MobileNumber :" + model.MobileNumber + "City :" + model.City, this);
                                    return this.Redirect("/NameTransferHome/NameTransferAdminList?CreateAdmin=true");
                                }
                                else
                                {
                                    //Session["CreateNameTransferAdmin"] = "Admin Registration is not completed.";
                                    return this.Redirect("/nametransferlogin");
                                }
                            }

                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error("Create Name Transfer Admin section error :" + ex.Message, this);
                        return this.Redirect("/nametransferlogin");
                    }
                }
                else if (!string.IsNullOrEmpty(updatenametransferadmin))
                {
                    try
                    {
                        if (model.checkCityList == null)
                        {
                            this.ModelState.AddModelError(nameof(model.checkCityList), DictionaryPhraseRepository.Current.Get("/NameTransfer/input Not valid", "Please selcet city. "));
                        }
                        //model.msg = false;
                        using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                        {
                            Log.Info("Update Name Transfer Admin Name:" + model.Name, this);
                            Log.Info("Update Name Transfer Admin MobileNumber:" + model.MobileNumber, this);
                            Log.Info("Update Name Transfer Admin Email:" + model.Email, this);
                            //Log.Info("Update Name Transfer Admin City:", model.City);
                            NameTransferAdminRegistration obj = new NameTransferAdminRegistration();
                            var resourceNames = new List<string>();
                            var CityCodeName = new List<string>();
                            string CityName = "";
                            if (model.checkCityList != null)
                            {
                                foreach (var item in model.checkCityList)
                                {
                                    foreach (var CityItem in sapcitylist)
                                    {
                                        if (item.Checked == true && (item.Value == CityItem.Value))
                                        {
                                            resourceNames.Add(item.Value);
                                            if (item.Value == CityItem.Value)
                                                CityName = item.Text;
                                            //if (item.Value == Convert.ToString(1005))
                                            //    CityName = "Vadodara";
                                            //if (item.Value == Convert.ToString(1007))
                                            //    CityName = "Faridabad";
                                            //if (item.Value == Convert.ToString(1008))
                                            //    CityName = "KHURJA";
                                            //if (item.Value == Convert.ToString(1023))
                                            //    CityName = "Palwal";
                                            CityCodeName.Add(CityName);
                                        }
                                    }


                                }

                                CityName = string.Join("|", CityCodeName.Distinct().ToList());
                                model.City = string.Join("|", resourceNames.Distinct().ToList());
                            }
                            var RegId = Session["UpdateAdminDetails"].ToString();
                            obj = dbcontext.NameTransferAdminRegistrations.SingleOrDefault(x => x.Id.ToString() == RegId);
                            if (obj != null)
                            {
                                obj.Name = model.Name;
                                obj.MobileNumber = model.MobileNumber;
                                obj.Email = model.Email;
                                obj.City = model.City.ToString();
                                obj.Username = model.Name;
                                obj.ModifiedDate = DateTime.Now;

                                //dbcontext.NameTransferAdminRegistrations.InsertOnSubmit(adminregistrationdata);
                                dbcontext.SubmitChanges();
                            }
                            if (!string.IsNullOrEmpty(obj.Email))
                            {
                                Data.Items.Item settingsItem;
                                settingsItem = Context.Database.GetItem(Templates.MailTemplate.NameTransferUpdateAdminDetails);
                                var mailTemplateItem = settingsItem;
                                var fromMail = mailTemplateItem.Fields[Templates.MailTemplate.Fields.From];
                                var body = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Body];
                                var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                string bodyText = body.Value;
                                bodyText = bodyText.Replace("[City]", CityName);
                                bodyText = bodyText.Replace("[Username]", model.Name);
                                bodyText = bodyText.Replace("[PASSWORD]", obj.Password);

                                MailMessage mail = new MailMessage
                                {
                                    From = new MailAddress(fromMail.Value),
                                    Body = bodyText,
                                    Subject = subject.Value,
                                    IsBodyHtml = true
                                };

                                mail.To.Add(model.Email);

                                try
                                {
                                    MainUtil.SendMail(mail);
                                }
                                catch (Exception ex)
                                {
                                    Log.Error("Email Sending Failed" + ex.Message, this);
                                }
                            }
                            model.msg = true;
                            Session["UpdateAdminDetails"] = null;
                            Log.Info("Create Name Transfer Admin:" + model.Name + "Email :" + model.Email + " MobileNumber :" + model.MobileNumber + "City :" + model.City, this);
                            return this.Redirect("/NameTransferHome/NameTransferAdminList?UpdateAdmin=true");

                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error("Create Name Transfer Admin section error :" + ex.Message, this);
                        return this.Redirect("/nametransferlogin");
                    }
                }
            }
            else
            {
                Log.Error("Name Transfer Admin section Login session is null ", this);
                return this.Redirect("/nametransferlogin");
            }
            return View();
        }


        public ActionResult NameTransferAdminList()
        {
            try
            {
                if (Session["NameTransferLogin"] != null)
                {
                    NameTransferService nametransferservice = new NameTransferService();
                    var model = new ByCustomerId();
                    string Partner_Type = "9001";
                    List<SelectListItem> cityList = objWebAPIAdaniGas.CityList(Partner_Type);
                    model.CityList = cityList.GroupBy(x => x.Value).Select(y => y.FirstOrDefault()).Select(z => new SelectListItem()
                    {
                        Text = z.Text,
                        Value = z.Value

                    }).ToList();

                    using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                    {
                        model.adminregistrationlist = dbcontext.NameTransferAdminRegistrations.Where(x => x.Role == "0").OrderByDescending(x => x.CreatedDate).ToList();
                        //model.adminregistrationlist.AddRange(dbcontext.NameTransferAdminRegistrations.Where(x => x.Role == "0").OrderByDescending(x => x.CreatedDate).Select(x => new NameTransferAdminRegistation() { Id = x.Id, Name = x.Name, MobileNumber = x.MobileNumber, Email = x.Email, Username = x.Username, Password = x.Password, City = x.City, CreatedDate = x.CreatedDate, ModifiedDate = x.ModifiedDate, Role = x.Role, Adminstatus = x.AdminStatus }));


                    }


                    //model.adminregistrationlist = nametransferservice.GetCreateAdminNameTransferList();

                    Log.Info("Get Name Transfer Admin list :", this);
                    return View(model);
                }
                else
                {
                    Log.Error("Name Transfer Admin section Login session is null ", this);
                    return this.Redirect("/nametransferlogin");
                }
            }
            catch (Exception ex)
            {
                Log.Error("Name Transfer Admin section Login session is null " + ex.Message, this);
                return this.Redirect("/nametransferlogin");
            }

        }

        [HttpGet]
        public ActionResult NameTransferReviewApplication()
        {
            var model = new ByCustomerId();
            if (Session["NameTransferLogin"] != null)
            {
                NameTransferService nametransferdetails = new NameTransferService();

                string ids = Request.QueryString["ids"] != null ? Request.QueryString["ids"].ToString() : string.Empty;

                Session["AdminSectionIds"] = Request.QueryString["ids"];

                if (!string.IsNullOrEmpty(ids))
                {

                    using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                    {
                        var registrationdata = nametransferdetails.GetRegisterNameTransferList(ids);
                        var getdocument = nametransferdetails.GetDocumentNameTransferList(ids);
                        var checkstatus = dbcontext.NameTransferChangeNameByAdmins.Where(x => x.UserId == registrationdata.Id.ToString()).ToList();

                        AdadniGasDBModelDataContext dataContext = new AdadniGasDBModelDataContext();
                        var Paymentdata = dataContext.PaymentHistoryDatas.Where(a => a.UserId == registrationdata.CustomerId && a.PaymentType == "Name Transfer").OrderByDescending(a => a.Created_Date).FirstOrDefault();
                        if (Paymentdata != null)
                        {
                            model.Amount = Paymentdata.Amount;
                            model.TransactionNumber = Paymentdata.TransactionId;
                        }


                        Log.Info("Get Review Name Transfer Application  :" + registrationdata.CustomerId + "Get Review Name Transfer Application Request Number " + registrationdata.RequestNumber, this);
                        model.id = registrationdata.Id;
                        model.FirstName = registrationdata.FirstName;
                        model.MiddleName = registrationdata.MiddleName;
                        model.LastName = registrationdata.LastName;
                        model.PreStatus = registrationdata.Status;
                        //old data
                        model.RegisterdConsumerName = registrationdata.RegisterdConsumerName;
                        model.CustomerID = registrationdata.CustomerId;
                        model.CustomerName = registrationdata.RegisterdConsumerName;
                        // model.CustomerName = registrationdata.;
                        model.ConnectionType = registrationdata.ConnectionType;
                        model.MeterNumber = registrationdata.MeterNumber;
                        model.MobileNumber = registrationdata.Mobile;
                        model.EmailId = registrationdata.PreviousRegisteredEmail;
                        model.PreMobileNumber = registrationdata.PreviousRegisteredMobile;
                        model.CreatedDate = Convert.ToDateTime(registrationdata.CreatedDate, CultureInfo.CurrentCulture).Date;
                        model.CustomerAddress = registrationdata.PreviousRegisteredAddress;
                        model.SocietyType = registrationdata.SocietyType;
                        model.ApplicationType = registrationdata.ApplicationType;
                        model.GasSupply = registrationdata.GasSupply;
                        //model.TransactionNumber
                        model.RequestNumber = registrationdata.RequestNumber;
                        model.Comment = registrationdata.Comment;
                        model.CustomerEmailId = registrationdata.CustomerEmailId;
                        model.ClosedApplicationComment = registrationdata.ClosedApplicationComment;
                        foreach (var item in checkstatus)
                        {
                            if (item.Old_data == null || item.New_data == null)
                            {
                                model.ShowAdditionalDetailsComment = item.Comment;
                                model.ShowisAdditionalDocumentRequired = item.is_additional_documents_reuired.ToString();
                                model.ShowApprovedComment = item.Comment;
                                model.ShowRejectedComment = item.Comment;
                                model.AddAdditionalPayment = Convert.ToInt16(item.Additional_Payment_Value);
                            }
                        }
                        var documentid = dbcontext.NameTransferDocuments.Where(x => x.NameTransferId == ids).ToList();
                        if (documentid != null)
                        {
                            foreach (var item in documentid)
                            {
                                if (item.DocumentType == Convert.ToString(1))
                                {
                                    model.IndexBuilderId = item.Id.ToString();
                                    model.DocumentStatus1 = item.DocumentStatus;
                                    model.IndexBuilder_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(2))
                                {
                                    model.PossessionletterBuilderId = item.Id.ToString();
                                    model.DocumentStatus2 = item.DocumentStatus;
                                    model.PossessionletterBuilder_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(3))
                                {
                                    model.PhotoIDBuilderId = item.Id.ToString();
                                    model.DocumentStatus3 = item.DocumentStatus;
                                    model.PhotoIDBuilder_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(4))
                                {
                                    model.CoownerBuilderId = item.Id.ToString();
                                    model.DocumentStatus4 = item.DocumentStatus;
                                    model.CoownerBuilder_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(5))
                                {
                                    model.SignedIDproofId = item.Id.ToString();
                                    model.DocumentStatus5 = item.DocumentStatus;
                                    model.SignedIDproof_content_type = item.SubDocumentType;
                                }

                                if (item.DocumentType == Convert.ToString(6))
                                {
                                    model.DeathCertificateDemiseId = item.Id.ToString();
                                    model.DocumentStatus6 = item.DocumentStatus;
                                    model.DeathCertificateDemise_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(7))
                                {
                                    model.DocumentaryDemiseId = item.Id.ToString();
                                    model.DocumentStatus7 = item.DocumentStatus;
                                    model.DocumentaryDemise_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(8))
                                {
                                    model.IDProofDemiseId = item.Id.ToString();
                                    model.DocumentStatus8 = item.DocumentStatus;
                                    model.IDProofDemise_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(9))
                                {
                                    model.NOCDemiseId = item.Id.ToString();
                                    model.DocumentStatus9 = item.DocumentStatus;
                                    model.NOCDemise_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(10))
                                {
                                    model.SignedIDproofDemiseId = item.Id.ToString();
                                    model.DocumentStatus10 = item.DocumentStatus;
                                    model.SignedIDproofDemise_content_type = item.SubDocumentType;
                                }

                                if (item.DocumentType == Convert.ToString(11))
                                {
                                    model.FirstRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                    model.DocumentStatus11 = item.DocumentStatus;
                                    model.FirstRegisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(12))
                                {
                                    model.SecondRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                    model.DocumentStatus12 = item.DocumentStatus;
                                    model.SecondRegisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(13))
                                {
                                    model.NOCRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                    model.DocumentStatus13 = item.DocumentStatus;
                                    model.NOCRegisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(14))
                                {
                                    model.SignedIDproofRegisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                    model.DocumentStatus14 = item.DocumentStatus;
                                    model.SignedIDproofRegisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                }

                                if (item.DocumentType == Convert.ToString(15))
                                {
                                    model.FirstUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                    model.DocumentStatus15 = item.DocumentStatus;
                                    model.FirstRegisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(16))
                                {
                                    model.SecondUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                    model.DocumentStatus16 = item.DocumentStatus;
                                    model.SecondUnregisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(17))
                                {
                                    model.IDProofUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                    model.DocumentStatus17 = item.DocumentStatus;
                                    model.IDProofUnregisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(18))
                                {
                                    model.NOCUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                    model.DocumentStatus18 = item.DocumentStatus;
                                    model.NOCUnregisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(19))
                                {
                                    model.SignedIDproofUnregisteredHousingSocietypropertyresaleId = item.Id.ToString();
                                    model.DocumentStatus19 = item.DocumentStatus;
                                    model.SignedIDproofUnregisteredHousingSocietypropertyresale_content_type = item.SubDocumentType;
                                }

                                if (item.DocumentType == Convert.ToString(0))
                                {
                                    model.isAdditionalDocumentID = item.Id.ToString();
                                    model.DocumentStatus0 = item.DocumentStatus;
                                }
                                if (item.DocumentType == Convert.ToString(20))
                                {
                                    model.MunicipalCorporationTaxBillDemiseUnregisteredHousingId = item.Id.ToString();
                                    model.DocumentStatus20 = item.DocumentStatus;
                                    model.MunicipalCorporationTaxBillDemiseUnregisteredHousing_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(21))
                                {
                                    model.ElectricityBillDemiseUnregisteredHousingId = item.Id.ToString();
                                    model.DocumentStatus21 = item.DocumentStatus;
                                    model.ElectricityBillDemiseUnregisteredHousing_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(22))
                                {
                                    model.OtherDemiseUnregisteredHousingId = item.Id.ToString();
                                    model.DocumentStatus22 = item.DocumentStatus;
                                    model.OtherDemiseUnregisteredHousing_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(23))
                                {
                                    model.DeathCertificateDemiseUnregisteredHousingId = item.Id.ToString();
                                    model.DocumentStatus23 = item.DocumentStatus;
                                    model.DeathCertificateDemiseUnregisteredHousing_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(24))
                                {
                                    model.IDProofDemiseUnregisteredHousingId = item.Id.ToString();
                                    model.DocumentStatus24 = item.DocumentStatus;
                                    model.IDProofDemiseUnregisteredHousing_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(25))
                                {
                                    model.NOCDemiseUnregisteredHousingId = item.Id.ToString();
                                    model.DocumentStatus25 = item.DocumentStatus;
                                    model.NOCDemiseUnregisteredHousing_content_type = item.SubDocumentType;
                                }
                                if (item.DocumentType == Convert.ToString(26))
                                {
                                    model.SignedIDprooDemiseUnregisteredHousingID = item.Id.ToString();
                                    model.DocumentStatus26 = item.DocumentStatus;
                                    model.SignedIDproofDemiseUnregisteredHousing_content_type = item.SubDocumentType;
                                }


                            }
                        }
                    }
                }
            }
            else
            {
                Log.Error("Name Transfer Admin section Login session is null ", this);
                return this.Redirect("/nametransferlogin");
            }
            return View(model);
        }

        [HttpPost]
        public ActionResult NameTransferReviewApplication(ByCustomerId model, string updatenamebyadmin = null, string SaveApprovedDetails = null, string ClosedApplication = null, string SaveRejectedDetails = null, string SaveAdditionalDetails = null, string UpdateChanges = null)
        {
            try
            {
                if (Session["NameTransferLogin"] != null)
                {
                    if (!string.IsNullOrEmpty(updatenamebyadmin))
                    {
                        try
                        {
                            Log.Info("Get Review Name Transfer Application Customer Number  :" + model.CustomerID, this);
                            Log.Info("Get Review Name Transfer Application Request Number :" + model.RequestNumber, this);
                            using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                            {
                                NameTransferService nametransferdetails = new NameTransferService();
                                string id = Session["AdminSectionIds"].ToString();
                                var registrationdata = nametransferdetails.GetRegisterNameTransferList(id);
                                if (registrationdata != null)
                                {
                                    if (model.FirstName != registrationdata.FirstName || model.MiddleName != registrationdata.MiddleName || model.LastName != registrationdata.LastName)
                                    {
                                        NameTransferChangeNameByAdmin obj = new NameTransferChangeNameByAdmin();
                                        NameTransferRequestDetail details = new NameTransferRequestDetail();

                                        obj.Id = Guid.NewGuid();
                                        obj.UserId = id;
                                        obj.CustomerId = registrationdata.CustomerId;
                                        obj.Updated_Datetime = DateTime.Now;
                                        obj.Old_data = registrationdata.FirstName + " | " + registrationdata.MiddleName + " | " + registrationdata.LastName;
                                        obj.New_data = model.FirstName + " | " + model.MiddleName + " | " + model.LastName;
                                        obj.Activity = "Name Updated by :" + UserSession.nameTransferAdminRegistationSessssion.Name + " " + " " + "Admin Role is :" + UserSession.nameTransferAdminRegistationSessssion.Role;
                                        obj.Old_status = details.Status;
                                        var UpdateName = dbcontext.NameTransferRequestDetails.Where(a => a.Id.ToString() == id).FirstOrDefault();
                                        {
                                            UpdateName.FirstName = model.FirstName;
                                            UpdateName.MiddleName = model.MiddleName;
                                            UpdateName.LastName = model.LastName;
                                        }


                                        Log.Info("Update Review Name Transfer Application Name :" + model.FirstName, this);
                                        Log.Info("Update Review Name Transfer Application Name :" + model.LastName, this);
                                        dbcontext.NameTransferChangeNameByAdmins.InsertOnSubmit(obj);
                                        dbcontext.SubmitChanges();


                                    }
                                }
                                string longurl = Request.Url.AbsoluteUri;
                                var url = longurl + "?ids=" + id + "&&UpdateNameByAdmins=true";
                                Session["AdminSectionIds"] = null;
                                return Redirect(url);
                            }
                        }
                        catch (Exception ex)
                        {
                            Log.Error("Update Review Name Transfer Application Name error :" + ex.Message, this);
                            return this.Redirect("~/NameTransferLogin");
                        }
                    }
                    else if (!string.IsNullOrEmpty(SaveApprovedDetails))
                    {
                        try
                        {
                            AdaniGasNameTransferComplaintSetModel modelapi = new AdaniGasNameTransferComplaintSetModel();
                            AdaniGasNameTransferUpdateName NameUpdateSAP = new AdaniGasNameTransferUpdateName();
                            AdaniGasNameTransferUploadDocument UploadDocumentSAP = new AdaniGasNameTransferUploadDocument();
                            string id = Session["AdminSectionIds"].ToString();

                            using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                            {
                                if (!string.IsNullOrEmpty(id))
                                {
                                    NameTransferChangeNameByAdmin obj = new NameTransferChangeNameByAdmin();
                                    AdaniGasNameTransferComplaintSetModel CommentUpdateSAP = new AdaniGasNameTransferComplaintSetModel();
                                    var UpdateStatus = dbcontext.NameTransferRequestDetails.Where(a => a.Id.ToString() == id).FirstOrDefault();
                                    //var GetDocumentData = dbcontext.NameTransferDocuments.Where(x => x.NameTransferId == id).ToList();
                                    obj.Id = Guid.NewGuid();
                                    obj.UserId = id;
                                    obj.CustomerId = UpdateStatus.CustomerId;
                                    obj.Activity = "Approved Name Transfer Application :" + UpdateStatus.CustomerId;
                                    obj.Updated_Datetime = DateTime.Now;
                                    obj.Comment = model.ApprovedComment;
                                    obj.Old_status = UpdateStatus.Status;
                                    obj.New_status = "Approved";
                                    var username = UserSession.nameTransferAdminRegistationSessssion.UserName;

                                    //Update Comments in SAP 
                                    Log.Info("Name Transfer application customer comments store in SAP  :" + UpdateStatus.RequestNumber, this);
                                    CommentUpdateSAP.ComplaintNo = UpdateStatus.RequestNumber;
                                    CommentUpdateSAP.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");
                                    CommentUpdateSAP.Message = string.Empty;
                                    CommentUpdateSAP.MsgFlag = string.Empty;
                                    CommentUpdateSAP.RejectComment = UpdateStatus.Comment;
                                    var commentUpdateSAPService = objWebAPIAdaniGas.NameTransferRequestComments(CommentUpdateSAP);
                                    Log.Info("Name Transfer application customer comments sap Succesfully Updated in SAP:" + commentUpdateSAPService.MsgFlag + commentUpdateSAPService.Message + UpdateStatus.RequestNumber, this);

                                    modelapi.ComplaintNo = UpdateStatus.RequestNumber;
                                    modelapi.ApprovalStatus = "APPROVED";
                                    modelapi.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");
                                    modelapi.Message = string.Empty;
                                    modelapi.MsgFlag = string.Empty;
                                    modelapi.RejectComment = model.ApprovedComment;
                                    var apistatus = objWebAPIAdaniGas.NameTransferRequestApproveApplication(modelapi);
                                    Log.Info("Approve Name Transfer Application request number :" + UpdateStatus.RequestNumber, this);
                                    Log.Info("Approve Name Transfer Appliaction status :" + obj.New_status, this);

                                    //Name Update 
                                    NameUpdateSAP.CustomerId = UpdateStatus.CustomerId;
                                    NameUpdateSAP.Name_First = UpdateStatus.FirstName;
                                    NameUpdateSAP.Name_Middle = UpdateStatus.MiddleName;
                                    NameUpdateSAP.Name_Last = UpdateStatus.LastName;
                                    var nameUpdateSAPService = objWebAPIAdaniGas.AdaniGasNameTransferUpdateNames(NameUpdateSAP);
                                    Log.Info("Update Name Transfer Application Name Change in SAP :", nameUpdateSAPService);

                                    if (UpdateStatus != null)
                                    {
                                        UpdateStatus.ApproveRejectSAPResponse = "Approve Application SAP Response" + apistatus.MsgFlag + " Complaint Number : " + apistatus.ComplaintNo;
                                        UpdateStatus.Status = "Approved";
                                        UpdateStatus.ModifiedDate = DateTime.Now;
                                        if (nameUpdateSAPService.Message == "Name Succesfully Updated")
                                        {
                                            UpdateStatus.IsRequestClosed = true;
                                        }
                                        NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                                        applicationCheckStatus.Id = Guid.NewGuid();
                                        applicationCheckStatus.UserId = UpdateStatus.Id.ToString();
                                        applicationCheckStatus.Status = UpdateStatus.Status;
                                        applicationCheckStatus.RequestNumber = UpdateStatus.RequestNumber;
                                        applicationCheckStatus.CreatedDate = DateTime.Now;

                                        dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                        dbcontext.NameTransferChangeNameByAdmins.InsertOnSubmit(obj);

                                        //Email Update in SAP
                                        var GetEmailList = objWebAPIAdaniGas.NameTransferGetEmailList(UpdateStatus.CustomerId);
                                        Log.Info("Update Name Transfer Application Email Change in SAP :" + GetEmailList.Message, this);
                                        if (!string.IsNullOrEmpty(UpdateStatus.CustomerEmailId))
                                        {
                                            if (GetEmailList.EmailsList.Count > 0 && !string.IsNullOrEmpty(GetEmailList.EmailsList.First().EmailId))
                                            {
                                                var FirstEmail = GetEmailList.EmailsList.First();
                                                foreach (var item in GetEmailList.EmailsList)
                                                {
                                                    if (item.EmailId == FirstEmail.EmailId)
                                                    {
                                                        Log.Info("Update Email :" + item.EmailId, this);
                                                        var UpdateEmailISAP = objWebAPIAdaniGas.NameTransferModifyEmail(UpdateStatus.CustomerId, item.EmailId, UpdateStatus.CustomerEmailId);
                                                        Log.Info("Update Email In SAP Succesfully" + UpdateEmailISAP.Message, this);
                                                    }
                                                    else
                                                    {
                                                        Log.Info("Delete Email :" + item.EmailId, this);
                                                        var DeleteEmailSAP = objWebAPIAdaniGas.NameTransferDeleteEmail(UpdateStatus.CustomerId, item.EmailId);
                                                        Log.Info("Delete Email In SAP Succesfully" + DeleteEmailSAP.Message, this);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                Log.Info("Register Email :" + UpdateStatus.CustomerEmailId, this);
                                                var RegisterEmailISAP = objWebAPIAdaniGas.NameTransferRegisterEmail(UpdateStatus.CustomerId, UpdateStatus.CustomerEmailId);
                                                Log.Info("Register Email In SAP Succesfully" + RegisterEmailISAP.Message, this);
                                            }
                                        }
                                        else
                                        {
                                            Log.Info("Customer Email Id is not available " + UpdateStatus.CustomerId, this);
                                            foreach (var item in GetEmailList.EmailsList)
                                            {

                                                Log.Info("Delete Email :" + item.EmailId, this);
                                                var DeleteEmailSAP = objWebAPIAdaniGas.NameTransferDeleteEmail(UpdateStatus.CustomerId, item.EmailId);
                                                Log.Info("Customer Email Id is not available,Delete Email In SAP Succesfully" + DeleteEmailSAP.Message, this);

                                            }
                                        }

                                        //Mobile Number Update in SAP
                                        var GetMobileNumbers = objWebAPIAdaniGas.NameTransferGetMobileNumbersList(UpdateStatus.CustomerId);
                                        Log.Info("Update Name Transfer Application Mobile Number Change in SAP :" + GetMobileNumbers.Message, this);
                                        if (!string.IsNullOrEmpty(UpdateStatus.Mobile))
                                        {
                                            if (GetMobileNumbers.MobileNumbersList.Count > 0 && !string.IsNullOrEmpty(GetMobileNumbers.MobileNumbersList.First().MobileNo))
                                            {
                                                var FirstMobileNumber = GetMobileNumbers.MobileNumbersList.First();
                                                foreach (var item in GetMobileNumbers.MobileNumbersList)
                                                {
                                                    if (item.MobileNo == FirstMobileNumber.MobileNo)
                                                    {
                                                        Log.Info("Update Mobile Number :" + item.MobileNo, this);
                                                        var UpdateMobileNumberSAP = objWebAPIAdaniGas.NameTransferModifyMobileNumber(UpdateStatus.CustomerId, item.MobileNo, UpdateStatus.Mobile);
                                                        Log.Info("Update Mobile In SAP Succesfully" + UpdateMobileNumberSAP.Message, this);

                                                    }
                                                    else
                                                    {
                                                        Log.Info("Delete Mobile Number :" + item.MobileNo, this);
                                                        var DeleteMobileNumberSAP = objWebAPIAdaniGas.NameTransferDeleteMobileNumber(UpdateStatus.CustomerId, item.MobileNo);
                                                        Log.Info("Delete Mobile In SAP Succesfully" + DeleteMobileNumberSAP.Message, this);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                Log.Info("Register Mobile Number :" + UpdateStatus.Mobile, this);
                                                var RegisterMobileNumberSAP = objWebAPIAdaniGas.NameTransferRegisterMobileNumber(UpdateStatus.CustomerId, UpdateStatus.Mobile);
                                                Log.Info("Register Mobile In SAP Succesfully" + RegisterMobileNumberSAP.Message, this);
                                            }
                                        }

                                        //Upload Document In SAP
                                        var GetDocumentData = dbcontext.NameTransferDocuments.Where(x => x.NameTransferId == id).ToList();
                                        if (GetDocumentData != null)
                                        {
                                            UploadDocumentSAP.RequestNumber = UpdateStatus.RequestNumber;
                                            foreach (var item in GetDocumentData)
                                            {
                                                if (item.DocumentType == Convert.ToString(1))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }

                                                if (item.DocumentType == Convert.ToString(2))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }

                                                if (item.DocumentType == Convert.ToString(3))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }

                                                if (item.DocumentType == Convert.ToString(4))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }

                                                if (item.DocumentType == Convert.ToString(5))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }

                                                if (item.DocumentType == Convert.ToString(6))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }

                                                if (item.DocumentType == Convert.ToString(7))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }

                                                if (item.DocumentType == Convert.ToString(8))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }

                                                if (item.DocumentType == Convert.ToString(9))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }

                                                if (item.DocumentType == Convert.ToString(10))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }

                                                if (item.DocumentType == Convert.ToString(11))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }
                                                if (item.DocumentType == Convert.ToString(12))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }
                                                if (item.DocumentType == Convert.ToString(13))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }
                                                if (item.DocumentType == Convert.ToString(14))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }
                                                if (item.DocumentType == Convert.ToString(15))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }
                                                if (item.DocumentType == Convert.ToString(16))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }
                                                if (item.DocumentType == Convert.ToString(17))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }
                                                if (item.DocumentType == Convert.ToString(18))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }
                                                if (item.DocumentType == Convert.ToString(19))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }

                                                if (item.DocumentType == Convert.ToString(0))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }
                                                if (item.DocumentType == Convert.ToString(20))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }
                                                if (item.DocumentType == Convert.ToString(21))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }
                                                if (item.DocumentType == Convert.ToString(22))
                                                {
                                                    UploadDocumentSAP.DocName = item.SubDocumentType;
                                                    byte[] docData = item.DocData.ToArray();
                                                    UploadDocumentSAP.Document = Convert.ToBase64String(docData);
                                                }

                                                var UploadDOcumentInSAP = objWebAPIAdaniGas.NameTransferApplicationDocumentUpload(UploadDocumentSAP);
                                                if (UploadDOcumentInSAP.MsgFlag == "S")
                                                {
                                                    item.UploadDocumentSAPResponse = UploadDOcumentInSAP.MsgFlag + " : " + UploadDOcumentInSAP.Message;
                                                    item.SAPUploadDocumentStatus = true;
                                                    dbcontext.SubmitChanges();
                                                    Log.Info("Save Name Transfer Application Document in SAP :" + item.UploadDocumentSAPResponse, this);
                                                }
                                                else
                                                {
                                                    item.UploadDocumentSAPResponse = UploadDOcumentInSAP.MsgFlag + " : " + UploadDOcumentInSAP.Message;
                                                    //item.SAPUploadDocumentStatus = false;
                                                    dbcontext.SubmitChanges();

                                                    Log.Info("ATGL Name transfer Upload document failed in SAP" + UploadDOcumentInSAP.Message, this);
                                                }

                                            }
                                        }

                                        if (UpdateStatus.GasSupply == "Yes")
                                        {
                                            var Meterinfo = GetMeterReadingDetails(UpdateStatus.CustomerId);
                                            string quantity = "00";
                                            string Taskcode = "0009";

                                            var Response = objWebAPIAdaniGas.NameTransferRequestDataPost(Meterinfo.BusinessPartnerNumber, "R", "02", Taskcode, "Name transfer – " + model.GasSupply, quantity);

                                            if (Response.MessageFlag.ToLower() == "s")
                                            {
                                                Log.Info("Name Transfer : Gas Supply Request Response " + Response.MessageFlag, this);
                                                Log.Info("Name Transfer : Gas Supply Request Response " + Response.Message, this);
                                                UpdateStatus.GasSupplyRequestNumber = Response.RequestNumber;
                                                UpdateStatus.GasSupplySAPResponse = Response.MessageFlag + ";" + Response.Message;

                                            }
                                            else
                                            {
                                                Log.Info("Name Transfer : Gas Supply Request Failed " + Response.MessageFlag, this);
                                                Log.Info("Name Transfer : Gas Supply Request Failed " + Response.Message, this);
                                                UpdateStatus.GasSupplySAPResponse = Response.MessageFlag + ";" + Response.Message;
                                            }
                                        }
                                        dbcontext.SubmitChanges();
                                    }

                                    if (!string.IsNullOrEmpty(UpdateStatus.CustomerEmailId))
                                    {
                                        Data.Items.Item settingsItem;
                                        settingsItem = Context.Database.GetItem(Templates.MailTemplate.ApproveNameTransferApplication);
                                        var mailTemplateItem = settingsItem;
                                        var fromMail = mailTemplateItem.Fields[Templates.MailTemplate.Fields.From];
                                        var body = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Body];
                                        var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                        string bodyText = body.Value;
                                        bodyText = bodyText.Replace("[RequestNumber]", UpdateStatus.RequestNumber);
                                        bodyText = bodyText.Replace("$Comment$", obj.Comment);
                                        //bodyText = bodyText.Replace("[Status]", obj.New_status);

                                        MailMessage mail = new MailMessage
                                        {
                                            From = new MailAddress(fromMail.Value),
                                            Body = bodyText,
                                            Subject = subject.Value,
                                            IsBodyHtml = true
                                        };

                                        mail.To.Add(UpdateStatus.CustomerEmailId);

                                        try
                                        {
                                            MainUtil.SendMail(mail);
                                        }
                                        catch (Exception ex)
                                        {
                                            Log.Error("Email Sending Failed" + ex.Message, this);
                                        }

                                    }
                                    if (!string.IsNullOrEmpty(UpdateStatus.Mobile))
                                    {
                                        Data.Items.Item settingsItem;
                                        settingsItem = Context.Database.GetItem(Templates.MailTemplate.SMSNameTransferApplicationSuccessfulClose);
                                        var mailTemplateItem = settingsItem;
                                        var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                        string bodyText = subject.Value;
                                        bodyText = bodyText.Replace("[RequestNumber]", UpdateStatus.RequestNumber);

                                        SendNameTransferStatusSMS(UpdateStatus.Mobile, bodyText);
                                    }



                                    var sessionUrl = !string.IsNullOrWhiteSpace(Convert.ToString(Session["NameTransferSearchUrl"])) ? Convert.ToString(Session["NameTransferSearchUrl"]) : null;
                                    var url = string.Empty;
                                    if (sessionUrl.ToString().Contains("?"))
                                        url = sessionUrl + "&ApprovedMessage=true";
                                    else
                                        url = sessionUrl + "?ApprovedMessage=true";
                                    Session["ApprovedSuccessfully"] = " Name Transfer Application #" + UpdateStatus.RequestNumber + " Approved Successfully.";
                                    return this.Redirect(url);
                                }

                            }

                        }
                        catch (Exception ex)
                        {
                            Log.Error("Approve NameTransferReviewApplication " + ex.Message, this);
                            return this.Redirect("~/NameTransferLogin");
                        }
                    }
                    else if (!string.IsNullOrEmpty(SaveRejectedDetails))
                    {
                        try
                        {
                            AdaniGasNameTransferComplaintSetModel modelapi = new AdaniGasNameTransferComplaintSetModel();
                            string id = Session["AdminSectionIds"].ToString();
                            using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                            {
                                if (!string.IsNullOrEmpty(id))
                                {
                                    NameTransferChangeNameByAdmin obj = new NameTransferChangeNameByAdmin();
                                    AdaniGasNameTransferComplaintSetModel CommentUpdateSAP = new AdaniGasNameTransferComplaintSetModel();
                                    var UpdateStatus = dbcontext.NameTransferRequestDetails.Where(a => a.Id.ToString() == id).FirstOrDefault();
                                    var username = UserSession.nameTransferAdminRegistationSessssion.UserName;
                                    obj.Id = Guid.NewGuid();
                                    obj.UserId = id;
                                    obj.CustomerId = UpdateStatus.CustomerId;
                                    obj.Activity = "Reject Name Transfer Application :" + UpdateStatus.CustomerId;
                                    obj.Updated_Datetime = DateTime.Now;
                                    obj.Comment = model.RejectedComment;
                                    obj.Old_status = UpdateStatus.Status;
                                    obj.New_status = "Rejected";
                                    Log.Info("Reject Name Transfer Application request number :" + UpdateStatus.RequestNumber, this);
                                    Log.Info("Reject Name Transfer Appliaction status :" + obj.New_status, this);

                                    //Update Comments in SAP 
                                    Log.Info("Name Transfer application customer comments store in SAP  :" + UpdateStatus.RequestNumber, this);
                                    CommentUpdateSAP.ComplaintNo = UpdateStatus.RequestNumber;
                                    CommentUpdateSAP.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");
                                    CommentUpdateSAP.Message = string.Empty;
                                    CommentUpdateSAP.MsgFlag = string.Empty;
                                    CommentUpdateSAP.RejectComment = UpdateStatus.Comment;
                                    var commentUpdateSAPService = objWebAPIAdaniGas.NameTransferRequestComments(CommentUpdateSAP);
                                    Log.Info("Name Transfer application customer comments sap Succesfully Updated in SAP:" + commentUpdateSAPService.MsgFlag + commentUpdateSAPService.Message + UpdateStatus.RequestNumber, this);

                                    modelapi.ComplaintNo = UpdateStatus.RequestNumber;
                                    modelapi.ApprovalStatus = "REJECTED";
                                    modelapi.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");
                                    modelapi.Message = string.Empty;
                                    modelapi.MsgFlag = string.Empty;
                                    modelapi.RejectComment = "Rejected By " + username + " Admin Comments:" + model.RejectedComment;
                                    var apistatus = objWebAPIAdaniGas.NameTransferRequestApproveApplication(modelapi);
                                    Log.Info("Reject Name Transfer Appliaction SAP Response :" + apistatus.Message, this);
                                    if (UpdateStatus != null)
                                    {
                                        UpdateStatus.ApproveRejectSAPResponse = "Rejected Application SAP Response" + apistatus.MsgFlag + " Complaint Number : " + apistatus.ComplaintNo;
                                        UpdateStatus.Status = "Rejected";
                                        UpdateStatus.IsRequestClosed = true;
                                        UpdateStatus.ModifiedDate = DateTime.Now;
                                        Log.Info("Reject Name Transfer Application Name Change in SAP :" + UpdateStatus.ApproveRejectSAPResponse, this);

                                        NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                                        applicationCheckStatus.Id = Guid.NewGuid();
                                        applicationCheckStatus.UserId = UpdateStatus.Id.ToString();
                                        applicationCheckStatus.Status = UpdateStatus.Status;
                                        applicationCheckStatus.RequestNumber = UpdateStatus.RequestNumber;
                                        applicationCheckStatus.CreatedDate = DateTime.Now;
                                        dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);

                                        dbcontext.NameTransferChangeNameByAdmins.InsertOnSubmit(obj);
                                        dbcontext.SubmitChanges();
                                    }


                                    if (!string.IsNullOrEmpty(UpdateStatus.CustomerEmailId))
                                    {
                                        Data.Items.Item settingsItem;
                                        settingsItem = Context.Database.GetItem(Templates.MailTemplate.RejectNameTransferApplication);
                                        var mailTemplateItem = settingsItem;
                                        var fromMail = mailTemplateItem.Fields[Templates.MailTemplate.Fields.From];
                                        var body = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Body];
                                        var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                        string bodyText = body.Value;
                                        bodyText = bodyText.Replace("[RequestNumber]", UpdateStatus.RequestNumber);
                                        bodyText = bodyText.Replace("$Comment$", obj.Comment);
                                        //bodyText = bodyText.Replace("[Status]", obj.New_status);

                                        MailMessage mail = new MailMessage
                                        {
                                            From = new MailAddress(fromMail.Value),
                                            Body = bodyText,
                                            Subject = subject.Value,
                                            IsBodyHtml = true
                                        };

                                        mail.To.Add(UpdateStatus.CustomerEmailId);

                                        try
                                        {
                                            MainUtil.SendMail(mail);
                                        }
                                        catch (Exception ex)
                                        {
                                            Log.Error("Email Sending Failed" + ex.Message, this);
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(UpdateStatus.Mobile))
                                    {
                                        Data.Items.Item settingsItem;
                                        settingsItem = Context.Database.GetItem(Templates.MailTemplate.SMSNameTransferApplicationRejected);
                                        var mailTemplateItem = settingsItem;
                                        var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                        string bodyText = subject.Value;
                                        bodyText = bodyText.Replace("[RequestNumber]", UpdateStatus.RequestNumber);
                                        bodyText = bodyText.Replace("[Comment]", model.RejectedComment);

                                        SendNameTransferStatusSMS(UpdateStatus.Mobile, bodyText);
                                    }


                                    Session["AdminSectionIds"] = null;
                                    var sessionUrl = !string.IsNullOrWhiteSpace(Convert.ToString(Session["NameTransferSearchUrl"])) ? Convert.ToString(Session["NameTransferSearchUrl"]) : null;
                                    var url = string.Empty;
                                    if (sessionUrl.ToString().Contains("?"))
                                        url = sessionUrl + "&RejectedMessage=true";
                                    else
                                        url = sessionUrl + "?RejectedMessage=true";
                                    Session["RejectedSuccessfully"] = " Name Transfer Application #" + UpdateStatus.RequestNumber + " Rejected.";
                                    return this.Redirect(url);
                                }


                            }

                        }
                        catch (Exception ex)
                        {
                            Log.Error("Rejecte NameTransferReviewApplication" + ex.Message, this);
                            return this.Redirect("~/NameTransferLogin");
                        }
                    }
                    else if (!string.IsNullOrEmpty(SaveAdditionalDetails))
                    {
                        try
                        {
                            string id = Session["AdminSectionIds"].ToString();
                            using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                            {
                                if (!string.IsNullOrEmpty(id))
                                {
                                    NameTransferChangeNameByAdmin obj = new NameTransferChangeNameByAdmin();
                                    AdaniGasNameTransferComplaintSetModel CommentUpdateSAP = new AdaniGasNameTransferComplaintSetModel();
                                    var UpdateStatus = dbcontext.NameTransferRequestDetails.Where(a => a.Id.ToString() == id).FirstOrDefault();
                                    NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                                    obj.Id = Guid.NewGuid();
                                    obj.UserId = id;
                                    obj.CustomerId = UpdateStatus.CustomerId;
                                    obj.Activity = "ASk for Additional Details/document/Payment  Name Transfer Application :" + model.CustomerID;
                                    obj.Updated_Datetime = DateTime.Now;
                                    obj.Comment = model.AdditionalDetailsComment;
                                    obj.is_additional_documents_reuired = model.isAdditionalDocumentRequired;
                                    obj.Old_status = UpdateStatus.Status;
                                    obj.is_additional_payment_reuired = model.isAdditionalPaymentRequired;
                                    obj.Additional_Payment_Value = model.AddAdditionalPayment;
                                    CommentUpdateSAP.ComplaintNo = UpdateStatus.RequestNumber;
                                    CommentUpdateSAP.BPUA = DictionaryPhraseRepository.Current.Get("/Accounts/Controller Messages/EnachSendOTPBPUA", "0000000000000000");
                                    CommentUpdateSAP.Message = string.Empty;
                                    CommentUpdateSAP.MsgFlag = string.Empty;
                                    CommentUpdateSAP.RejectComment = model.AdditionalDetailsComment;
                                    var commentUpdateSAPService = objWebAPIAdaniGas.NameTransferRequestComments(CommentUpdateSAP);
                                    Log.Info("Add admin comments in sap services" + commentUpdateSAPService, this);
                                    if (model.isAdditionalPaymentRequired == true)
                                    {
                                        obj.New_status = "Additional_Details/document/Payment_Required";
                                        if (UpdateStatus != null)
                                        {
                                            UpdateStatus.Status = "Additional_Details/document/Payment_Required";
                                            UpdateStatus.ModifiedDate = DateTime.Now;
                                            applicationCheckStatus.Id = Guid.NewGuid();
                                            applicationCheckStatus.UserId = UpdateStatus.Id.ToString();
                                            applicationCheckStatus.Status = UpdateStatus.Status;
                                            applicationCheckStatus.RequestNumber = UpdateStatus.RequestNumber;
                                            applicationCheckStatus.CreatedDate = DateTime.Now;
                                            Log.Info("Name Transfer Application Additional_Details/document/Payment" + UpdateStatus.Status + model.RequestNumber, this);
                                        }
                                    }
                                    else
                                    {
                                        obj.New_status = "Additional_Details/document_Required";
                                        if (UpdateStatus != null)
                                        {
                                            UpdateStatus.Status = "Additional_Details/document_Required";
                                            UpdateStatus.ModifiedDate = DateTime.Now;
                                            applicationCheckStatus.Id = Guid.NewGuid();
                                            applicationCheckStatus.UserId = UpdateStatus.Id.ToString();
                                            applicationCheckStatus.Status = UpdateStatus.Status;
                                            applicationCheckStatus.RequestNumber = UpdateStatus.RequestNumber;
                                            applicationCheckStatus.CreatedDate = DateTime.Now;
                                            Log.Info("Name Transfer Application Additional_Details/document/Payment status " + UpdateStatus.Status + model.RequestNumber, this);
                                        }
                                    }
                                    dbcontext.NameTransferChangeNameByAdmins.InsertOnSubmit(obj);
                                    dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                    dbcontext.SubmitChanges();

                                    if (!string.IsNullOrEmpty(UpdateStatus.CustomerEmailId))
                                    {

                                        Data.Items.Item settingsItem;
                                        settingsItem = Context.Database.GetItem(Templates.MailTemplate.AskForAdditionalDetailsAndDocumentNameTransferApplication);
                                        var mailTemplateItem = settingsItem;
                                        var fromMail = mailTemplateItem.Fields[Templates.MailTemplate.Fields.From];
                                        var body = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Body];
                                        var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                        string bodyText = body.Value;
                                        bodyText = bodyText.Replace("[RequestNumber]", UpdateStatus.RequestNumber);
                                        bodyText = bodyText.Replace("$Comment$", obj.Comment);
                                        //bodyText = bodyText.Replace("[Status]", obj.New_status);

                                        MailMessage mail = new MailMessage
                                        {
                                            From = new MailAddress(fromMail.Value),
                                            Body = bodyText,
                                            Subject = subject.Value,
                                            IsBodyHtml = true
                                        };

                                        mail.To.Add(UpdateStatus.CustomerEmailId);

                                        try
                                        {
                                            MainUtil.SendMail(mail);
                                        }
                                        catch (Exception ex)
                                        {
                                            Log.Error("Email Sending Failed" + ex.Message, this);
                                        }

                                    }
                                    if (!string.IsNullOrEmpty(UpdateStatus.Mobile))
                                    {
                                        var urlOptions = new Sitecore.Links.UrlOptions();
                                        urlOptions.AlwaysIncludeServerUrl = true;
                                        //var pageUrl = Sitecore.Links.LinkManager.GetItemUrl(Sitecore.Context.Item, urlOptions);

                                        var startItem = Sitecore.Context.Site.HostName;
                                        var StatusItem = Sitecore.Context.Database.GetItem("{5817D216-CA57-4E5A-9E61-2E17F13E570C}");
                                        var StatusURL = Sitecore.Links.LinkManager.GetItemUrl(StatusItem, urlOptions);

                                        Data.Items.Item settingsItem;
                                        settingsItem = Context.Database.GetItem(Templates.MailTemplate.SMSNameTransferApplicationAdditionalDocRequired);
                                        var mailTemplateItem = settingsItem;
                                        var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                                        string bodyText = subject.Value;
                                        bodyText = bodyText.Replace("[RequestNumber]", UpdateStatus.RequestNumber);
                                        bodyText = bodyText.Replace("[StatusURL]", StatusURL);
                                        bodyText = bodyText.Replace("[Comment]", model.AdditionalDetailsComment);

                                        SendNameTransferStatusSMS(UpdateStatus.Mobile, bodyText);

                                    }

                                    Session["AdminSectionIds"] = null;
                                    var sessionUrl = !string.IsNullOrWhiteSpace(Convert.ToString(Session["NameTransferSearchUrl"])) ? Convert.ToString(Session["NameTransferSearchUrl"]) : null;
                                    var url = string.Empty;
                                    if (sessionUrl.ToString().Contains("?"))
                                        url = sessionUrl + "&AdditionalDetailsMessage=true";
                                    else
                                        url = sessionUrl + "?AdditionalDetailsMessage=true";
                                    Session["AdditionalDetailsSuccessfully"] = " Name Transfer Application Ask For Additional Details / Document / Payment Successfully : " + UpdateStatus.RequestNumber;

                                    return this.Redirect(url);
                                }

                            }

                        }
                        catch (Exception ex)
                        {
                            Log.Error("Name Transfer Application Additional_Details/document/Payment error is  " + ex.Message, this);
                            return this.Redirect("~/NameTransferLogin");
                        }
                    }
                    else if (!string.IsNullOrEmpty(ClosedApplication))
                    {
                        string id = Session["AdminSectionIds"].ToString();
                        using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                        {
                            if (!string.IsNullOrEmpty(id))
                            {
                                NameTransferChangeNameByAdmin obj = new NameTransferChangeNameByAdmin();
                                var username = UserSession.nameTransferAdminRegistationSessssion.UserName;
                                var UpdateStatus = dbcontext.NameTransferRequestDetails.Where(a => a.Id.ToString() == id).FirstOrDefault();
                                obj.Id = Guid.NewGuid();
                                obj.UserId = id;
                                obj.CustomerId = UpdateStatus.CustomerId;
                                obj.Activity = "Re-open Name Transfer Application By :" + username + "for request Number " + UpdateStatus.RequestNumber;
                                obj.Updated_Datetime = DateTime.Now;
                                obj.Comment = model.ReopenApplicationComment;
                                if (UpdateStatus != null)
                                {
                                    UpdateStatus.ClosedApplicationComment = model.ClosedApplicationComment;
                                    UpdateStatus.IsRequestClosed = true;
                                    UpdateStatus.Status = "Rejected";
                                    UpdateStatus.ModifiedDate = DateTime.Now;

                                    NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                                    applicationCheckStatus.Id = Guid.NewGuid();
                                    applicationCheckStatus.UserId = UpdateStatus.Id.ToString();
                                    applicationCheckStatus.Status = "Rejected";
                                    applicationCheckStatus.RequestNumber = UpdateStatus.RequestNumber;
                                    applicationCheckStatus.CreatedDate = DateTime.Now;

                                    dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                                    Log.Info("Closed Application By admin for customerId is :" + UpdateStatus.CustomerId, this);
                                    Log.Info("Closed Application By admin for MeterNumber is :" + UpdateStatus.MeterNumber, this);
                                    Log.Info("Closed Application By admin for Mobile Number is :" + UpdateStatus.Mobile, this);
                                }

                                dbcontext.NameTransferChangeNameByAdmins.InsertOnSubmit(obj);
                                dbcontext.SubmitChanges();

                                Session["AdminSectionIds"] = null;
                                var sessionUrl = !string.IsNullOrWhiteSpace(Convert.ToString(Session["NameTransferSearchUrl"])) ? Convert.ToString(Session["NameTransferSearchUrl"]) : null;
                                var url = string.Empty;
                                if (sessionUrl.ToString().Contains("?"))
                                    url = sessionUrl + "&ClosedApplicationMessage=true";
                                else
                                    url = sessionUrl + "?ClosedApplicationMessage=true";
                                Session["ClosedApplicationSuccessfully"] = " Name Transfer Application Closed Successfully : " + UpdateStatus.CustomerId;

                                return this.Redirect(url);
                            }
                        }
                    }
                    else
                    {
                        ModelState.Clear();
                    }
                }
                else
                {
                    Log.Error("Name Transfer Admin section Login session is null ", this);
                    return this.Redirect("/nametransferlogin");
                }


            }
            catch (Exception ex)
            {
                Log.Error("Name Transfer Review Application error is  " + ex.Message, this);
                return this.Redirect("~/nametransferlogin");
            }
            return View();
        }

        [HttpPost]
        public bool BlockUnBlockNameTransferAdmin(NameTransferAdminRegistration model, string createdadminid)
        {

            try
            {
                NewConnectionService newconnectionservice = new NewConnectionService();

                using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                {
                    string id = createdadminid;
                    var createdid = model.Id;
                    var obj = dbcontext.NameTransferAdminRegistrations.SingleOrDefault(x => x.Id.ToString() == id.ToString());
                    Log.Info("Block/UnBlock Admin Name" + obj.Name, this);
                    Log.Info("Block/UnBlock Admin MobileNumber" + obj.MobileNumber, this);
                    Log.Info("Block/UnBlock Created Admin Email" + obj.Email, this);
                    if (obj != null)
                    {
                        //dbcontext.NameTransferAdminRegistrations.DeleteOnSubmit(obj);
                        if (obj.AdminStatus == "UNBLOCK")
                        {
                            obj.AdminStatus = "BLOCK";
                            obj.ModifiedDate = DateTime.Now;
                        }
                        else
                        {
                            obj.AdminStatus = "UNBLOCK";
                            obj.ModifiedDate = DateTime.Now;
                        }
                        dbcontext.SubmitChanges();
                    }
                    return true;
                }
            }

            catch (Exception e)
            {
                Log.Error("Block/UnBlock Name Transfer Admin" + e.Message, this);
                var item = Context.Database.GetItem(Templates.NameTransfer.NameTransferLogin);
                return false;
            }
        }

        [HttpPost]
        public FileResult DownloadExcel(string StartDate, string EndDate)
        {
            try
            {
                if (Session["NameTransferLogin"] != null)
                {
                    string url = Request.UrlReferrer.Query.ToString();
                    string check = string.Empty;
                    string ApplicationTypes = string.Empty;
                    if (!string.IsNullOrEmpty(url))
                    {
                        check = HttpUtility.ParseQueryString(url).Get("check");
                        ApplicationTypes = HttpUtility.ParseQueryString(url).Get("ApplicationTypes");
                    }

                    var list = FilterTransferRquestDetailList(StartDate, EndDate, check, ApplicationTypes);
                    DataTable dt = new DataTable();
                    dt = ConvertToDataTable(list);
                    dt.Columns.Remove("Id");
                    using (XLWorkbook wb = new XLWorkbook())
                    {
                        wb.Worksheets.Add(dt, "New_NameTrasfer");

                        Response.Clear();
                        Response.Buffer = true;
                        Response.Charset = "";
                        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        Response.AddHeader("content-disposition", "attachment;filename=NameTransferApplicationList.xlsx");
                        using (MemoryStream MyMemoryStream = new MemoryStream())
                        {
                            wb.SaveAs(MyMemoryStream);
                            MyMemoryStream.WriteTo(Response.OutputStream);
                            Response.Flush();
                            Response.End();
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                Log.Error("Excel File Download Error " + ex.Message, this);

            }
            return null;
        }

        public static DataTable ConvertToDataTable(List<NameTransferRequestDetail> data)
        {
            List<NameTransferRequestDetail> list = data.ToList();

            PropertyDescriptorCollection props = null;
            DataTable table = new DataTable();
            if (list != null && list.Count > 0)
            {
                props = TypeDescriptor.GetProperties(list[0]);
                for (int i = 0; i < props.Count; i++)
                {
                    PropertyDescriptor prop = props[i];
                    table.Columns.Add(prop.Name, Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType);
                }
            }
            if (props != null)
            {
                object[] values = new object[props.Count];
                foreach (var item in data)
                {
                    for (int i = 0; i < values.Length; i++)
                    {
                        values[i] = props[i].GetValue(item) ?? DBNull.Value;
                    }
                    table.Rows.Add(values);
                }
            }
            return table;
        }

        public void ClearedNameTransferAdminSectionSession()
        {
            SessionHelper.UserSession.nameTransferAdminRegistationSessssion = null;
            this.Session["NameTransferLogin"] = null;
            this.Session["AdminSectionIds"] = null;
            Session["UpdateAdminDetails"] = null;
            Session["NameTransferSearchUrl"] = null;

            //Session.Abandon();
        }

        public ActionResult NameTransferAdminResetPassword()
        {
            var model = new NameTransferAdminRegistation();
            return View(model);
        }

        [HttpPost]
        public ActionResult NameTransferAdminResetPassword(NameTransferAdminRegistation model, string updatepasswordproceed)
        {
            try
            {
                if (!string.IsNullOrEmpty(updatepasswordproceed))
                {

                    using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                    {
                        var chekdetails = dbcontext.NameTransferAdminRegistrations.Where(x => x.MobileNumber == model.MobileNumber && x.Email == model.Email && x.AdminStatus == "UNBLOCK").FirstOrDefault();
                        if (chekdetails != null)
                        {
                            string Partner_Type = "9001";
                            var list = objWebAPIAdaniGas.CityLists(Partner_Type);
                            var sapcitylist = list.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();
                            List<string> citylist = new List<string>();
                            Sitecore.Data.Database dbWeb = Sitecore.Configuration.Factory.GetDatabase("web");
                            var itemInfo = dbWeb.GetItem(new Data.ID(Templates.CONAndEncryptionSettings.ID.ToString()));
                            string EncryptionKey = itemInfo.Fields[Templates.CONAndEncryptionSettings.CONSettings.EncryptionKey].Value; // "@Aeml#2020";
                            clsEncryptAES objcrypt = new clsEncryptAES(EncryptionKey);
                            string pass = System.Web.Security.Membership.GeneratePassword(8, 8);
                            string password = objcrypt.encodetext(pass);

                            chekdetails.Password = password;
                            chekdetails.ModifiedDate = DateTime.Now;

                            citylist = chekdetails.City.Split('|').ToList<string>();

                            var CityCodeName = new List<string>();
                            string CityName = "";
                            if (citylist != null)
                            {
                                foreach (var item in citylist)
                                {
                                    foreach (var CityItem in sapcitylist)
                                    {
                                        if (item == CityItem.Value)
                                        {
                                            if (item == CityItem.Value)
                                                CityName = CityItem.Text;
                                            CityCodeName.Add(CityName);
                                        }
                                    }


                                }

                                CityName = string.Join("|", CityCodeName.Distinct().ToList());
                            }
                            dbcontext.SubmitChanges();

                            Data.Items.Item settingsItem;
                            settingsItem = Context.Database.GetItem(Templates.MailTemplate.NameTransferAdminForgotPassword);
                            var mailTemplateItem = settingsItem;
                            var fromMail = mailTemplateItem.Fields[Templates.MailTemplate.Fields.From];
                            var body = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Body];
                            var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                            string bodyText = body.Value;
                            bodyText = bodyText.Replace("[City]", CityName);
                            bodyText = bodyText.Replace("[Username]", chekdetails.Username);
                            bodyText = bodyText.Replace("[PASSWORD]", chekdetails.Password);

                            MailMessage mail = new MailMessage
                            {
                                From = new MailAddress(fromMail.Value),
                                Body = bodyText,
                                Subject = subject.Value,
                                IsBodyHtml = true
                            };

                            mail.To.Add(chekdetails.Email);

                            try
                            {
                                MainUtil.SendMail(mail);
                            }
                            catch (Exception ex)
                            {
                                Log.Error("Email Sending Failed" + ex.Message, this);
                            }

                            Session["UpdateNameTransferAdminPassword"] = "Your Name Transfer Admin Password is Updated Successfully & has been sent to your registered Email Id.";
                            Log.Info("Update Name Transfer Admin Password :" + chekdetails.Name + "Email :" + chekdetails.Email + " MobileNumber :" + chekdetails.MobileNumber + "City :" + model.City, this);
                            return this.Redirect("/nametransferlogin?ChangeAdminPassword=true");

                        }
                        else
                        {
                            string messagetobedisplayed = DictionaryPhraseRepository.Current.Get("/NameChange/NoRequestFound", "Register Mobile Number & Register Email Id Not Found.");
                            ViewBag.Message = messagetobedisplayed;
                            Session["Message"] = messagetobedisplayed;

                            return this.Redirect("~/nametransferlogin");
                        }
                    }
                }
                else
                {
                    ModelState.Clear();
                }

            }
            catch (Exception ex)
            {
                Log.Error("Name Transfer Admin Update Password" + ex.Message, this);
                return this.Redirect("~/nametransferlogin");
            }
            return View();
        }

        private List<NameTransferRequestDetail> FilterTransferRquestDetailList(string StartDate, string EndDate, string check, string ApplicationTypes)
        {
            List<NameTransferRequestDetail> list = new List<NameTransferRequestDetail>();
            using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
            {
                DateTime Sdate = DateTime.MinValue;
                DateTime Edate = DateTime.MinValue;
                List<string> statuslist = new List<string>();
                List<string> ApplicationTypeslist = new List<string>();
                bool IsStartDate = DateTime.TryParseExact(StartDate + " 00:00:00", "dd-MM-yyyy hh:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out Sdate);
                bool IsEndDate = DateTime.TryParseExact(EndDate + " 23:59:59", "dd-MM-yyyy hh:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out Edate);
                DateTime SdateTime = new DateTime(Sdate.Year, Sdate.Month, Sdate.Day, Sdate.Hour, Sdate.Minute, Sdate.Second);
                DateTime EdateTime = new DateTime(Edate.Year, Edate.Month, Edate.Day, Edate.Hour, Edate.Minute, Edate.Second);
                if (!string.IsNullOrEmpty(check))
                    statuslist = check.Split(',').ToList<string>();

                if (!string.IsNullOrEmpty(ApplicationTypes))
                    ApplicationTypeslist = ApplicationTypes.Split(',').ToList<string>();


                var qeury = dbcontext.NameTransferRequestDetails.AsQueryable();
                if (IsStartDate)
                    qeury = qeury.Where(x => x.CreatedDate >= SdateTime);
                if (IsEndDate)
                    qeury = qeury.Where(x => x.CreatedDate <= EdateTime);
                if (statuslist.Count() > 0 && !string.IsNullOrEmpty(check))
                    qeury = qeury.Where(x => statuslist.Contains(x.Status));
                if (ApplicationTypeslist.Count() > 0 && !string.IsNullOrEmpty(ApplicationTypes))
                    qeury = qeury.Where(x => ApplicationTypeslist.Contains(x.ApplicationType));
                list = qeury.OrderByDescending(x => x.CreatedDate).ToList();
            }
            return list;
        }

        public void SendNameTransferStatusEmail(string RequestNumber, string Email, string Comment)
        {
            try
            {
                Data.Items.Item settingsItem;
                settingsItem = Context.Database.GetItem(Templates.MailTemplate.NameTransferStatusDetails);
                var mailTemplateItem = settingsItem;
                var fromMail = mailTemplateItem.Fields[Templates.MailTemplate.Fields.From];
                var body = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Body];
                var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                string bodyText = body.Value;
                bodyText = bodyText.Replace("[RequestNumber]", RequestNumber);
                if (!string.IsNullOrEmpty(Comment))
                {
                    bodyText = bodyText.Replace("$Comment$", Comment);
                }

                if (!string.IsNullOrEmpty(Email))
                {
                    MailMessage mail = new MailMessage
                    {
                        From = new MailAddress(fromMail.Value),
                        Body = bodyText,
                        Subject = subject.Value,
                        IsBodyHtml = true
                    };

                    mail.To.Add(Email);

                    try
                    {
                        MainUtil.SendMail(mail);
                    }
                    catch (Exception ex)
                    {
                        Log.Error("Email Sending Failed" + ex.Message, this);
                    }
                }
            }

            catch (Exception ex)
            {
                Log.Error("Name Transfer Status Mail Send to fail :" + ex.Message, this);
            }
        }

        public void SendNameTransferStatusSMS(string mobilenumber, string content)
        {

            var apiurl = string.Format(" https://www.smsjust.com/blank/sms/user/urlsms.php?username=adanigas&pass=May@2017&senderid=ATGLTD&dest_mobileno={0}&message={1}&response=Y", mobilenumber, content);

            HttpClient client = new HttpClient();
            client.BaseAddress = new Uri(apiurl);
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            HttpResponseMessage response = client.GetAsync(apiurl).Result;
            if (response.IsSuccessStatusCode)
            {
                Log.Error("OTP Api call success. https://www.smsjust.com/", this);
            }
        }

        public ActionResult NameTransferChangePassword()
        {
            try
            {
                if (Session["NameTransferLogin"] != null)
                {
                    var model = new NameTransferAdminRegistation();
                    var MobileNumber = UserSession.nameTransferAdminRegistationSessssion.MobileNumber;
                    var EmailId = UserSession.nameTransferAdminRegistationSessssion.EmailId;
                    var Name = UserSession.nameTransferAdminRegistationSessssion.Name;

                    using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                    {
                        if (!string.IsNullOrEmpty(MobileNumber) && !string.IsNullOrEmpty(EmailId) && !string.IsNullOrEmpty(Name))
                        {
                            var CheckRegData = dbcontext.NameTransferAdminRegistrations.Where(x => x.MobileNumber == MobileNumber && x.Email == EmailId && x.AdminStatus == "UNBLOCK" && x.Name == Name).FirstOrDefault();

                            if (CheckRegData != null)
                            {
                                model.MobileNumber = CheckRegData.MobileNumber;
                                model.Email = CheckRegData.Email;
                                model.Password = CheckRegData.Password;
                            }
                            Log.Info("Get Name Transfer Change Password" + CheckRegData.MobileNumber, this);
                        }
                    }

                    return View(model);
                }
                else
                {
                    Log.Error("Name Transfer Admin section Login session is null ", this);
                    return this.Redirect("/nametransferlogin");
                }
            }
            catch (Exception ex)
            {
                Log.Error("Name Transfer Admin section Login session is null " + ex.Message, this);
                return this.Redirect("/nametransferlogin");
            }
        }

        [HttpPost]
        public ActionResult NameTransferChangePassword(NameTransferAdminRegistation model, string NameTransferAdminChangePassword = null)
        {
            try
            {
                if (Session["NameTransferLogin"] != null)
                {
                    if (!string.IsNullOrEmpty(NameTransferAdminChangePassword))
                    {
                        using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                        {
                            if (model.NameChangeNewPassword != model.ConfirmNewPassword)
                            {
                                ModelState.AddModelError(nameof(model.ConfirmNewPassword), "New password and confirmation password not matched, Type again !");
                                return this.View(model);
                            }
                            string Partner_Type = "9001";
                            var list = objWebAPIAdaniGas.CityLists(Partner_Type);
                            var sapcitylist = list.GroupBy(x => x.Value).Select(x => x.FirstOrDefault()).ToList();
                            //var Name = UserSession.nameTransferAdminRegistationSessssion.Name;
                            var CheckRegData = dbcontext.NameTransferAdminRegistrations.Where(x => x.MobileNumber == model.MobileNumber && x.Email == model.Email && x.Password == model.Password).FirstOrDefault();
                            string CityName = "";
                            List<string> citylist = new List<string>();
                            if (CheckRegData != null)
                            {
                                CheckRegData.Password = model.NameChangeNewPassword;
                                CheckRegData.ModifiedDate = DateTime.Now;

                                citylist = CheckRegData.City.Split('|').ToList<string>();

                                var CityCodeName = new List<string>();
                                if (citylist != null)
                                {
                                    foreach (var item in citylist)
                                    {
                                        foreach (var CityItem in sapcitylist)
                                        {
                                            if (item == CityItem.Value)
                                            {
                                                if (item == CityItem.Value)
                                                    CityName = CityItem.Text;
                                                CityCodeName.Add(CityName);
                                            }
                                        }


                                    }

                                    CityName = string.Join("|", CityCodeName.Distinct().ToList());
                                }
                                dbcontext.SubmitChanges();
                            }


                            Data.Items.Item settingsItem;
                            settingsItem = Context.Database.GetItem(Templates.MailTemplate.NameTransferChangePasswordAdmin);
                            var mailTemplateItem = settingsItem;
                            var fromMail = mailTemplateItem.Fields[Templates.MailTemplate.Fields.From];
                            var body = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Body];
                            var subject = mailTemplateItem.Fields[Templates.MailTemplate.Fields.Subject];
                            string bodyText = body.Value;
                            bodyText = bodyText.Replace("[City]", CityName);
                            bodyText = bodyText.Replace("[Username]", CheckRegData.Username);
                            bodyText = bodyText.Replace("[PASSWORD]", model.NameChangeNewPassword);

                            MailMessage mail = new MailMessage
                            {
                                From = new MailAddress(fromMail.Value),
                                Body = bodyText,
                                Subject = subject.Value,
                                IsBodyHtml = true
                            };

                            mail.To.Add(CheckRegData.Email);

                            try
                            {
                                MainUtil.SendMail(mail);
                            }
                            catch (Exception ex)
                            {
                                Log.Error("Email Sending Failed" + ex.Message, this);
                            }

                            Log.Info("Create Name Transfer Admin:" + model.Name + "Email :" + model.Email + " MobileNumber :" + model.MobileNumber + "City :" + model.City, this);
                            return this.Redirect("/nametransferlogin?UpdatePassword=true");
                        }


                    }
                }
                else
                {
                    Log.Error("Name Transfer Admin section Login session is null ", this);
                    return this.Redirect("/nametransferlogin");
                }

            }
            catch (Exception ex)
            {
                Log.Error("Chnage Name Transfer Password :" + ex.Message, this);
                return this.Redirect("/nametransferlogin");
            }
            return View();
        }
        #endregion

        [HttpPost]
        public bool ClosedkNameTransferApplication(ByCustomerId model, string id, string AdminComment)
        {
            try
            {
                if (!string.IsNullOrEmpty(id) && !string.IsNullOrEmpty(AdminComment))
                {
                    using (NameTransferRequestDataContext dbcontext = new NameTransferRequestDataContext())
                    {
                        var obj = dbcontext.NameTransferRequestDetails.SingleOrDefault(x => x.Id.ToString() == id.ToString());
                        Log.Info("Closed Application By admin for customerId is :" + obj.CustomerId, this);
                        Log.Info("Closed Application By admin for MeterNumber is :" + obj.MeterNumber, this);
                        Log.Info("Closed Application By admin for Mobile Number is :" + obj.Mobile, this);
                        if (obj != null)
                        {
                            obj.ClosedApplicationComment = AdminComment;
                            obj.IsRequestClosed = true;
                            obj.Status = "Rejected";
                            obj.ModifiedDate = DateTime.Now;

                            NameTransferApplicationCheckStatus applicationCheckStatus = new NameTransferApplicationCheckStatus();
                            applicationCheckStatus.Id = Guid.NewGuid();
                            applicationCheckStatus.UserId = obj.Id.ToString();
                            applicationCheckStatus.Status = "Rejected";
                            applicationCheckStatus.RequestNumber = obj.RequestNumber;
                            applicationCheckStatus.CreatedDate = DateTime.Now;

                            dbcontext.NameTransferApplicationCheckStatus.InsertOnSubmit(applicationCheckStatus);
                            dbcontext.SubmitChanges();
                        }
                    }
                }
                return true;
            }
            catch (Exception e)
            {
                Log.Error("Closed Name Transfer Application By Admin " + e.Message, this);
                return false;
            }
        }

        #endregion
    }
}
