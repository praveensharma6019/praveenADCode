@model Adani.SuperApp.Airport.Feature.StaticPages.Platform.Model.CallBackFormModel

@if (Model != null)
{

    using (Html.BeginForm("SubmitForm", "CallBackForm", FormMethod.Post, new { @class = "form-signin", id = "callBackForm" }))
    {
        @Html.ValidationSummary(true, "", new { @class = "is-invalid" })
        @Html.AntiForgeryToken()

        <div class="contact-form scrollableOffset" id="contact-us">

            <div class="row align-items-center">
                <div class="col-md-4 order_2">
                    <div class="form-wrapper">
                        <h3>@Model.Labels.FormTitle</h3>
                        <p>
                            @Model.Labels.Description
                        </p>
                        <div class="form">
                            <div class="form-floating mb-3">

                                @Html.TextBoxFor(x => x.Input.data.body.name, new
                           {
                               @id = "fullName",
                               @type = "text",
                               @class = "form-control",
                               Placeholder = Model.Labels.FullNameLabel

                                })

                                @Html.ValidationMessageFor(x => x.Input.data.body.name, "", new { @class = "is-invalid" })

                                <p class="field-validation-error invalid-feedback" style="display:none"></p>
                                <label for="fullName">@Model.Labels.FullNameLabel</label>
                            </div>

                            <div class="form-floating mb-3">

                                @Html.TextBoxFor(x => x.Input.data.body.contactNumber, new
                           {
                               @id = "contactnumber",
                               @type = "number",
                               maxLength = "10",
                               @oninput = "javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);",
                               @class = "form-control",
                               Placeholder = Model.Labels.ContactNumberLabel

                           })

                                @Html.ValidationMessageFor(x => x.Input.data.body.contactNumber, "", new { @class = "is-invalid" })

                                <p class="field-validation-error invalid-feedback" style="display:none"></p>
                                <label for="contactnumber">@Model.Labels.ContactNumberLabel</label>
                            </div>
                            <div class="form-floating mb-3">

                                @Html.TextBoxFor(x => x.Input.data.body.email, new
                           {
                               @id = "email",
                               @class = "form-control",
                               @type = "email",
                               Placeholder = Model.Labels.EmailAddressLabel

                           })
                                <p class="field-validation-error invalid-feedback" style="display:none"></p>
                                @Html.ValidationMessageFor(x => x.Input.data.body.email, "", new { @class = "is-invalid" })


                                <label for="email">@Model.Labels.EmailAddressLabel</label>
                            </div>
                            <div class="form-floating mb-3">

                                @Html.TextBoxFor(x => x.Input.data.body.organization, new
                           {
                               @id = "organization",
                               @class = "form-control",
                               Placeholder = Model.Labels.OrganizationLabel

                           })
                                <p class="field-validation-error invalid-feedback" style="display:none"></p>
                                @Html.ValidationMessageFor(x => x.Input.data.body.organization, "", new { @class = "is-invalid" })


                                <label for="organization">@Model.Labels.OrganizationLabel</label>
                            </div>
                            <input type="hidden" name="commercialEmails" value="@Model.Labels.CommercialEmailTo.ToString()" />
                            <input type="hidden" name="airlinePartnershipEmails" value="@Model.Labels.AirlinePartnershipEmailTo.ToString()" />
                            <input type="hidden" name="pageId" value="@Sitecore.Context.Item.DisplayName.ToString()" />
                            <div class="submitBtn">
                                <input type="submit" id="callBackSubmit" class="btn btn-primary btn-lg rounded-pill"
                                       value="@Model.Labels.ButtonText" />
                                <button id="btnLoader" class="btn btn-primary btn-lg rounded-pill" style="display:none">

                                    <span class="loader">

                                        <span class="loaderDot"></span>

                                        <span class="loaderDot"></span>

                                        <span class="loaderDot"></span>

                                    </span>

                                </button>

                            </div>
                        </div>

                    </div>
                </div>
                <div class="col-md-8 order_1">
                    <div class="contact-img"><img src="@Model.Labels.BannerImage" loading="lazy"></div>
                </div>
            </div>
        </div>
    }
    <script>
        function formSuccess() {
            toastCntr = document.querySelector('#formSuccessToast');
            toastCntr.classList.remove('d-none');
            setTimeout(() => {
                toastCntr.classList.add('d-none');
            }, 2500);
        }
    </script>

    if (ViewBag.SuccessMessage != null)
    {
        <div id="formSuccessToast" class="d-none">
            <div class="toast-container toastTopMiddle">
                <div class="fade show toast bg-secondary">
                    <div class="toast-body">
                        <div class="toastContent">
                            <i class="i-tick d-none"></i>
                            <span>@Html.Raw(ViewBag.SuccessMessage)</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <script>formSuccess();</script>
    }
}
