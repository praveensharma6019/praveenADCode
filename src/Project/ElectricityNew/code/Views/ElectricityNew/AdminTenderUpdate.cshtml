@using Sitecore.Foundation.SitecoreExtensions.Extensions
@using Sitecore.Foundation.Dictionary.Extensions
@using Sitecore.Mvc.Configuration
@using Sitecore.ElectricityNew.Website.Model;
@model Sitecore.ElectricityNew.Website.Model.TenderEditModel

@{
    var listingitem = Sitecore.Context.Database.GetItem(Templates.Tender.AdminTenderListing);
}

<div class="pageContent">
    <div class="container">
        @using (Html.BeginForm("Logout", "ElectricityNew", FormMethod.Post))
        {
            <div class="col-12 p-0 pb-3">
                <div class="float-right"><button type="submit" class="btn btn-primary">@Html.Sitecore().Dictionary("Electricity/Tender/Logout", "Logout")</button></div>
                <div class="clearfix"></div>
            </div>
        }
        <!-- Section -->
        <div class="pb-3">
            <div>
                <div class="mr-auto ml-auto">
                    <div class="card card-outline-secondary">
                        <div class="card-header">
                            <h3 class="mb-0">@Html.Sitecore().Dictionary("Electricity/Tender/Update Tender Text", "Update Tender")</h3>
                        </div>
                        <div class="card-body">
                            @using (Html.BeginRouteForm(MvcSettings.SitecoreRouteName, FormMethod.Post, new { id = "frmUpdateTender", @class = "form-signin", @enctype = "multipart/form-data" }))
                            {
                                @Html.AddUniqueFormId()

                                <div class="form-horizontal">

                                    @if (ViewBag.EditError != null)
                                    {
                                        <div class="alert-danger">@ViewBag.EditError</div>
                                    }
                                    <hr />
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.Id)

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.NITNo, htmlAttributes: new { @class = "control-label col-md-6" })
                                        <div class="col-md-10">
                                            @Html.TextBoxFor(model => model.NITNo, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.NITNo, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Business, htmlAttributes: new { @class = "control-label col-md-6" })
                                        <div class="col-md-10">
                                            @Html.TextBoxFor(model => model.Business, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Business, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-6" })
                                        <div class="col-md-10">
                                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.Label("Advertise Date(dd-MM-yyyy HH:mm:ss)", htmlAttributes: new { @class = "control-label col-md-6" })
                                        <div class="col-md-10">
                                            @*@Html.TextBoxFor(x => x.Adv_Date, "{0:dd-MM-yyyy hh:mm:ss}")*@
                                            @Html.TextBoxFor(model => model.Adv_Date, "{0:dd-MM-yyyy HH:mm:ss}", new { htmlAttributes = new { @class = "form-control", @type = "text" } })
                                            @Html.ValidationMessage("Adv_Date", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.Label("Close Date(dd-MM-yyyy HH:mm:ss)", htmlAttributes: new { @class = "control-label col-md-6" })
                                        <div class="col-md-10">
                                            @*@Html.TextBoxFor(x => x.Closing_Date, "{0:dd-MM-yyyy hh:mm:ss}")*@
                                            @Html.TextBoxFor(model => model.Closing_Date, "{0:dd-MM-yyyy HH:mm:ss}", new { htmlAttributes = new { @class = "form-control", @type = "text" } })
                                            @Html.ValidationMessage("Closing_Date", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-6" })
                                        <div class="col-md-10">
                                            @Html.TextBoxFor(model => model.Location, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Estimated_Cost, htmlAttributes: new { @class = "control-label col-md-6" })
                                        <div class="col-md-10">
                                            @Html.TextBoxFor(model => model.Estimated_Cost, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Estimated_Cost, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Cost_of_EMD, htmlAttributes: new { @class = "control-label col-md-6" })
                                        <div class="col-md-10">
                                            @Html.TextBoxFor(model => model.Cost_of_EMD, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Cost_of_EMD, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-6" })
                                        <div class="col-md-10">

                                            @Html.DropDownListFor(model => model.Status, new List<SelectListItem>
                   {
                      new SelectListItem{ Text="Open", Value = "Open" },
                      new SelectListItem{ Text="Close", Value = "Close" },
                   }, Html.Sitecore().Dictionary("Electricity/Tender/Select Status Label", "Select Status"))
                                            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Files, htmlAttributes: new { @class = "control-label col-md-6" })
                                        <div class="col-md-10">
                                            @Html.TextBoxFor(model => model.Files, "", new { @type = "file", @multiple = "multiple", @onchange = "ValidateTenderUpdate(this);", @accept = ".jpg,.jpeg,.png,.pdf,.doc,.docx,.xls,.xlsx,.mp4" })
                                            @Html.ValidationMessageFor(model => model.Files, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <table class="table">
                                        <tr>
                                            <th>
                                                <label>Name</label>
                                            </th>
                                        </tr>

                                        @if (Model.TenderDocuments != null)
                                        {
                                            foreach (var item in Model.TenderDocuments)
                                            {
                                                <tr>
                                                    <td>
                                                        @{
                                                            var myFilePath = item.DocumentPath;
                                                            string ext = Path.GetExtension(myFilePath);
                                                        }
                                                        @if (ext.ToLower() == ".pdf")
                                                        {
                                                            <a href="@item.DocumentPath" target="_blank" class="txt-orange">@Html.DisplayFor(modelItem => item.FileName)</a>
                                                        }
                                                        else
                                                        {
                                                            <a href="@item.DocumentPath" target="_blank" download="" class="txt-orange">@Html.DisplayFor(modelItem => item.FileName)</a>
                                                        }

                                                        @*<a href="@Html.DisplayFor(modelItem => item.DocumentPath)" download="">@Html.DisplayFor(modelItem => item.FileName)</a>*@
                                                    </td>
                                                    <td>
                                                        <button type="button" class="btn btn-default btn-sm">
                                                            <span class="glyphicon glyphicon-trash"></span> @Html.ActionLink("Trash", "DeleteFile", new { id = item.Id, DocumentPath = item.DocumentPath })
                                                        </button>

                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </table>
                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <input type="submit" value="Update" class="btn btn-primary" name="update_tender" />
                                            @if (Model.Status != "Inactive")
                                            {
                                                <input type="submit" value="Inactivate" class="btn btn-primary" name="Inactivate_tender" />
                                            }
                                            else
                                            {
                                                <input type="submit" value="Activate" class="btn btn-primary" name="Activate_tender" />
                                            }
                                            @if (!Model.OnHold)
                                            {
                                                <input type="submit" value="Hold" class="btn btn-primary" name="OnHold_tender" />
                                            }
                                            else
                                            {
                                                <input type="submit" value="Unhold" class="btn btn-primary" name="UnHold_tender" />
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <div class="card-footer">
                            <a href="@listingitem.Url()" class="btn btn-primary">@Html.Sitecore().Dictionary("Electricity/Tender/Back To List Text", "Back To Tender List")</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<script>

    function ValidateTenderUpdate(obj) {
        var format = /[!@@&#$%^*()+\=\[\]{};':"\\|,<>\/?]+/;

        if (format.test($(obj).val().replace(/^.*[\\\/]/, ''))) {
            alert('File name should not contain any special characters!');
            $(obj).val("");
            return false;
        }
        var ext = $(obj).val().split('.').pop().toLowerCase();
        // if($.inArray(ext, ['jpg','jpeg','png','pdf','doc','docx','xls','xlsx','.zip']) == -1) {
        // alert('invalid extension!');
        // }
        if ($.inArray(ext, ['jpg', 'jpeg', 'dwg', 'pdf', 'doc', 'docx', 'xls', 'xlsx', 'mp4']) == -1) {
            alert('File extension not supported!');
            $(obj).val("");
            return false;
        }
    }

</script>
