@using Sitecore.Mvc
@using Sitecore.Foundation.Dictionary.Extensions
@using Sitecore.Foundation.SitecoreExtensions.Extensions
@using Sitecore.Mvc.Configuration
@using Sitecore.TrivandrumAirport.Website.Model;
@model Sitecore.TrivandrumAirport.Website.Model.TenderCreateModel
@{
    var item = Sitecore.Context.Database.GetItem(Templates.Tender.AdminTenderListing);
}
<section class="bg-white py-5">
    <div class="container">
        @using (Html.BeginForm("Logout", "TrivandrumAirport", FormMethod.Post))
        {
            <div class="col-12 p-0 pb-4">
                <div class="float-right mb-3"><button type="submit" class="btn btn-primary">@Html.Sitecore().Dictionary("TrivandrumAirport/Tender/Logout", "Logout")</button></div>
                <div class="clearfix"></div>
            </div>
        }
        <!-- Section -->
        <div class="panel">
            <div>
                <div class="mr-auto ml-auto">
                    <h3 class="txt-orange txt-lg mb-3">@Html.Sitecore().Dictionary("TrivandrumAirport/Tender/Create Tender Label", "Create Tender")</h3>
                    <div class="">
                        @using (Html.BeginRouteForm(MvcSettings.SitecoreRouteName, FormMethod.Post, new { id = "frmCreateTender", @class = "form-signin", @enctype = "multipart/form-data" }))
                        {
                            @Html.AddUniqueFormId()

                            <div class="form-horizontal">

                                @if (ViewBag.SuccessMsg != null)
                                {
                                    <div class="alert-success">@ViewBag.SuccessMsg</div>
                                }
                                @if (ViewBag.ErrorMsg != null)
                                {
                                    <div class="alert-danger">@ViewBag.ErrorMsg</div>
                                }

                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="form-group pt-md-2">
                                            <label class="form-label">
                                                @Html.LabelFor(model => model.NITNo, htmlAttributes: new { @class = "control-label" })*
                                            </label>
                                            <div class="">
                                                @Html.TextBoxFor(model => model.NITNo, new { @class = "form-control", required = "required" })
                                                @Html.ValidationMessageFor(model => model.NITNo, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group pt-md-2">
                                            <label class="form-label">
                                                @Html.LabelFor(model => model.Business, htmlAttributes: new { @class = "control-label" })*
                                            </label>
                                            <div class="">
                                                @Html.TextBoxFor(model => model.Business, new { @class = "form-control", required = "required" })
                                                @Html.ValidationMessageFor(model => model.Business, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group pt-md-2">
                                            <label class="form-label">
                                                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })*
                                            </label>
                                            <div class="">
                                                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", required = "required" })
                                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group pt-md-2">
                                            <label class="form-label">
                                                @Html.Label("Advertise Date", htmlAttributes: new { @class = "control-label" })*
                                                @Html.Label("(dd-MM-yyyy HH:mm:ss)", htmlAttributes: new { @class = "font-12" })
                                            </label>
                                            <div class="">
                                                @*@Html.TextBoxFor(x => x.Adv_Date, "{0:dd-MM-yyyy hh:mm:ss}")*@


                                                @Html.TextBoxFor(x => x.Adv_Date, new { @class = "form-control reset-control datepicker docs-date dateCal", id = "Adv_Date", required = "required" })

                                                @Html.ValidationMessage("Adv_Date", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group pt-md-2">
                                            <label class="form-label">
                                                @Html.Label("Close Date", htmlAttributes: new { @class = "control-label" })*
                                                @Html.Label("(dd-MM-yyyy HH:mm:ss)", htmlAttributes: new { @class = "font-12" })
                                            </label>
                                            <div class="">
                                                @*@Html.TextBoxFor(x => x.Closing_Date, "{0:dd-MM-yyyy hh:mm:ss}")*@
                                                @Html.TextBoxFor(x => x.Closing_Date, new { @class = "form-control reset-control datepicker docs-date dateCal", id = "Closing_Date", required = "required" })

                                                @Html.ValidationMessage("Closing_Date", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group pt-md-2">
                                            <label class="form-label">
                                                @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label" })
                                            </label>
                                            <div class="">
                                                @Html.TextBoxFor(model => model.Location, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    @*<div class="col-sm-6">
                                            <div class="form-group pt-md-2">
                                                <label class="form-label">
                                                    @Html.LabelFor(model => model.Estimated_Cost, htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="">
                                                    @Html.TextBoxFor(model => model.Estimated_Cost, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.Estimated_Cost, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="form-group pt-md-2">
                                                <label class="form-label">
                                                    @Html.LabelFor(model => model.Cost_of_EMD, htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="">
                                                    @Html.TextBoxFor(model => model.Cost_of_EMD, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.Cost_of_EMD, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>*@
                                    <div class="col-sm-6">
                                        <div class="form-group pt-md-2">
                                            <label class="form-label">
                                                @Html.LabelFor(model => model.SupportEmailAddress, htmlAttributes: new { @class = "control-label" })*
                                            </label>
                                            <div class="">
                                                @Html.TextBoxFor(x => x.SupportEmailAddress, new { @class = "form-control", required = "required", id = "SupportEmailAddress", @onfocusout = "validateEmailId(event,this);" })
                                                @Html.ValidationMessageFor(x => x.SupportEmailAddress)
                                                <span class="field-validation-error" id="SupportEmailAddressError"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group pt-md-2">
                                            <label class="form-label">
                                                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label" })*
                                            </label>
                                            <div class="">
                                                @Html.DropDownList("Status", new List<SelectListItem>
                                       {
                                          new SelectListItem{ Text="Open", Value = "Open" },
                                          new SelectListItem{ Text="Close", Value = "Close" },
                                       }, Html.Sitecore().Dictionary("TrivandrumAirport/Tender/Select Status Label", "Select Status"))
                                                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group pt-md-2">
                                            <label class="form-label">
                                                @Html.LabelFor(model => model.TenderType, htmlAttributes: new { @class = "control-label" })*
                                            </label>
                                            <div class="">
                                                @Html.DropDownList("TenderType", new List<SelectListItem>
                                       {
                                          new SelectListItem{ Text="Commercial", Value = "Commercial" },
                                          new SelectListItem{ Text="Procurement", Value = "Procurement" },
                                       }, Html.Sitecore().Dictionary("TrivandrumAirport/Tender/Select Status Label", "Select Tender Type"))
                                                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>


                                    <div class="col-sm-12">

                                        <div class="form-group pt-md-2">
                                            <label class="form-label">
                                                @Html.Label("PQ Approval Required", htmlAttributes: new { @class = "control-label" })

                                            </label>
                                            @Html.CheckBoxFor(model => model.PQApprovalRequired, new { @checked = "checked" })
                                            @Html.ValidationMessageFor(model => model.PQApprovalRequired, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                    <div class="col-sm-12 tenderFileCTR">
                                        <p>Tender Documents:</p>
                                        <div class="form-group pt-md-2 tooltip1">
                                            <label class="form-label">
                                                @Html.LabelFor(model => model.Files, htmlAttributes: new { @class = "control-label" })*
                                            </label>
                                            <div class="">
                                                @Html.TextBoxFor(model => model.Files, "", new { @type = "file", @multiple = "multiple", @onchange = "Validate(this);", @accept = ".jpg,.jpeg,.png,.pdf,.doc,.docx,.xls,.xlsx" })
                                                <span class="tooltiptext1">Please upload file maximum up to 10 MB.</span>
                                                @Html.ValidationMessageFor(model => model.Files, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-12 pqFileCTR">
                                        <div class="form-group pt-md-2 tooltip1 ">
                                            <label class="form-label">
                                                @Html.LabelFor(model => model.PQFiles, htmlAttributes: new { @class = "control-label" })*
                                            </label>
                                            <div class="">
                                                @Html.TextBoxFor(model => model.PQFiles, "", new { @type = "file", @multiple = "multiple", @onchange = "Validate(this);", @accept = ".jpg,.jpeg,.png,.pdf,.doc,.docx,.xls,.xlsx" })
                                                <span class="tooltiptext1">Please upload file maximum up to 10 MB.</span>
                                                @Html.ValidationMessageFor(model => model.PQFiles, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="element p-3 border mb-3">
                                    <div class="row">
                                        <div class="col-sm-12">
                                            <h4 class="txt-orange txt-md mb-3">Create Envelop User</h4>
                                        </div>
                                    </div>
                                    <div class="row" id="Envelop1">
                                        <div class="col-sm-6">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label">
                                                    @Html.Label("Select Envelop", htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="col-sm-7 col-md-7">
                                                    @for (int i = 0; i < Model.EnvelopUser1EnvelopNameCheckboxs.Count; i++)
                                                    {
                                                        @Html.CheckBoxFor(x => x.EnvelopUser1EnvelopNameCheckboxs[i].IsChecked)
                                                        @Html.HiddenFor(x => x.EnvelopUser1EnvelopNameCheckboxs[i].Value)<span></span>
                                                        @Html.DisplayFor(x => x.EnvelopUser1EnvelopNameCheckboxs[i].Name)
                                                        <br />
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-5 ml-auto">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label">
                                                    @Html.Label("Name", htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="col-sm-7 col-md-7">
                                                    @Html.TextBoxFor(model => model.EnvelopUser1Name, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.EnvelopUser1Name, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label"> @Html.Label("Email", htmlAttributes: new { @class = "control-label" })</label>
                                                <div class="col-sm-7 col-md-7">
                                                    @Html.TextBoxFor(model => model.EnvelopUser1email, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.EnvelopUser1email, "", new { @class = "text-danger" })
                                                    <span class="field-validation-error" id="EnvelopUser1emailErr"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-5 ml-auto">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label">
                                                    @Html.Label("Mobile", htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="col-sm-7 col-md-7">
                                                    @Html.TextBoxFor(model => model.EnvelopUser1Mobile, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.EnvelopUser1Mobile, "", new { @class = "text-danger" })
                                                    <span class="field-validation-error" id="EnvelopUser1mobileErr"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row" id="Envelop2" style="display:none">
                                        <div class="col-sm-6">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label">
                                                    @Html.Label("Select Envelop", htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="col-sm-7 col-md-7">
                                                    @for (int i = 0; i < Model.EnvelopUser2EnvelopNameCheckboxs.Count; i++)
                                                    {
                                                        @Html.CheckBoxFor(x => x.EnvelopUser2EnvelopNameCheckboxs[i].IsChecked)
                                                        @Html.HiddenFor(x => x.EnvelopUser2EnvelopNameCheckboxs[i].Value)<span></span>
                                                        @Html.DisplayFor(x => x.EnvelopUser2EnvelopNameCheckboxs[i].Name)
                                                        <br />
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-5 ml-auto">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label">
                                                    @Html.Label("Name", htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="col-sm-7 col-md-7">
                                                    @Html.TextBoxFor(model => model.EnvelopUser2Name, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.EnvelopUser2Name, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label"> @Html.Label("Email", htmlAttributes: new { @class = "control-label" })</label>
                                                <div class="col-sm-7 col-md-7">
                                                    @Html.TextBoxFor(model => model.EnvelopUser2email, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.EnvelopUser2email, "", new { @class = "text-danger" })
                                                    <span class="field-validation-error" id="EnvelopUser2emailErr"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-5 ml-auto">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label">
                                                    @Html.Label("Mobile", htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="col-sm-7 col-md-7">
                                                    @Html.TextBoxFor(model => model.EnvelopUser2Mobile, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.EnvelopUser2Mobile, "", new { @class = "text-danger" })
                                                    <span class="field-validation-error" id="EnvelopUser2mobileErr"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row" id="Envelop3" style="display:none">
                                        <div class="col-sm-6">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label">
                                                    @Html.Label("Select Envelop", htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="col-sm-7 col-md-7">
                                                    @for (int i = 0; i < Model.EnvelopUser3EnvelopNameCheckboxs.Count; i++)
                                                    {
                                                        @Html.CheckBoxFor(x => x.EnvelopUser3EnvelopNameCheckboxs[i].IsChecked)
                                                        @Html.HiddenFor(x => x.EnvelopUser3EnvelopNameCheckboxs[i].Value)<span></span>
                                                        @Html.DisplayFor(x => x.EnvelopUser3EnvelopNameCheckboxs[i].Name)
                                                        <br />
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-5 ml-auto">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label">
                                                    @Html.Label("Name", htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="col-sm-7 col-md-7">
                                                    @Html.TextBoxFor(model => model.EnvelopUser3Name, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.EnvelopUser3Name, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label"> @Html.Label("Email", htmlAttributes: new { @class = "control-label" })</label>
                                                <div class="col-sm-7 col-md-7">
                                                    @Html.TextBoxFor(model => model.EnvelopUser3email, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.EnvelopUser3email, "", new { @class = "text-danger" })
                                                    <span class="field-validation-error" id="EnvelopUser3emailErr"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-5 ml-auto">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label">
                                                    @Html.Label("Mobile", htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="col-sm-7 col-md-7">
                                                    @Html.TextBoxFor(model => model.EnvelopUser3Mobile, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.EnvelopUser3Mobile, "", new { @class = "text-danger" })
                                                    <span class="field-validation-error" id="EnvelopUser3mobileErr"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row" id="Envelop4" style="display:none">
                                        <div class="col-sm-6">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label">
                                                    @Html.Label("Select Envelop", htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="col-sm-7 col-md-7">
                                                    @for (int i = 0; i < Model.EnvelopUser4EnvelopNameCheckboxs.Count; i++)
                                                    {
                                                        @Html.CheckBoxFor(x => x.EnvelopUser4EnvelopNameCheckboxs[i].IsChecked)
                                                        @Html.HiddenFor(x => x.EnvelopUser4EnvelopNameCheckboxs[i].Value)<span></span>
                                                        @Html.DisplayFor(x => x.EnvelopUser4EnvelopNameCheckboxs[i].Name)
                                                        <br />
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-5 ml-auto">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label">
                                                    @Html.Label("Name", htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="col-sm-7 col-md-7">
                                                    @Html.TextBoxFor(model => model.EnvelopUser4Name, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.EnvelopUser5Name, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label"> @Html.Label("Email", htmlAttributes: new { @class = "control-label" })</label>
                                                <div class="col-sm-7 col-md-7">
                                                    @Html.TextBoxFor(model => model.EnvelopUser4email, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.EnvelopUser4email, "", new { @class = "text-danger" })
                                                    <span class="field-validation-error" id="EnvelopUser4emailErr"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-5 ml-auto">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label">
                                                    @Html.Label("Mobile", htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="col-sm-7 col-md-7">
                                                    @Html.TextBoxFor(model => model.EnvelopUser4Mobile, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.EnvelopUser4Mobile, "", new { @class = "text-danger" })
                                                    <span class="field-validation-error" id="EnvelopUser4mobileErr"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row" id="Envelop5" style="display:none">
                                        <div class="col-sm-6">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label">
                                                    @Html.Label("Select Envelop", htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="col-sm-7 col-md-7">
                                                    @for (int i = 0; i < Model.EnvelopUser5EnvelopNameCheckboxs.Count; i++)
                                                    {
                                                        @Html.CheckBoxFor(x => x.EnvelopUser5EnvelopNameCheckboxs[i].IsChecked)
                                                        @Html.HiddenFor(x => x.EnvelopUser5EnvelopNameCheckboxs[i].Value)<span></span>
                                                        @Html.DisplayFor(x => x.EnvelopUser5EnvelopNameCheckboxs[i].Name)
                                                        <br />
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-5 ml-auto">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label">
                                                    @Html.Label("Name", htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="col-sm-7 col-md-7">
                                                    @Html.TextBoxFor(model => model.EnvelopUser5Name, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.EnvelopUser5Name, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label"> @Html.Label("Email", htmlAttributes: new { @class = "control-label" })</label>
                                                <div class="col-sm-7 col-md-7">
                                                    @Html.TextBoxFor(model => model.EnvelopUser5email, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.EnvelopUser5email, "", new { @class = "text-danger" })
                                                    <span class="field-validation-error" id="EnvelopUser5emailErr"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-5 ml-auto">
                                            <div class="row form-group pt-md-2">
                                                <label class="col-sm-5 col-md-5 col-form-label">
                                                    @Html.Label("Mobile", htmlAttributes: new { @class = "control-label" })
                                                </label>
                                                <div class="col-sm-7 col-md-7">
                                                    @Html.TextBoxFor(model => model.EnvelopUser5Mobile, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.EnvelopUser5Mobile, "", new { @class = "text-danger" })
                                                    <span class="field-validation-error" id="EnvelopUser5mobileErr"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-sm-12">
                                            <div class="buttons">
                                                <span class="clone btn btn-primary" id="BtnEvenlopShow"><i class="fa fa-plus mr-1"></i> Add</span>
                                                <span class="remove btn btn-primary" id="BtnEvenlopHide" style="display:none">remove</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>

<div class="col-md-4 mb-3">	
                                        <div id="recaptcha1">	
                                        </div>	
                                    </div>	
                                    @Html.HiddenFor(model => model.reResponse, new { id = "reResponse" })	
                                    @Html.ValidationMessageFor(model => model.reResponse, "", new { @class = "help-block" }, "p")
                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-12 text-right">
                                        <input type="submit" value="Create" class="btn btn-primary finalsub" />
                                        <a href="@item.Url()" class="btn btn-secondary">@Html.Sitecore().Dictionary("TrivandrumAirport/Tender/Back To List Text", "Back To Tender List")</a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="">

                    </div>
                </div>
            </div>
        </div>

    </div>
</section>
	<script>	
var recaptcha1;	
var onloadCallback = function () {	
    //Render the recaptcha2 on the element with ID "recaptcha2"	
    recaptcha1 = grecaptcha.render('recaptcha1', {	
        'sitekey': '6Lcql9QZAAAAAKGvvD4LZKHKys2Dwh0kFUVE5MGc', //Replace this with your Site key	
        'theme': 'light'	
    });	
};	
</script>
<script>
    $("#BtnEvenlopShow").click(function () {
        if (!$('#Envelop2').is(":visible")) {
            $('#Envelop2').show();
            $('#BtnEvenlopHide').show();
        }
        else if (!$('#Envelop3').is(":visible"))
            $('#Envelop3').show();
        else if (!$('#Envelop4').is(":visible"))
            $('#Envelop4').show();
        else if (!$('#Envelop5').is(":visible")) {
            $('#Envelop5').show();
            $('#BtnEvenlopShow').hide();

        }
    });
    $("#BtnEvenlopHide").click(function () {
        if ($('#Envelop5').is(":visible")) {
            $('#Envelop5').hide();
            $('#BtnEvenlopShow').show();
            $('#Envelop5 input').val('');
            $('#Envelop5').find('input[type=checkbox]:checked').removeAttr('checked');
        }
        else if ($('#Envelop4').is(":visible")) {
            $('#Envelop4').hide();
            $('#Envelop4 input').val('');
            $('#Envelop4').find('input[type=checkbox]:checked').removeAttr('checked');
        }
        else if ($('#Envelop3').is(":visible")) {
            $('#Envelop3').hide();
            $('#Envelop3 input').val('');
            $('#Envelop3').find('input[type=checkbox]:checked').removeAttr('checked');
        }
        else if ($('#Envelop2').is(":visible")) {
            $('#Envelop2').hide();
            $('#BtnEvenlopHide').hide();
            $('#Envelop2 input').val('');
            $('#Envelop2').find('input[type=checkbox]:checked').removeAttr('checked');
        }
    });


    $(".finalsub").click(function () {

        var SupportEmailAddress = $("#SupportEmailAddress").val();

        if (SupportEmailAddress != "") {
            if (!validateEmail(SupportEmailAddress)) {
                event.preventDefault();
                $("#SupportEmailAddressError").html("Please enter a valid Email Address");
                return false;
            }
            else {
                $("#SupportEmailAddressError").html("");
            }
        }




        var EnvelopUser1Mobile = $("#EnvelopUser1Mobile").val();
        var EnvelopUser1email = $("#EnvelopUser1email").val();

        if (EnvelopUser1Mobile != "") {
            if (!validateMobileNo(EnvelopUser1Mobile)) {
                event.preventDefault();
                $("#EnvelopUser1mobileErr").html("Please enter a 10 digit valid mobile number");
                return false;
            }
            else {
                $("#EnvelopUser1mobileErr").html("");
            }
        }

        if (EnvelopUser1email != "") {
            if (!validateEmail(EnvelopUser1email)) {
                event.preventDefault();
                $("#EnvelopUser1emailErr").html("Please enter a valid Email Address");
                return false;
            }
            else {
                $("#EnvelopUser1emailErr").html("");
            }
        }

        var EnvelopUser2Mobile = $("#EnvelopUser2Mobile").val();
        var EnvelopUser2email = $("#EnvelopUser2email").val();

        if (EnvelopUser2Mobile != "") {
            if (!validateMobileNo(EnvelopUser2Mobile)) {
                event.preventDefault();
                $("#EnvelopUser2mobileErr").html("Please enter a 10 digit valid mobile number");
                return false;
            }
            else {
                $("#EnvelopUser2mobileErr").html("");
            }
        }

        if (EnvelopUser2email != "") {
            if (!validateEmail(EnvelopUser2email)) {
                event.preventDefault();
                $("#EnvelopUser2emailErr").html("Please enter a valid Email Address");
                return false;
            }
            else {
                $("#EnvelopUser2emailErr").html("");
            }
        }


        var EnvelopUser3Mobile = $("#EnvelopUser3Mobile").val();
        var EnvelopUser3email = $("#EnvelopUser3email").val();

        if (EnvelopUser3Mobile != "") {
            if (!validateMobileNo(EnvelopUser3Mobile)) {
                event.preventDefault();
                $("#EnvelopUser3mobileErr").html("Please enter a 10 digit valid mobile number");
                return false;
            }
            else {
                $("#EnvelopUser3mobileErr").html("");
            }
        }

        if (EnvelopUser3email != "") {
            if (!validateEmail(EnvelopUser3email)) {
                event.preventDefault();
                $("#EnvelopUser3emailErr").html("Please enter a valid Email Address");
                return false;
            }
            else {
                $("#EnvelopUser3emailErr").html("");
            }
        }

        var EnvelopUser4Mobile = $("#EnvelopUser4Mobile").val();
        var EnvelopUser4email = $("#EnvelopUser4email").val();

        if (EnvelopUser4Mobile != "") {
            if (!validateMobileNo(EnvelopUser4Mobile)) {
                event.preventDefault();
                $("#EnvelopUser4mobileErr").html("Please enter a 10 digit valid mobile number");
                return false;
            }
            else {
                $("#EnvelopUser4mobileErr").html("");
            }
        }

        if (EnvelopUser4email != "") {
            if (!validateEmail(EnvelopUser4email)) {
                event.preventDefault();
                $("#EnvelopUser4emailErr").html("Please enter a valid Email Address");
                return false;
            }
            else {
                $("#EnvelopUser4emailErr").html("");
            }
        }

        var EnvelopUser5Mobile = $("#EnvelopUser5Mobile").val();
        var EnvelopUser5email = $("#EnvelopUser5email").val();

        if (EnvelopUser5Mobile != "") {
            if (!validateMobileNo(EnvelopUser5Mobile)) {
                event.preventDefault();
                $("#EnvelopUser5mobileErr").html("Please enter a 10 digit valid mobile number");
                return false;
            }
            else {
                $("#EnvelopUser5mobileErr").html("");
            }
        }

        if (EnvelopUser5email != "") {
            if (!validateEmail(EnvelopUser5email)) {
                event.preventDefault();
                $("#EnvelopUser5emailErr").html("Please enter a valid Email Address");
                return false;
            }
            else {
                $("#EnvelopUser5emailErr").html("");
            }
        }
    });

</script>