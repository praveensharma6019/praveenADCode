@using Sitecore.Foundation.Assets
@using Sitecore.Foundation.Assets.Models
@using Sitecore.Foundation.Assets.Services
@using Sitecore.Foundation.SitecoreExtensions.Extensions
@using Sitecore.ExperienceForms.Mvc.Html
@using Sitecore.Foundation.Dictionary.Extensions
@using Sitecore.Mvc
@using Sitecore.Mvc.Configuration;
@using Sitecore.Mvc.Presentation;


@model Sitecore.AGELPortal.Website.Models.PortalAddUserModel

@{
    Layout = null;
    var password = Model?.password;

    var newPassword = Model?.new_password;
    var test = Model.Users;
    Uri myUri = new Uri(Request.Url.AbsoluteUri);

    var SearchKeyword = HttpUtility.ParseQueryString(myUri.Query).Get("searchKeyword");


    var userName = "";
    var initials = "AB";

}
@if (Model != null)
{

    <div class="container">
        <div class="section-header row">

            <h3 class="col heading-bottom-space">Reset Password</h3>
            @if (Session["ResetpassWordSuccess"] != null)
            {
                <div id="toast-success" class="modal modal-alert modal-toast custom-toast-success" style="display: block;">
                    <header class="modal-header">
                        <h4>
                            <a class="toast-close">
                                <i class="i-tick"></i>
                            </a>
                            @Session["ResetpassWordSuccess"]
                        </h4>
                        <a class="modal-close">
                            <i class="i-cross"> </i>
                        </a>
                    </header>
                </div>
                Session["ResetpassWordSuccess"] = null;
            }
            <form action="" id="frmResetSearch" method="get" class="col" autocomplete="off">
                <ul>
                    <li class="search">
                        @*<div class="input-field custom">
                                @Html.TextBox("searchKeyword", null, new { @class = "form-control" })<label>Search via User Id, Mobile Number</label>
                            </div>*@
                        <div class="search-box">
                            <div class="input-field custom input-has-icon left-align">
                                @Html.TextBox("searchKeyword", null, new { @class = "form-control", @placeholder = "Search Via User ID, Mobile Number,Email" })
                                @*<label class="">Search Via User ID, Mobile Number,Email</label>*@
                                <div class="input-icon search-reset-icon">
                                    <i class="vi-search-2"></i>
                                </div>
                            </div>
                        </div>
                    </li>
                </ul>
            </form>
            <aside>
                <div class="btn-group btn-equal-size">

                    <div class="btn-no-margin">



                    </div>
                </div>
            </aside>
        </div>
        <div class="customer_detail_wrapper customer_detail_list">
            @if (Model.Users != null)
            {
                <table class="customer_detail_list-details">
                    <thead>
                        <tr>
                            <th style="width: 25%;">USER INFO</th>
                            <th style="width: 20%;">MOBILE NUMBER</th>
                            <th style="width: 20%;">EMAIL ID</th>
                            <th style="width: 20%;">
                                Action
                            </th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var item in Model.Users)
                        {
                            var errormessage = string.Empty;
                            try
                            {
                                if (!string.IsNullOrEmpty(item.name))
                                {
                                    var nameparts =Convert.ToString(item.name).Trim().Split(' ').ToList();
                                    if (nameparts.Count() > 1 && nameparts.Count() == 2)
                                    {
                                        initials = (nameparts[0] != null ? nameparts[0].Substring(0, 1).ToUpper() : "") + (nameparts[1] != null ? nameparts[1].Substring(0, 1).ToUpper() : "");
                                    }
                                    //initials = (nameparts[0]) + "" + nameparts[1];
                                }
                            }
                            catch (Exception ex)
                            {
                                errormessage = ex.Message;

                            }

                            <tr id="tr-@item.Id">
                                <td>
                                    <div class="table-cell">
                                        <span class="login-name">@initials</span>
                                        <label> @item.name</label>
                                    </div>
                                </td>
                                <td>
                                    <div class="table-cell">
                                        <label>@item.mobile</label>
                                    </div>
                                </td>

                                <td>
                                    <div class="table-cell">
                                        <label>@item.email</label>
                                    </div>
                                </td>

                                <td>
                                    <a class="waves-effect waves-light btn  modal-trigger btn-flat" href="#reset-password" onclick="setuservalue(@item.mobile);" data-id="@item.mobile">Reset</a>
                                </td>

                            </tr>
                        }
                    </tbody>
                </table>

            }
        </div>
    </div>



    using (Html.BeginRouteForm(MvcSettings.SitecoreRouteName, FormMethod.Post))
                        {
        <script type="text/javascript">

            function setuservalue(mobile) {
                                //alert('You clicked ' + mobile + "!");
                                var id = mobile;
                $("#hdnuserid").val(id);

                            }

        </script>

        <div class="modal-wrapper">
            <div id="reset-password" class="modal">
                <div class="modal-content">
                    <a class="modal-close"><img src="/images/AGELPortal/cross-icon.svg" /></a>
                    <h4>Reset Password</h4>
                    <div class="card-with-form login-wrap bulk">
                        <form name="upload_user_form" id="upload_user_form">
                            <div class="modal-items new-connection-form">
                                <div class="form-field">
                                    <div class="form-field">
                                        @*<h6>Password Management</h6>*@
                                        <input type="hidden" id="hdnuserid" name="MMobile" value="" />
                                        <div class="input-field custom">
                                            <input value="@password" class="validate oldpassword" type="password" name="password" id="password1"
                                                   pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}" title="Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters" required />
                                            <label class="active" for="first_name2">Password</label>
                                        </div>
                                        <div class="input-field custom">
                                            <label class="active" for="first_name2">Re-type Password</label>
                                            <input value="@newPassword" class="validate" type="password" required name="new_password" id="new_password" required" />
                                        </div>
                                        <div class="h-right btn-group2">
                                            <button type="submit" class="waves-effect btn full-btn" id="ResetPassword">Submit</button>
                                        </div>
                                        <div id="errorMessage">
                                            <span id="spnErrorValidation" class="field-validation-error" style="color: #d30a0a !important"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>


                    <div id="message">
                        <h6>Password must contain the following :</h6>
                        <p id="letter" class="invalid">Atleast 8  characters</p>
                        <p id="capital" class="invalid">Upper & lower Letters</p>
                        <p id="number" class="invalid">Atleast 1 number & 1 special character</p>
                        <p id="length" class="invalid"></p>
                        <p id="special" class="invalid"></p>
                    </div>

                </div>
            </div>
        </div>
    }
}
<script>
    var myInput = document.getElementById("password1");
    var letter = document.getElementById("letter");
    var capital = document.getElementById("capital");
    var number = document.getElementById("number");
    var length = document.getElementById("length");


    // When the user clicks on the password field, show the message box
    myInput.onfocus = function () {
        document.getElementById("message").style.display = "block";
    }

    // When the user clicks outside of the password field, hide the message box
    myInput.onblur = function () {
        document.getElementById("message").style.display = "none";
    }

    // When the user starts to type something inside the password field
    myInput.onkeyup = function () {
        // Validate lowercase letters
        var lowerCaseLetters = /[a-z]/g;
        if (myInput.value.match(lowerCaseLetters)) {
            letter.classList.remove("invalid");
            letter.classList.add("valid");
        } else {
            letter.classList.remove("valid");
            letter.classList.add("invalid");
        }

        // Validate capital letters
        var upperCaseLetters = /[A-Z]/g;
        if (myInput.value.match(upperCaseLetters)) {
            capital.classList.remove("invalid");
            capital.classList.add("valid");
        } else {
            capital.classList.remove("valid");
            capital.classList.add("invalid");
        }

        // Validate numbers
        var numbers = /[0-9]/g;
        if (myInput.value.match(numbers)) {
            number.classList.remove("invalid");
            number.classList.add("valid");
        } else {
            number.classList.remove("valid");
            number.classList.add("invalid");
        }

        // Validate length
        if (myInput.value.length >= 8) {
            length.classList.remove("invalid");
            length.classList.add("valid");
        } else {
            length.classList.remove("valid");
            length.classList.add("invalid");
        }
    }
</script>
<script type="text/javascript">
    $(function () {
        $("#ResetPassword").click(function () {
            var password = $("#password1").val();
            var confirmPassword = $("#new_password").val();
            if (password != confirmPassword) {
                alert("Passwords do not match.");
                return false;
            }
            return true;
        });
    });

    $(".search-reset-icon").on('click', function (event) {
        $("#frmResetSearch").submit();
        $("#password1").addClass("active");

    });

</script>



