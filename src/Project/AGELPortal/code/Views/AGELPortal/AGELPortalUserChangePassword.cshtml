@using Sitecore.Mvc.Configuration;
@using Sitecore.Foundation.Dictionary.Extensions
@using Sitecore.Mvc
@using Sitecore.Foundation.SitecoreExtensions.Extensions

@model Sitecore.AGELPortal.Website.Models.PortalLoginModel
@{
    Layout = null;
}

<div class="container">
    <div class="card outlined mid-form section-container border-none-mobile">
        <div class="section-header">
            <img src="/images/AGELPortal/logo.svg" alt="form-logo">
            <h1>Reset Password</h1>
            @if (Session["changePassword"] != null)
            {
                <div id="toast-success" class="modal modal-alert modal-toast custom-toast-success" style="display: block;">
                    <header class="modal-header">
                        <h4>
                            <a class="toast-close">
                                <i class="i-tick"></i>
                            </a>
                            @Session["changePassword"]
                        </h4>
                        <a class="modal-close">
                            <i class="i-cross"> </i>
                        </a>
                    </header>
                </div>
                Session["changePassword"] = null;
            }
        </div>
        @using (Html.BeginRouteForm(MvcSettings.SitecoreRouteName, FormMethod.Post, new { id = "change_password_form", name = "change_password_form", @class = "change_password_form" }))
        {
            <div class="card-with-form login-wrap">
                <div class="input-field custom">
                    <input id="password" name="password" type="password" class="validate" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}" title="Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters" required />

                    <label class="active" for="reset-password">Enter New Password</label>
                    @Html.ValidationMessageFor(model => model.password, "", new { @class = "help-block text-danger" }, "p")
                </div>
                <div class="input-field custom">
                    <input id="confirm_password" name="reset_password" type="password" class="validate" required>
                    <label class="active" for="reset-password2">Re-type New Password</label>
                    @Html.ValidationMessageFor(model => model.reset_password, "", new { @class = "help-block text-danger" }, "p")
                </div>
                <include component="ResetPassword/Red"></include>
                <div id="message">
                    <h6>Password must contain the following:</h6>
                    <p id="letter" class="invalid"> <b>Atleast 8  characters</b> </p>
                    <p id="capital" class="invalid"><b>  Upper & lower Letters</b></p>
                    <p id="number" class="invalid"><b>Atleast 1 number one special character</b></p>
                    <p id="length" class="invalid"></p>
                    <p id="special" class="invalid"></p>
                </div>
                <div class="h-right btn-group2">
                    <button href="/agelportal/home/login" class="waves-effect btn full-btn" id="ResetPassword">Create Password</button>
                    <button class="waves-effect btn-flat">Cancel</button>
                </div>
            </div>

        }
        <div class="bordered-items">
            <ul>
                <li>Need some help? Call <span class="ff-rb">19122</span></li>
            </ul>
        </div>
    </div>

</div>

<script>
    var myInput = document.getElementById("password");
    var letter = document.getElementById("letter");
    var capital = document.getElementById("capital");
    var number = document.getElementById("number");
    var length = document.getElementById("length");


    // When the user clicks on the password field, show the message box
    myInput.onfocus = function () {
        document.getElementById("message").style.display = "block";
    }

    // When the user clicks outside of the password field, hide the message box
    myInput.onblur = function () {
        document.getElementById("message").style.display = "none";
    }

    // When the user starts to type something inside the password field
    myInput.onkeyup = function () {
        // Validate lowercase letters
        var lowerCaseLetters = /[a-z]/g;
        if (myInput.value.match(lowerCaseLetters)) {
            letter.classList.remove("invalid");
            letter.classList.add("valid");
        } else {
            letter.classList.remove("valid");
            letter.classList.add("invalid");
        }

        // Validate capital letters
        var upperCaseLetters = /[A-Z]/g;
        if (myInput.value.match(upperCaseLetters)) {
            capital.classList.remove("invalid");
            capital.classList.add("valid");
        } else {
            capital.classList.remove("valid");
            capital.classList.add("invalid");
        }

        // Validate numbers
        var numbers = /[0-9]/g;
        if (myInput.value.match(numbers)) {
            number.classList.remove("invalid");
            number.classList.add("valid");
        } else {
            number.classList.remove("valid");
            number.classList.add("invalid");
        }

        // Validate length
        if (myInput.value.length >= 8) {
            length.classList.remove("invalid");
            length.classList.add("valid");
        } else {
            length.classList.remove("valid");
            length.classList.add("invalid");
        }
    }
</script>
<script type="text/javascript">
    $(function () {
        $("#ResetPassword").click(function () {
            var password = $("#password").val();
            var confirmPassword = $("#reset_password").val();
            if (password != confirmPassword) {
                alert("Passwords do not match.");
                return false;
            }
            return true;
        });
    });
</script>

