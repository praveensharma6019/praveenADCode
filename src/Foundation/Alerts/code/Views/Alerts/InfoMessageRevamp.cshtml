@using Sitecore.Foundation.Alerts.Models
@model Sitecore.Foundation.Alerts.Models.InfoMessageRevamp
@{

    var alerts = new Dictionary<InfoMessageRevamp.MessageTypeRevamp, string>
{
         { InfoMessageRevamp.MessageTypeRevamp.Info, "i-info i-24" },
         { InfoMessageRevamp.MessageTypeRevamp.Success, "i-tick" },
         { InfoMessageRevamp.MessageTypeRevamp.Warning, "alert-warning" },
         { InfoMessageRevamp.MessageTypeRevamp.Error, "i-cross i-24" }
    };
}

@if (Model != null)
{
    if (alerts[Model.Type] == "i-tick")
    {
        <div id="ToastRevampAlert" class="modal modal-alert modal-toast custom-toast-success">
            <header class="modal-header">
                <h4>
                    <a class="toast-close">
                        <i class="i-tick"></i>
                    </a>
                    @Html.Raw(Model.Heading)
                </h4>
                <a class="modal-close" id="closeIcon">
                    <i class="i-cross"> </i>
                </a>
            </header>
            <div class="modal-content">
                <p id="ToastAlertRevampContent">@Html.Raw(@Model.Message)</p>
            </div>
        </div>
    }
    else if (alerts[Model.Type] == "i-info i-24")
    {
        <div id="ToastRevampAlert" class="modal modal-alert modal-toast custom-toast-warning">
            <header class="modal-header">
                <h4>
                    <a class="toast-close">
                        <i class="i-tick"></i>
                    </a>
                    @Html.Raw(Model.Heading)
                </h4>
                <a class="modal-close" id="closeIcon">
                    <i class="i-cross"> </i>
                </a>
            </header>
            <div class="modal-content">
                <p id="ToastAlertRevampContent">@Html.Raw(Model.Message)</p>
            </div>
        </div>
    }
    else if (alerts[Model.Type] == "i-cross i-24")
    {
        <div id="ToastRevampAlert" class="modal modal-alert modal-toast custom-toast-error">
            <header class="modal-header">
                <h4>
                    <a class="toast-close">
                        <i class="i-cross"></i>
                    </a>
                    @Html.Raw(Model.Heading)
                </h4>
                <a class="modal-close" id="closeIcon">
                    <i class="i-cross"> </i>
                </a>
            </header>
            <div class="modal-content">
                <p id="ToastAlertRevampContent">@Html.Raw(Model.Message)</p>
            </div>
        </div>
    }
    <script src="/scripts/ElectricityNew/jquery-aeml-revamp.js"></script>
    if (!Model.isFormSubmission)
    {
        <script type="text/javascript">
            $(document).ready(function (e) {
                ViewToastRevampAlertMessage();
            })

            function ViewToastRevampAlertMessage() {
                window.setTimeout(function () {
                    var elem = document.getElementById('ToastRevampAlert');
                    var instance = M.Modal.init(elem, { dismissible: false });
                    instance.open();

                    if ($('#ToastAlertRevampContent').html().indexOf('</a>') > 0) {
                        window.setTimeout(function () {
                            instance.close();
                        }, 9000);
                    } else {
                        $('#closeIcon').hide();
                        window.setTimeout(function () {
                            instance.close();
                        }, 4000);
                    }
                }, 1500);
            }
        </script>
    }
    else
    {
        <script type="text/javascript">
            $(document).ready(function (e) {
                ViewToastRevampAlertMessage();
            })

            function ViewToastRevampAlertMessage() {
                window.setTimeout(function () {
                    var elem = document.getElementById('ToastRevampAlert');
                    var instance = M.Modal.init(elem, { dismissible: false });
                    instance.open();
                }, 1500);
            }
        </script>
    }

}